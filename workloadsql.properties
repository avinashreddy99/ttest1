AssignWorkloadDaoImpl.getAssignWorkloadDtls = WITH RESULTSET AS \
												( \
												SELECT  \
												A.DT_STAGE_CREATED AS stageCreated  \
												,S.DT_MULTI_REF AS multiRef   \
												,A.ID_WKLD_STAGE AS idWkldStage  \
												,A.NM_WKLD_STAGE AS wkldStageName  \
												,A.CD_WKLD_STAGE_CNTY AS wkldStageCounty  \
												,A.CD_WKLD_STAGE AS wkldStage  \
												,A.CD_WKLD_STAGE_TYPE AS wkldStageType  \
												,A.CD_WKLD_STAGE_PROGRAM AS wkldStageProgram   \
												,A.CD_WKLD_STAGE_REGION AS wkldStageRegion   \
												,A.CD_RECIDIVISM AS recidivism   \
												,A.ID_WKLD_CASE AS idWkldCase  \
												,A.IND_CASE_ALERT AS indCaseAlert   \
												,C.IND_CASE_WORKER_SAFETY AS indCaseWorkerSafety   \
												,A.IND_WKLD_CASE_SENSITIVE AS indWkldCaseSensitive   \
												,A.DT_WKLD_STAGE_PERS_LINK AS wkldStagePersLink   \
												,A.IND_WKLD_SUPERINT_NOTIF AS indWkldSuperintNotif   \
												,A.NBR_WKLD_UNIT AS wkldUnit   \
												,A.CD_WKLD_STAGE_PERS_ROLE AS wkldStagePersRole   \
												,A.CD_WKLD_STAGE_RSN_CLS AS wkldStageRsnCls   \
												,A.DT_LAST_UPDATE AS dtLastUpdated \
												,A.CD_MOBILE_STATUS AS mobileStatus   \
												,A.IND_WKLD_STAGE_PERS_NEW AS wkldStagePersNew \
												,A.CD_STAGE_CURR_PRIORITY AS stageCurrPriority \
												,S.DT_STAGE_START AS dtStageStart \
												,A.IND_SCREENED AS indScreened \
												,A.DT_INCOMING_CALL AS incomingCall \
												,S.IND_FORMALLY_SCREENED AS formallyScreened \
												,S.IND_VICTIM_NOTIFICATION_STATUS AS indRCI \
												,A.NM_WKLD_CASE AS wkldCaseName \
												,A.ID_PRIOR_STAGE AS idPriorStage \
												,C.TXT_CASE_WORKER_SAFETY AS caseWorkerSafetyTxt \
												,S.CD_SCRNNG_STAT AS indScreenEligible \
												,Z.IND_FORMALLY_SCREENED AS indScreenedFrmPrvStage \
												,COUNT(*) OVER () AS totalRecCount \
												,SPL.ID_PERSON \
												,LS.CD_LEGAL_STAT_STATUS AS legalStatus \
												,C.DECODE AS legalStatusDescr \
												,CASE \
												    WHEN CSA.ID_CSA_EPISODES_INCDNT IS NOT NULL \
												        THEN 'Y' \
												    ELSE 'N' \
												END indCSA \
												,CSV.IND_CHILD_SX_VCTMZTN_HIST AS indSVH, \
												ROW_NUMBER () OVER (PARTITION BY A.ID_WKLD_STAGE, LS.ID_PERSON ORDER BY LS.DT_LEGAL_STAT_STATUS_DT DESC) AS RNUM \
                                                ,CASE \
                                                    WHEN s.CD_STAGE = 'INT' THEN \
                                                        S.DT_STAGE_START \
                                                    ELSE \
                                                        PS.DT_STAGE_START \
                                                    END rcclCallTime \
                                                ,S.CD_STAGE_CURR_PRIORITY rcclstagecurrpriority \
												FROM WORKLOAD A   \
												INNER JOIN STAGE S ON S.ID_STAGE = A.ID_WKLD_STAGE   \
												LEFT OUTER JOIN STAGE Z ON Z.ID_STAGE = A.ID_PRIOR_STAGE   \
                                                LEFT OUTER JOIN STAGE_LINK SL on SL.ID_STAGE = A.ID_WKLD_STAGE \
                                                LEFT OUTER JOIN STAGE PS ON PS.ID_STAGE = SL.ID_PRIOR_STAGE \
												LEFT OUTER JOIN CAPS_CASE C ON C.ID_CASE = A.ID_WKLD_CASE    \
												INNER JOIN EMPLOYEE B ON B.ID_PERSON = A.ID_WKLD_PERSON   \
												LEFT OUTER JOIN STAGE_PERSON_LINK SPL   \
												    ON SPL.ID_STAGE = A.ID_WKLD_STAGE   \
												    AND SPL.CD_STAGE_PERS_ROLE = 'PC'  \
												LEFT OUTER JOIN LEGAL_STATUS LS    \
												    ON SPL.ID_PERSON = LS.ID_PERSON   \
												LEFT OUTER JOIN CLEGSTAT C  \
												    ON C.CODE = LS.CD_LEGAL_STAT_STATUS  \
												LEFT JOIN CSA_EPISODES_INCDNT CSA  \
												    ON CSA.ID_PERSON = SPL.ID_PERSON  \
												 LEFT JOIN CHILD_SX_VCTMZTN CSV \
                                                ON CSV.ID_PERSON = SPL.ID_PERSON \
												WHERE A.ID_WKLD_PERSON = :id_Person) \
												SELECT  \
												stageCreated,multiRef,idWkldStage,wkldStageName,wkldStageCounty,wkldStage,wkldStageType,wkldStageProgram,wkldStageRegion,recidivism, \
												idWkldCase,indCaseAlert,indCaseWorkerSafety,indWkldCaseSensitive,wkldStagePersLink,indWkldSuperintNotif,wkldUnit,  \
												wkldStagePersRole,wkldStageRsnCls,dtLastUpdated,mobileStatus,wkldStagePersNew,stageCurrPriority,dtStageStart,indScreened,incomingCall,  \
												formallyScreened,indRCI,wkldCaseName,idPriorStage,caseWorkerSafetyTxt,indScreenEligible,indScreenedFrmPrvStage,  \
												totalRecCount,legalStatus,legalStatusDescr  \
												,indCSA \
												,indSVH, rcclCallTime, rcclstagecurrpriority \
												FROM RESULTSET \
												WHERE RNUM=1 \
                                                ORDER BY
                             
AssignWorkloadDaoImpl.getMrefDtls=SELECT \
								  CASE \
    							  WHEN STG.DT_MULTI_REF - STG.DT_STAGE_START BETWEEN 0 AND 11 \
    							  THEN'M-Ref'|| trim(to_char(trunc(STG.DT_MULTI_REF - STG.DT_STAGE_START))) \
								  END AS multiRef,\
								  CASE \
								  WHEN WRK.IND_WKLD_STAGE_PERS_NEW =  :yes_Indicator \
    							  THEN'#' || STG.NM_STAGE \
                                  ELSE STG.NM_STAGE \
								  END AS nmStage,STG.ID_STAGE AS idStage,STG.ID_CASE AS idCase,TRUNC(STG.DT_MULTI_REF+(1)) AS dtMrefDue \
   								  FROM WORKLOAD WRK,STAGE STG WHERE STG.DT_MULTI_REF IS NOT NULL AND STG.DT_MULTI_REF - STG.DT_STAGE_START BETWEEN 0 AND 11 \
     							  AND WRK.ID_WKLD_STAGE = STG.ID_STAGE AND WRK.ID_WKLD_PERSON = :id_Person ORDER BY WRK.IND_WKLD_STAGE_PERS_NEW DESC, NVL(WRK.NM_WKLD_STAGE,' ') \
                             
AssignWorkloadDaoImpl.getMrefSecondaryDtls=SELECT \
         SAH.ID_STAGE AS idStage, \
         PER.NM_PERSON_FULL AS nmPersonFull, \
         CJB.DECODE AS cdJobClassDecode, \
         SAH.DT_ASSGND AS dtSecondaryAssgnd, \
         SAH.DT_UNASSGND AS dtSecondaryUnassgnd \
   FROM \
         STAGE_ASSIGN_HISTORY SAH, \
         PERSON PER, \
         CEMPJBCL CJB \
   WHERE \
         PER.ID_PERSON = SAH.ID_PERSON \
     AND SAH.CD_ROLE = :cd_Role  \
     AND SAH.CD_JOB_CLASS = CJB.CODE \
     AND SAH.ID_STAGE = :id_Stage \                         
                                            
                                            
AssignWorkloadDaoImpl.getMrefCssContactDtls=SELECT \
         CON.ID_CONTACT_STAGE AS idContactStage, \
         CPR.DECODE AS cdContactPurposeDecode, \
         CON.CD_CONTACT_TYPE AS cdContactType, \
         CON.DT_CONTACT_OCCURRED AS dtContactOccured, \
         PER.NM_PERSON_FULL AS nmPersonFull \
    FROM \
         CONTACT CON,\
         PERSON PER, \
         CCNTPURP CPR \
   WHERE \
         CON.CD_CONTACT_PURPOSE = CPR.CODE \
     AND CON.CD_CONTACT_PURPOSE IN (:cd_CssReviewFull,:cd_CssReviewOther,:cd_CssReviewScreened) \
     AND CON.ID_CONTACT_WORKER = PER.ID_PERSON \
     AND CON.ID_CONTACT_STAGE = :id_Stage \
                                              
                 
AssignWorkloadDaoImpl.getSijsStatus=SELECT \
									    1 AS idWkldStage \
									FROM \
									    dual \
									WHERE \
									    EXISTS ( \
									        SELECT \
									            W1.ID_WKLD_STAGE \
									        FROM \
									            FCE_APPLICATION F1, \
									            FCE_ELIGIBILITY E1, \
									            PERSON_DTL D1, \
									            STAGE_PERSON_LINK L1, \
									            WORKLOAD W1 \
									        WHERE \
									                W1.ID_WKLD_STAGE = L1.ID_STAGE \
									            AND \
									                L1.ID_PERSON = F1.ID_PERSON \
									            AND \
									                D1.ID_PERSON = F1.ID_PERSON \
									            AND \
									                E1.ID_FCE_ELIGIBILITY = F1.ID_FCE_ELIGIBILITY \
									            AND \
									                D1.CD_PERSON_CITIZENSHIP <> 'AMR' \
									            AND \
									                L1.CD_STAGE_PERS_ROLE = 'PC' \
									            AND \
									                W1.ID_WKLD_PERSON = :idPerson \
									    )  \
									UNION \
									SELECT \
									    1 AS idWkldStage \
									FROM \
									    dual \
									WHERE \
									    EXISTS ( \
									        SELECT \
									            W2.ID_WKLD_STAGE \
									        FROM \
									            FCE_APPLICATION F2, \
									            FCE_ELIGIBILITY E2, \
									            PERSON P2, \
									            STAGE_PERSON_LINK L2, \
									            WORKLOAD W2 \
									        WHERE \
									                W2.ID_WKLD_STAGE = L2.ID_STAGE \
									            AND \
									                L2.ID_PERSON = F2.ID_PERSON \
									            AND \
									                P2.ID_PERSON = F2.ID_PERSON \
									            AND \
									                E2.ID_FCE_ELIGIBILITY = F2.ID_FCE_ELIGIBILITY \
									            AND \
									                TRUNC(MONTHS_BETWEEN(SYSDATE,P2.DT_PERSON_BIRTH) / 12) >= 16 \
									            AND \
									                F2.IND_EVALUATION_CONCLUSION = 'Y' \
									            AND \
									                L2.CD_STAGE_PERS_ROLE = 'PC' \
									            AND \
									                W2.ID_WKLD_PERSON = :idPerson \
									    ) \
                                              
                                             
AssignWorkloadDaoImpl.getInRegionNotAllCitizenSijsDtls=SELECT \
                 P.NM_PERSON_FIRST AS nmPersonFirst,\
                 P.NM_PERSON_MIDDLE AS nmPersonMiddle,\
                 P.NM_PERSON_LAST AS nmPersonLast,\
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix,\
                 P.DT_PERSON_BIRTH AS dt_PersonBirth, \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) \
                 AS nbrPersonAge,  \
                 P.ID_PERSON AS idPerson, \
                 E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship,\
                 D.CD_PERSON_CITIZENSHIP AS cdElgPersonCitizenship, \
                 S.ID_CASE AS idCase, \
                 S.ID_STAGE AS idStage, \
                 CASE \
                 WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0 \
                 THEN 0 \
                 ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) \
                 END AS nbrDaysToMajority, \
                 SYSDATE AS dtSystemDate,\
                 S.CD_STAGE_CNTY AS cdStageCnty,\
                 S.ID_UNIT AS idUnit,\
                 S.CD_STAGE_REGION AS cdStageRegion,\
                 F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion,\
                 K.CD_STAGE_PERS_ROLE AS cdStagePersRole,\
                 K.ID_PERSON AS idPrimary,\
                 S.NM_STAGE AS nmStage,\
                 B.NM_PERSON_FULL AS nmPersonFull, \
                 N.NBR_PERSON_PHONE AS nbrPersonPhone,\
                 U.NBR_UNIT AS nbrUnit \
            FROM EVENT V, FCE_APPLICATION F,FCE_ELIGIBILITY E,PERSON P,PERSON B,PERSON_PHONE N,PERSON_DTL D,STAGE S,STAGE_PERSON_LINK L,STAGE_PERSON_LINK K, \
                 WORKLOAD W,UNIT U \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE \
             AND V.ID_EVENT = F.ID_EVENT \
             AND V.ID_EVENT_STAGE = S.ID_STAGE \
             AND S.ID_STAGE = L.ID_STAGE \
             AND S.ID_STAGE = K.ID_STAGE \
             AND K.CD_STAGE_PERS_ROLE = 'PR' \
             AND K.ID_PERSON = B.ID_PERSON \
             AND B.ID_PERSON = N.ID_PERSON (+) \
             AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' \
             AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') \
             AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS' \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC') \
             AND L.ID_PERSON = F.ID_PERSON \
             AND D.ID_PERSON = F.ID_PERSON \
             AND P.ID_PERSON = F.ID_PERSON \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION \
             AND E.ID_FCE_ELIGIBILITY = ( \
      SELECT MAX(G.ID_FCE_ELIGIBILITY) \
            FROM FCE_ELIGIBILITY G \
           WHERE G.ID_PERSON = L.ID_PERSON) \
             AND V.CD_EVENT_STATUS = 'APRV' \
             AND S.IND_STAGE_CLOSE = 'N' \
             AND D.CD_PERSON_CITIZENSHIP <> 'AMR' \
             AND W.ID_WKLD_PERSON = :idPerson \
             AND S.CD_STAGE_REGION = :cdRegion \
             AND E.CD_PERSON_CITIZENSHIP = :cdPersonCitizenship \
		 AND U.ID_UNIT = S.ID_UNIT \
   UNION \
          SELECT P.NM_PERSON_FIRST AS nmPersonFirst, \
                 P.NM_PERSON_MIDDLE AS nmPersonMiddle, \
                 P.NM_PERSON_LAST AS nmPersonLast, \
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix, \
                 P.DT_PERSON_BIRTH AS dtPersonBirth, \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) \
              AS nbrPersonAge, \
                 P.ID_PERSON AS idPerson, \
                 E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship, \
                 D.CD_PERSON_CITIZENSHIP AS cdElgPersonCitizenship, \
                 S.ID_CASE AS idCase, \
                 S.ID_STAGE AS idStage, \
            CASE \
            WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0 \
            THEN 0 \
            ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) \
          END AS nbrDaysToMajority, \
                 SYSDATE AS dtSystemDate, \
                 S.CD_STAGE_CNTY AS cdStageCnty, \
                 S.ID_UNIT AS idUnit, \
                 S.CD_STAGE_REGION AS cdStageRegion, \
                 F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion, \
                 K.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
                 K.ID_PERSON AS idPrimary, \
                 S.NM_STAGE AS nmStage, \
                 B.NM_PERSON_FULL AS nmPersonFull, \
                 N.NBR_PERSON_PHONE AS nbrPersonPhone, \
                 U.NBR_UNIT AS nbrUnit \
            FROM EVENT V, \
                 FCE_APPLICATION F, \
                 FCE_ELIGIBILITY E, \
                 PERSON P, \
                 PERSON B, \
                 PERSON_PHONE N, \
                 PERSON_DTL D, \
                 STAGE S, \
                 STAGE_PERSON_LINK L, \
                 STAGE_PERSON_LINK K, \
                 WORKLOAD W, \
		         UNIT U \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE \
             AND V.ID_EVENT = F.ID_EVENT \
             AND V.ID_EVENT_STAGE = S.ID_STAGE \
             AND S.ID_STAGE = L.ID_STAGE \
             AND S.ID_STAGE = K.ID_STAGE \
             AND K.CD_STAGE_PERS_ROLE = 'PR' \
             AND K.ID_PERSON = B.ID_PERSON \
             AND B.ID_PERSON = N.ID_PERSON (+) \
             AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' \
             AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') \
             AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS' \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC') \
             AND L.ID_PERSON = F.ID_PERSON \
             AND D.ID_PERSON = F.ID_PERSON \
             AND P.ID_PERSON = F.ID_PERSON \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION \
             AND E.ID_FCE_ELIGIBILITY = ( \
      SELECT MAX(G.ID_FCE_ELIGIBILITY) \
            FROM FCE_ELIGIBILITY G \
           WHERE G.ID_PERSON = L.ID_PERSON) \
             AND V.CD_EVENT_STATUS = 'APRV' \
             AND S.IND_STAGE_CLOSE = 'N' \
             AND TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) >= 16 \
             AND F.IND_EVALUATION_CONCLUSION = 'Y' \
             AND W.ID_WKLD_PERSON = :idPerson \
             AND S.CD_STAGE_REGION = :cdRegion \
             AND E.CD_PERSON_CITIZENSHIP = :cdPersonCitizenship \
		     AND U.ID_UNIT = S.ID_UNIT \
        ORDER BY dt_PersonBirth \


AssignWorkloadDaoImpl.getInRegionAllCitizenSijsDtls= SELECT \
                 P.NM_PERSON_FIRST AS nmPersonFirst, \
                 P.NM_PERSON_MIDDLE AS nmPersonMiddle,\
                 P.NM_PERSON_LAST AS nmPersonLast, \
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix, \
                 P.DT_PERSON_BIRTH AS dt_PersonBirth, \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) \
              AS nbrPersonAge, \
                 P.ID_PERSON AS idPerson, \
                 E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship, \
                 D.CD_PERSON_CITIZENSHIP AS cdElgPersonCitizenship, \
                 S.ID_CASE AS idCase, \
                 S.ID_STAGE AS idStage, \
            CASE \
            WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0 \
            THEN 0 \
            ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) \
          END AS nbrDaysToMajority, \
                 SYSDATE AS dtSystemDate, \
                 S.CD_STAGE_CNTY AS cdStageCnty, \
                 S.ID_UNIT AS idUnit, \
                 S.CD_STAGE_REGION AS cdStageRegion, \
                 F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion, \
                 K.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
                 K.ID_PERSON AS idPrimary, \
                 S.NM_STAGE AS nmStage, \
                 B.NM_PERSON_FULL AS nmPersonFull, \
                 N.NBR_PERSON_PHONE AS nbrPersonPhone, \
                 U.NBR_UNIT AS nbrUnit \
            FROM EVENT V, \
                 FCE_APPLICATION F, \
                 FCE_ELIGIBILITY E, \
                 PERSON P, \
                 PERSON B, \
                 PERSON_PHONE N, \
                 PERSON_DTL D, \
                 STAGE S, \
                 STAGE_PERSON_LINK L, \
                 STAGE_PERSON_LINK K, \
                 WORKLOAD W, \
		     UNIT U \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE \
             AND V.ID_EVENT = F.ID_EVENT \
             AND V.ID_EVENT_STAGE = S.ID_STAGE \
             AND S.ID_STAGE = L.ID_STAGE \
             AND S.ID_STAGE = K.ID_STAGE \
             AND K.CD_STAGE_PERS_ROLE = 'PR' \
             AND K.ID_PERSON = B.ID_PERSON \
             AND B.ID_PERSON = N.ID_PERSON (+) \
             AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' \
             AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') \
             AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS' \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC') \
             AND L.ID_PERSON = F.ID_PERSON \
             AND D.ID_PERSON = F.ID_PERSON \
             AND P.ID_PERSON = F.ID_PERSON \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION \
             AND E.ID_FCE_ELIGIBILITY = ( \
      SELECT MAX(G.ID_FCE_ELIGIBILITY) \
            FROM FCE_ELIGIBILITY G \
           WHERE G.ID_PERSON = L.ID_PERSON) \
             AND V.CD_EVENT_STATUS = 'APRV' \
             AND S.IND_STAGE_CLOSE = 'N' \
             AND D.CD_PERSON_CITIZENSHIP <> 'AMR' \
             AND W.ID_WKLD_PERSON = :idPerson \
             AND S.CD_STAGE_REGION = :cdRegion \
             AND U.ID_UNIT = S.ID_UNIT \
   UNION \
          SELECT P.NM_PERSON_FIRST AS nmPersonFirst, \
                 P.NM_PERSON_MIDDLE AS nmPersonMiddle, \
                 P.NM_PERSON_LAST AS nmPersonLast, \
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix, \
                 P.DT_PERSON_BIRTH AS dt_PersonBirth, \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) \
              AS nbrPersonAge, \
                 P.ID_PERSON AS idPerson, \
                 E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship, \
                 D.CD_PERSON_CITIZENSHIP AS cdElgPersonCitizenship, \
                 S.ID_CASE AS idCase, \
                 S.ID_STAGE AS idStage, \
            CASE \
            WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0 \
            THEN 0 \
            ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) \
          END AS nbrDaysToMajority, \
                 SYSDATE AS dtSystemDate, \
                 S.CD_STAGE_CNTY AS cdStageCnty, \
                 S.ID_UNIT AS idUnit, \
                 S.CD_STAGE_REGION AS cdStageRegion, \
                 F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion, \
                 K.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
                 K.ID_PERSON AS idPrimary, \
                 S.NM_STAGE AS nmStage, \
                 B.NM_PERSON_FULL AS nmPersonFull, \
                 N.NBR_PERSON_PHONE AS nbrPersonPhone, \
                 U.NBR_UNIT AS nbrUnit \
            FROM EVENT V, \
                 FCE_APPLICATION F, \
                 FCE_ELIGIBILITY E, \
                 PERSON P, \
                 PERSON B, \
                 PERSON_PHONE N, \
                 PERSON_DTL D, \
                 STAGE S, \
                 STAGE_PERSON_LINK L, \
                 STAGE_PERSON_LINK K, \
                 WORKLOAD W, \
		         UNIT U \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE \
             AND V.ID_EVENT = F.ID_EVENT \
             AND V.ID_EVENT_STAGE = S.ID_STAGE \
             AND S.ID_STAGE = L.ID_STAGE \
             AND S.ID_STAGE = K.ID_STAGE \
             AND K.CD_STAGE_PERS_ROLE = 'PR' \
             AND K.ID_PERSON = B.ID_PERSON \
             AND B.ID_PERSON = N.ID_PERSON (+) \
             AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' \
             AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') \
             AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS' \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC') \
             AND L.ID_PERSON = F.ID_PERSON \
             AND D.ID_PERSON = F.ID_PERSON \
             AND P.ID_PERSON = F.ID_PERSON \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION \
             AND E.ID_FCE_ELIGIBILITY = ( \
      SELECT MAX(G.ID_FCE_ELIGIBILITY) \
            FROM FCE_ELIGIBILITY G \
           WHERE G.ID_PERSON = L.ID_PERSON) \
             AND V.CD_EVENT_STATUS = 'APRV' \
             AND S.IND_STAGE_CLOSE = 'N' \
             AND TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) >= 16 \
             AND F.IND_EVALUATION_CONCLUSION = 'Y' \
             AND W.ID_WKLD_PERSON = :idPerson \
             AND S.CD_STAGE_REGION = :cdRegion \
             AND U.ID_UNIT = S.ID_UNIT \
        ORDER BY dt_PersonBirth \



AssignWorkloadDaoImpl.getSijsSecondaryDtls=SELECT \
         SAH.ID_STAGE AS idStage, \
         PER.NM_PERSON_FULL AS nmPersonFull, \
         CJB.DECODE AS cdJobClassDecode, \
         SAH.DT_ASSGND AS dtAssgnd, \
         SAH.DT_UNASSGND AS dtUnAssgnd, \
    CASE \
    WHEN SAH.DT_UNASSGND IS NULL \
    THEN TRUNC(SYSDATE - SAH.DT_ASSGND) \
      END AS nbrDaysAssigned \
   FROM \
         STAGE_ASSIGN_HISTORY SAH, \
         PERSON PER, \
         CEMPJBCL CJB \
   WHERE \
         PER.ID_PERSON = SAH.ID_PERSON \
     AND SAH.CD_ROLE = :cdRole \
     AND SAH.CD_JOB_CLASS = CJB.CODE \
     AND SAH.ID_STAGE = :idStage \
     AND(SAH.DT_UNASSGND IS NULL \
      OR SYSDATE - SAH.DT_UNASSGND < 90) \
      ORDER BY dtAssgnd DESC \

AssignWorkloadDaoImpl.getSijsLegalDtls=SELECT LS.ID_LEGAL_STAT_EVENT AS idLegalStatEvent,\
	       LS.DT_LAST_UPDATE AS dtLastUpdate,\
	       LS.ID_PERSON AS idPerson,\
	       LS.CD_LEGAL_STAT_CNTY AS cdLegalStatCnty, \
	       LS.CD_LEGAL_STAT_STATUS AS cdLegalStatStatus, \
	       LS.DT_LEGAL_STAT_STATUS_DT AS dtLegalStatStatus, \
	       LS.TXT_LEGAL_STAT_CAUSE_NBR AS txtLegalStatCause, \
	       LS.TXT_LEGAL_STAT_COURT_NBR AS txtLegalStatCourt \
	  FROM LEGAL_STATUS LS \
	 WHERE ID_PERSON = :idPerson \
	   AND LS.DT_LEGAL_STAT_STATUS_DT = ( \
SELECT MAX(L2.DT_LEGAL_STAT_STATUS_DT) \
	  FROM LEGAL_STATUS L2 \
	 WHERE ID_PERSON = :idPerson) \
	 
AssignWorkloadDaoImpl.getSijsEventIdDtls=SELECT     ID_EVENT AS idEvent,\
           ID_CONTACT_STAGE AS idContactStage,\
           DT_CONTACT_OCCURRED AS dtContactOccured,  \
           ID_CONTACT_WORKER AS idContactWorker \
      FROM CONTACT \
     WHERE ID_CONTACT_STAGE = :idStage \
       AND CD_CONTACT_TYPE = :cdContactType \
       AND CD_CONTACT_PURPOSE = :cdContactPurpose AND DT_CONTACT_OCCURRED > SYSDATE - 180 \
  ORDER BY dtContactOccured DESC \

AssignWorkloadDaoImpl.getSijsEventContactDtls=SELECT C.ID_EVENT AS idEvent, \
               D.DECODE AS decodeName, \
               'A' AS fullName \
          FROM CONTACT C, \
               COTHCNCT D \
         WHERE ID_CONTACT_STAGE = :idStage \
           AND C.CD_CONTACT_OTHERS = D.CODE \
           AND TRUNC(C.DT_CONTACT_OCCURRED) BETWEEN TO_DATE('01/01/1850', 'MM/DD/YYYY') AND TO_DATE('12/31/4712', 'MM/DD/YYYY') \
           AND C.CD_CONTACT_PURPOSE = :cdContactPurpose \
           AND C.CD_CONTACT_TYPE = :cdContactType \
         UNION \
        SELECT E.ID_EVENT AS idEvent, \
               P.NM_PERSON_FULL AS decodeName, \
               S.CD_STAGE_PERS_TYPE AS fullName \
          FROM PERSON P, \
               EVENT_PERSON_LINK E, \
               STAGE_PERSON_LINK S, \
               CONTACT T \
         WHERE S.ID_STAGE = :idStage \
           AND S.CD_STAGE_PERS_TYPE <> 'STF' \
           AND E.ID_PERSON = P.ID_PERSON \
           AND P.ID_PERSON = S.ID_PERSON \
           AND T.ID_EVENT = E.ID_EVENT \
           AND TRUNC(T.DT_CONTACT_OCCURRED) BETWEEN TO_DATE('01/01/1850', 'MM/DD/YYYY') AND TO_DATE('12/31/4712', 'MM/DD/YYYY') \
           AND T.CD_CONTACT_PURPOSE = :cdContactPurpose \
           AND T.CD_CONTACT_TYPE = :cdContactType \
           AND T.ID_EVENT IN ( \
	    SELECT A.ID_EVENT \
	      FROM CONTACT A \
	     WHERE A.ID_CONTACT_STAGE = :idStage) \
      ORDER BY fullName DESC \

AssignWorkloadDaoImpl.getOutRegionNotAllCitizenSijsDtls=SELECT P.NM_PERSON_FIRST AS nmPersonFirst, \
                 P.NM_PERSON_MIDDLE AS nmPersonMiddle,P.NM_PERSON_LAST AS nmPersonLast, \
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix,P.DT_PERSON_BIRTH AS dt_PersonBirth, \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 )  \
              AS nbrPersonAge,  \
                 P.ID_PERSON AS idPerson,E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship,  \
                 D.CD_PERSON_CITIZENSHIP AS cdElgPersonCitizenship,  \
                 S.ID_CASE AS idCase,  \
                 S.ID_STAGE AS idStage,  \
            CASE  \
            WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0  \
            THEN 0  \
            ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE)  \
          END AS nbrDaysToMajority,  \
                 SYSDATE AS dtSystemDate,S.CD_STAGE_CNTY AS cdStageCnty,S.ID_UNIT AS idUnit,  \
                 S.CD_STAGE_REGION AS cdStageRegion,F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion,K.CD_STAGE_PERS_ROLE AS cdStagePersRole,  \
                 K.ID_PERSON AS idPrimary,  \
                 S.NM_STAGE AS nmStage,  \
                 B.NM_PERSON_FULL AS nmPersonFull,N.NBR_PERSON_PHONE AS nbrPersonPhone,U.NBR_UNIT AS nbrUnit  \
            FROM EVENT V,  \
                 FCE_APPLICATION F,FCE_ELIGIBILITY E, \
                 PERSON P, \
                 PERSON B, \
                 PERSON_PHONE N, \
                 PERSON_DTL D, \
                 STAGE S, \
                 STAGE_PERSON_LINK L, \
                 STAGE_PERSON_LINK K, \
                 WORKLOAD W, \
		     UNIT U \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE   \
             AND V.ID_EVENT = F.ID_EVENT \
             AND V.ID_EVENT_STAGE = S.ID_STAGE \
             AND S.ID_STAGE = L.ID_STAGE \
             AND S.ID_STAGE = K.ID_STAGE \
             AND K.CD_STAGE_PERS_ROLE = 'PR' AND K.ID_PERSON = B.ID_PERSON  \
             AND B.ID_PERSON = N.ID_PERSON (+) AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS'  \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC')  \
             AND L.ID_PERSON = F.ID_PERSON  \
             AND D.ID_PERSON = F.ID_PERSON  \
             AND P.ID_PERSON = F.ID_PERSON  \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION  \
             AND E.ID_FCE_ELIGIBILITY = (  \
      SELECT MAX(G.ID_FCE_ELIGIBILITY)  \
            FROM FCE_ELIGIBILITY G  \
           WHERE G.ID_PERSON = L.ID_PERSON) AND V.CD_EVENT_STATUS = 'APRV'  \
             AND S.IND_STAGE_CLOSE = 'N'  \
             AND D.CD_PERSON_CITIZENSHIP <> 'AMR'AND W.ID_WKLD_PERSON = :idPerson  \
             AND S.CD_STAGE_REGION NOT IN ('01','02','03','04','05','06','07','08','09','10','11') AND E.CD_PERSON_CITIZENSHIP = :cdPersonCitizenship  \
		 AND U.ID_UNIT = S.ID_UNIT  \
   UNION  \
          SELECT P.NM_PERSON_FIRST AS nmPersonFirst,P.NM_PERSON_MIDDLE AS nmPersonMiddle,P.NM_PERSON_LAST AS nmPersonLast,  \
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix,P.DT_PERSON_BIRTH AS dt_PersonBirth,  \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) AS nbrPersonAge,  \
                 P.ID_PERSON AS idPerson, E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship,D.CD_PERSON_CITIZENSHIP AS cdPersonCitizenship,  \
                 S.ID_CASE AS idCase,  \
                 S.ID_STAGE AS idStage, \
                 CASE  \
            WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0 \
                       THEN 0  \
            ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) \
            END AS nbrDaysToMajority,  \
                 SYSDATE AS dtSystemDate,S.CD_STAGE_CNTY AS cdStageCnty,S.ID_UNIT AS idUnit,  \
                 S.CD_STAGE_REGION AS cdStageRegion,F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion,K.CD_STAGE_PERS_ROLE AS cdStagePersRole,  \
                 K.ID_PERSON AS idPrimary,  \
                 S.NM_STAGE AS nmStage,  \
                 B.NM_PERSON_FULL AS nmPersonFull,N.NBR_PERSON_PHONE AS nbrPersonPhone,U.NBR_UNIT AS nbrUnit  \
            FROM EVENT V,  \
                 FCE_APPLICATION F,FCE_ELIGIBILITY E,  \
                 PERSON P,  \
                 PERSON B,  \
                 PERSON_PHONE N,PERSON_DTL D,  \
                 STAGE S,  \
                 STAGE_PERSON_LINK L, STAGE_PERSON_LINK K,WORKLOAD W,  \
		         UNIT U  \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE AND V.ID_EVENT = F.ID_EVENT  \
             AND V.ID_EVENT_STAGE = S.ID_STAGE  \
             AND S.ID_STAGE = L.ID_STAGE  \
             AND S.ID_STAGE = K.ID_STAGE  \
             AND K.CD_STAGE_PERS_ROLE = 'PR' AND K.ID_PERSON = B.ID_PERSON  \
             AND B.ID_PERSON = N.ID_PERSON (+)  \
             AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS'  \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC') AND L.ID_PERSON = F.ID_PERSON  \
             AND D.ID_PERSON = F.ID_PERSON \
             AND P.ID_PERSON = F.ID_PERSON \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION \
             AND E.ID_FCE_ELIGIBILITY = (  \
      SELECT MAX(G.ID_FCE_ELIGIBILITY)  \
            FROM FCE_ELIGIBILITY G  \
           WHERE G.ID_PERSON = L.ID_PERSON)  \
             AND V.CD_EVENT_STATUS = 'APRV'  \
             AND S.IND_STAGE_CLOSE = 'N'  \
             AND TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) >= 16  \
             AND F.IND_EVALUATION_CONCLUSION = 'Y'  \
             AND W.ID_WKLD_PERSON = :idPerson \
             AND S.CD_STAGE_REGION  NOT IN ('01','02','03','04','05','06','07','08','09','10','11')  \
             AND E.CD_PERSON_CITIZENSHIP = :cdPersonCitizenship  \
		     AND U.ID_UNIT = S.ID_UNIT  \
        ORDER BY dt_PersonBirth \
	
AssignWorkloadDaoImpl.getOutRegionAllCitizenSijsDtls=SELECT P.NM_PERSON_FIRST AS nmPersonFirst, \
                 P.NM_PERSON_MIDDLE AS nmPersonMiddle,P.NM_PERSON_LAST AS nmPersonLast, \
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix,P.DT_PERSON_BIRTH AS dt_PersonBirth, \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 )  \
              AS nbrPersonAge,  \
                 P.ID_PERSON AS idPerson,E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship,  \
                 D.CD_PERSON_CITIZENSHIP AS cdElgPersonCitizenship,  \
                 S.ID_CASE AS idCase,  \
                 S.ID_STAGE AS idStage,  \
            CASE  \
            WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0  \
            THEN 0  \
            ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE)  \
          END AS nbrDaysToMajority,  \
                 SYSDATE AS dtSystemDate,S.CD_STAGE_CNTY AS cdStageCnty,S.ID_UNIT AS idUnit,  \
                 S.CD_STAGE_REGION AS cdStageRegion,F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion,K.CD_STAGE_PERS_ROLE AS cdStagePersRole,  \
                 K.ID_PERSON AS idPrimary,  \
                 S.NM_STAGE AS nmStage,  \
                 B.NM_PERSON_FULL AS nmPersonFull,N.NBR_PERSON_PHONE AS nbrPersonPhone,U.NBR_UNIT AS nbrUnit  \
            FROM EVENT V,  \
                 FCE_APPLICATION F,FCE_ELIGIBILITY E, \
                 PERSON P, \
                 PERSON B, \
                 PERSON_PHONE N, \
                 PERSON_DTL D, \
                 STAGE S, \
                 STAGE_PERSON_LINK L, \
                 STAGE_PERSON_LINK K, \
                 WORKLOAD W, \
		     UNIT U \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE   \
             AND V.ID_EVENT = F.ID_EVENT \
             AND V.ID_EVENT_STAGE = S.ID_STAGE \
             AND S.ID_STAGE = L.ID_STAGE \
             AND S.ID_STAGE = K.ID_STAGE \
             AND K.CD_STAGE_PERS_ROLE = 'PR' AND K.ID_PERSON = B.ID_PERSON  \
             AND B.ID_PERSON = N.ID_PERSON (+) AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS'  \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC')  \
             AND L.ID_PERSON = F.ID_PERSON  \
             AND D.ID_PERSON = F.ID_PERSON  \
             AND P.ID_PERSON = F.ID_PERSON  \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION  \
             AND E.ID_FCE_ELIGIBILITY = (  \
      SELECT MAX(G.ID_FCE_ELIGIBILITY)  \
            FROM FCE_ELIGIBILITY G  \
           WHERE G.ID_PERSON = L.ID_PERSON) AND V.CD_EVENT_STATUS = 'APRV'  \
             AND S.IND_STAGE_CLOSE = 'N'  \
             AND D.CD_PERSON_CITIZENSHIP <> 'AMR'AND W.ID_WKLD_PERSON = :idPerson  \
             AND S.CD_STAGE_REGION NOT IN ('01','02','03','04','05','06','07','08','09','10','11') \
		 AND U.ID_UNIT = S.ID_UNIT  \
   UNION  \
          SELECT P.NM_PERSON_FIRST AS nmPersonFirst,P.NM_PERSON_MIDDLE AS nmPersonMiddle,P.NM_PERSON_LAST AS nmPersonLast,  \
                 P.CD_PERSON_SUFFIX AS cdPersonSuffix,P.DT_PERSON_BIRTH AS dt_PersonBirth,  \
                 TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) AS nbrPersonAge,  \
                 P.ID_PERSON AS idPerson, E.CD_PERSON_CITIZENSHIP AS cdAppPersonCitizenship,D.CD_PERSON_CITIZENSHIP AS cdPersonCitizenship,  \
                 S.ID_CASE AS idCase,  \
                 S.ID_STAGE AS idStage, \
                 CASE  \
            WHEN TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) <0 \
                       THEN 0  \
            ELSE TRUNC(ADD_MONTHS(P.DT_PERSON_BIRTH,12*18) - SYSDATE) \
            END AS nbrDaysToMajority,  \
                 SYSDATE AS dtSystemDate,S.CD_STAGE_CNTY AS cdStageCnty,S.ID_UNIT AS idUnit,  \
                 S.CD_STAGE_REGION AS cdStageRegion,F.IND_EVALUATION_CONCLUSION AS indEvaluationConclusion,K.CD_STAGE_PERS_ROLE AS cdStagePersRole,  \
                 K.ID_PERSON AS idPrimary,  \
                 S.NM_STAGE AS nmStage,  \
                 B.NM_PERSON_FULL AS nmPersonFull,N.NBR_PERSON_PHONE AS nbrPersonPhone,U.NBR_UNIT AS nbrUnit  \
            FROM EVENT V,  \
                 FCE_APPLICATION F,FCE_ELIGIBILITY E,  \
                 PERSON P,  \
                 PERSON B,  \
                 PERSON_PHONE N,PERSON_DTL D,  \
                 STAGE S,  \
                 STAGE_PERSON_LINK L, STAGE_PERSON_LINK K,WORKLOAD W,  \
		         UNIT U  \
           WHERE W.ID_WKLD_STAGE = S.ID_STAGE AND V.ID_EVENT = F.ID_EVENT  \
             AND V.ID_EVENT_STAGE = S.ID_STAGE  \
             AND S.ID_STAGE = L.ID_STAGE  \
             AND S.ID_STAGE = K.ID_STAGE  \
             AND K.CD_STAGE_PERS_ROLE = 'PR' AND K.ID_PERSON = B.ID_PERSON  \
             AND B.ID_PERSON = N.ID_PERSON (+)  \
             AND N.IND_PERSON_PHONE_PRIMARY (+)  = 'Y' AND N.DT_PERSON_PHONE_END(+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') AND(N.CD_PERSON_PHONE_TYPE(+) = 'BS'  \
              OR N.CD_PERSON_PHONE_TYPE(+) = 'BC') AND L.ID_PERSON = F.ID_PERSON  \
             AND D.ID_PERSON = F.ID_PERSON \
             AND P.ID_PERSON = F.ID_PERSON \
             AND E.ID_FCE_APPLICATION = F.ID_FCE_APPLICATION \
             AND E.ID_FCE_ELIGIBILITY = (  \
      SELECT MAX(G.ID_FCE_ELIGIBILITY)  \
            FROM FCE_ELIGIBILITY G  \
           WHERE G.ID_PERSON = L.ID_PERSON)  \
             AND V.CD_EVENT_STATUS = 'APRV'  \
             AND S.IND_STAGE_CLOSE = 'N'  \
             AND TRUNC(MONTHS_BETWEEN(SYSDATE,P.DT_PERSON_BIRTH) / 12 ) >= 16  \
             AND F.IND_EVALUATION_CONCLUSION = 'Y'  \
             AND W.ID_WKLD_PERSON = :idPerson \
             AND S.CD_STAGE_REGION  NOT IN ('01','02','03','04','05','06','07','08','09','10','11')  \
             AND U.ID_UNIT = S.ID_UNIT  \
        ORDER BY dt_PersonBirth \
                                              
                                              
OnCallDaoImpl.getCurrentOnCallByPersonId=SELECT b.idOnCall FROM OnCall b,EmpOnCallLink c WHERE b.idOnCall=c.idOnCall AND c.idPerson=:idPerson AND b.dtOnCallEnd >=:date1 

OnCallDaoImpl.getOnCallByPersonId=SELECT c FROM EmpOnCallLink c WHERE c.idPerson=:idPerson  

ToDoDaoImpl.getTodoBypersonId=SELECT b.idTodo FROM Todo b WHERE b.personByIdTodoPersAssigned.idPerson=:idPerson AND b.dtTodoCompleted IS NULL

                                                                
CaseDaoImpl.searchCaseLinksByPersonId=FROM CaseLink b WHERE b.person.idPerson=:idSearch

CaseDaoImpl.searchCaseByNameAndPersonId=FROM CapsCase b \
 WHERE b.nmCase=:personFull AND (b.dtCaseClosed IS NULL or b.dtCaseClosed=:maxDate) \
 AND (b.cdCaseProgram=:program1 OR b.cdCaseProgram=:program2) \
 AND b.idCase in \
 (SELECT c.capsCase.idCase FROM Stage c, StagePersonLink d WHERE d.idPerson=:idPerson \
 AND c.idStage=d.idStage \
 AND (c.cdStageProgram=:program1 or c.cdStageProgram=:program2) \
 AND d.cdStagePersRole in(:roles) )

CaseDaoImpl.updateCasesByUnitId=Update CapsCase b set b.cdCaseRegion=:value WHERE b.idCase in (SELECT c.capsCase.idCase FROM Stage c WHERE c.idUnit=:unitId)

StageDaoImpl.getStageById=FROM Stage b WHERE b.idStage=:idSearch 

StageDaoImpl.getStagesByCaseId=FROM Stage b WHERE b.capsCase.idCase=:idSearch 

StageDaoImpl.searchStageByNameAndPersonId=FROM Stage b WHERE \
 b.nmStage=:personFull \
  AND b.idStage in \
  (select c.idStage \
  FROM Stage c, StagePersonLink d \
  WHERE d.idPerson=:idPerson \
  AND c.idStage=d.idStage \
  AND (c.cdStageProgram=:program1 OR c.cdStageProgram=:program2) \
  AND ( c.dtStageClose is NULL OR c.dtStageClose=:maxDate) \
  AND d.cdStagePersRole in(:roles) )

StageDaoImpl.updateStagesByUnitId=UPDATE Stage b set b.idUnit=:value1, b.cdStageRegion=:value2 WHERE b.idUnit=:unitId 

TodoDaoImpl.getCaseTodoList = SELECT T.cd_todo_type AS cdTodoType,T.dt_todo_due AS dtTodoDue, T.cd_todo_task AS cdTodoTask, T.txt_todo_desc AS todoDesc, T.id_todo AS idTodo, T.id_todo_case AS idTodoCase,\
       T.id_todo_stage AS idTodoStage, T.id_todo_event AS idTodoEvent, DECODE(T.NM_TODO_CREATOR_INIT,null,'SYSTEM',T.NM_TODO_CREATOR_INIT) AS nmTodoCreatorInit , S.CD_STAGE AS cdStage,\
       S.CD_STAGE_PROGRAM AS cdStageProgram, S.DT_STAGE_START AS dtStageCreated, S.IND_STAGE_CLOSE AS indStageClosure, CONCAT(CONCAT (substr(P.NM_PERSON_FIRST,1,1) , substr(P.NM_PERSON_MIDDLE,1,1)), substr(P.NM_PERSON_LAST,1,1)) AS todoAssignedTo,\
       T.DT_TODO_CREATED AS dtTodoCreated, T.DT_TODO_TASK_DUE AS dtTodoTaskDue, T.ID_TODO_INFO AS idTodoInfo, T.DT_LAST_UPDATE AS dtLastUpdate, T.ID_TODO_PERS_ASSIGNED AS idTodoPersAssigned,\
       T.DT_TODO_COMPLETED AS dtTodoCompleted, C.NM_CASE AS nmCase, S.CD_STAGE_TYPE AS cdStageType, TSK.CD_TASK_EVENT_TYPE AS cdTaskEventType FROM Todo T LEFT JOIN   stage S ON  (t.id_todo_stage = s.id_stage) INNER JOIN  person P  ON (t.id_todo_pers_assigned = p.id_person) LEFT JOIN CAPS_CASE C ON (C.ID_CASE = T.ID_TODO_CASE) LEFT JOIN TASK TSK ON (T.CD_TODO_TASK = TSK.CD_TASK) WHERE \
	   ((t.cd_todo_type ='A') OR (t.dt_todo_completed is Null))AND t.id_todo_case =   :case_todo_id  AND T.DT_TODO_DUE >= NVL(:dateFrom,T.DT_TODO_DUE) AND T.DT_TODO_DUE <= :dateTo ORDER BY T.DT_TODO_DUE, T.ID_TODO 

RetrieveCountyDaoImpl.searchCountyByCitySql =  SELECT C.CD_CITY_TEX_CNTY AS cdCounty FROM CITY C WHERE C.NM_CITY = :addrCity

SearchStagePersonLinkDaoImpl.searchStageIdList = SELECT SPL.ID_STAGE AS idStage FROM STAGE_PERSON_LINK  SPL, PERSON_MERGE_VIEW  V WHERE V.ID_PERSON_INPUT= :idPerson AND SPL.ID_PERSON= V.ID_PERSON_OUTPUT 

SearchStageDaoImpl.searchStageByCaseIdSql =  SELECT ID_STAGE AS idStage, CD_STAGE AS cdStage FROM STAGE WHERE ID_CASE =:idCase

CaseMergeUpdateDaoImpl.selectMergedCaseSql =  SELECT DISTINCT ID_CASE_MERGE AS idCaseMerge, ID_CASE_MERGE_FROM AS idCaseMergeFrom, ID_CASE_MERGE_TO AS idCaseMergeTo, DT_CASE_MERGE AS dtCaseMerge, DT_CASE_MERGE_SPLIT as dtCaseMergeSplitDate, \
	                                       	ID_CASE_MERGE_PERS_MRG AS idCaseMergePersMrg, ID_CASE_MERGE_PERS_SPLIT AS idCaseMergePersSplit, IND_CASE_MERGE_INVALID AS indCaseMergeInv, IND_CASE_MERGE_PENDING AS indCaseMergePending, DT_LAST_UPDATE AS dtLastUpdate \
                                            FROM  CASE_MERGE \
      									    START WITH ID_CASE_MERGE_TO = :idCase \
                                            CONNECT BY PRIOR ID_CASE_MERGE_TO = ID_CASE_MERGE_FROM \
                                            UNION \
      									    SELECT DISTINCT ID_CASE_MERGE AS idCaseMerge, ID_CASE_MERGE_FROM AS idCaseMergeFrom, ID_CASE_MERGE_TO AS idCaseMergeTo, DT_CASE_MERGE AS dtCaseMerge, DT_CASE_MERGE_SPLIT as dtCaseMergeSplitDate, \
	                                       	ID_CASE_MERGE_PERS_MRG AS idCaseMergePersMrg, ID_CASE_MERGE_PERS_SPLIT AS idCaseMergePersSplit, IND_CASE_MERGE_INVALID AS indCaseMergeInv, IND_CASE_MERGE_PENDING AS indCaseMergePending, DT_LAST_UPDATE AS dtLastUpdate \
     									    FROM  CASE_MERGE \
     									    START WITH ID_CASE_MERGE_TO = :idCase  \
      										CONNECT BY PRIOR ID_CASE_MERGE_FROM = ID_CASE_MERGE_TO \
     									    ORDER BY 4
     									    
CaseMergeUpdateDaoImpl.selectCaseNameSql = SELECT A.nmCase FROM   CAPS_CASE A  WHERE  A.idCase = :idCase

CaseMergeUpdateDaoImpl.selectPersonNameFullSql = SELECT C.nmPersonFull   FROM   PERSON C WHERE  C.idPerson = :idPerson	


Todo.getTodoDetails = SELECT ID_TODO AS idTodo, CD_TODO_TYPE AS cdTodoType, CD_TODO_TASK AS cdTodoTask, DT_TODO_COMPLETED AS dtTodoCompleted, DT_TODO_CREATED AS dtTodoCreated, DT_TODO_DUE AS dtTodoDue, DT_TODO_TASK_DUE AS dtTodoTaskDue, ID_TODO_CASE AS idTodoCase, ID_TODO_EVENT AS idTodoEvent, \
					  ID_TODO_PERS_CREATOR AS idTodoPersCreator, ID_TODO_PERS_WORKER AS idTodoPersWorker, ID_TODO_PERS_ASSIGNED AS idTodoPersAssigned, ID_TODO_STAGE as idTodoStage, TXT_TODO_DESC AS todoDesc, TXT_TODO_LONG_DESC AS todoLongDesc, DT_LAST_UPDATE AS dtLastUpdate \
					  FROM TODO WHERE ID_TODO = :idTodo		
					  
Approvers.getApproversDetails = SELECT A.DT_APPROVERS_DETERMINATION AS dtApproversDetermination, B.NM_PERSON_FULL AS nmPersonFull, A.CD_APPROVERS_STATUS AS cdApproversStatus, \
								A.TXT_APPROVERS_CMNTS AS approversCmnts, A.ID_TODO AS idTodo, A.ID_PERSON AS id_Person, A.ID_APPROVERS AS idApprovers, A.DT_LAST_UPDATE AS dtLastUpdate, TO_CHAR(A.DT_APPROVERS_DETERMINATION, 'HH:MI AM') AS tmScrTmApprovalTime, \
								A.CD_OVRLL_DISPTN AS cdOvrllDisptn, A.CD_STAGE_REASON_CLOSED AS cdStageReasonClosed, A.DT_DETERMINATION_RECORDED AS dtDeterminationRecorded, \
								A.CD_JOB_CLASS AS cdJobClass, A.IND_EMP_CONFIRMED_HRMIS AS indEmpConfirmedHrmis, A.IND_EXTN_WITHIN_CW_CTR AS indExtnWithinCwCtr, A.CD_EXTN_DAYS AS cdApprovalLength FROM PERSON B, APPROVERS A WHERE A.ID_APPROVAL = :id_Approval AND A.ID_PERSON = B.ID_PERSON
								
StagePersonLink.getStagePersonDetails =	SELECT A.NM_PERSON_FULL as nmPersonFull, B.ID_PERSON as idTodoPersWorker, C.NM_STAGE as nmStage, B.CD_STAGE_PERS_ROLE as cdStagePerRole FROM PERSON A, STAGE_PERSON_LINK B, STAGE C WHERE C.ID_STAGE = :szCdIDStage \
										AND B.ID_STAGE = C.ID_STAGE AND B.ID_PERSON = A.ID_PERSON  AND (B.CD_STAGE_PERS_ROLE  = :cdStagePerRole \
										OR  B.CD_STAGE_PERS_ROLE  = 'HP') 
										
UnitPerson.getUnitPersonDdetails = SELECT B.ID_PERSON AS idTodoPersAssigned, A.NM_PERSON_FULL AS nmPersonFull FROM PERSON A, UNIT B \
						   WHERE B.CD_UNIT_PROGRAM = :szCdunitProgram AND B.CD_UNIT_REGION = :szCdunitRegion \
						   AND B.NBR_UNIT = :szCdunitNBRUnit AND B.ID_PERSON =  A.ID_PERSON 
						   
Approval.getApprovalDetail = FROM Approval WHERE idApproval = :id_approval 

ApprovalEvnLinkDel.getApprovalEvnLinkDtl = FROM ApprovalEventLink WHERE idApproval = :idapproval AND idEvent = :idevent

ApproversDel.getApproversDetails = FROM Approvers WHERE idApproval = :idapproval

ApprovalDaoImpl.fetchIdEventForIdAprEvent = SELECT   ID_EVENT AS idEvent  FROM   APPROVAL_EVENT_LINK  WHERE   ID_APPROVAL = :idEvent 

TodoDel.getTodoDetail = FROM Todo WHERE idTodo = :idTodo

EventDel.getEventDetail = FROM Event WHERE idEvent = :event_id

//CCMN80S
//ccmn27d
//AddedtoincludeExternalOrganizationinAssignPagePPM45615
Assign.getAvailStaffInfo = SELECT H.NBR_UNIT AS unit, P.nm_person_full AS nmPersonFull, C.CD_EMP_BJN_EMP AS bjnJob, C.DT_EMP_LAST_ASSIGNED AS dtEmpLastAssigned, F.NBR_PERSON_PHONE AS phone, \
  						   F.NBR_PERSON_PHONE_EXTENSION AS phoneExtension,C.TXT_EMPLOYEE_EMAIL_ADDRESS AS recipientEmailAddress, \
  						   C.NM_EMP_OFFICE_NAME AS nmOfficeName, A.ID_UNIT AS idUnit, A.ID_PERSON AS idPerson, C.CD_EXTERNAL_TYPE AS externalOrg \
    					   FROM  UNIT_EMP_LINK   A, EMPLOYEE  C, UNIT	H,PERSON_PHONE F, Person P \
              			   WHERE    C.ID_PERSON     			   = A.ID_PERSON \
                           AND    C.IND_EMP_JOB_ASSIGN_CURR      = 'Y' \
                           AND    A.ID_PERSON                    = F.ID_PERSON (+) \
                           AND    F.IND_PERSON_PHONE_PRIMARY (+) = 'Y' \
                           AND    F.CD_PERSON_PHONE_TYPE (+)     = 'BS' \
                           AND    F.DT_PERSON_PHONE_END (+)      = to_date('31-DEC-4712','DD-MON-YY') \
                           AND P.ID_PERSON (+) = A.ID_PERSON \
                           AND A.ID_UNIT = H.ID_UNIT \
                           AND A.ID_UNIT = :idUnit \
                           ORDER BY H.NBR_UNIT, \
                           A.CD_UNIT_MEMBER_IN_OUT, \
                           A.CD_UNIT_MEMBER_ROLE desc, \
                           C.DT_EMP_LAST_ASSIGNED 
    				       
//ccmn29d
//AddedtoincludeExternalOrganizationinAssignPagePPM45615  			       
Assign.getAssignmentGroup =   SELECT A.ID_STAGE AS idStage, A.CD_STAGE AS cdStage, A.CD_STAGE_PROGRAM AS cdStageProgram, \
                              A.CD_STAGE_TYPE AS cdStageType,A.CD_STAGE_CNTY AS cdStageCnty, A.NM_STAGE AS nmStage,A.ID_CASE AS idCase, \
                              B.NM_PERSON_FULL AS nmPersonFull,C.ID_PERSON AS idPerson,C.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
                              C.ID_STAGE_PERSON_LINK AS idStagePerson,C.DT_LAST_UPDATE AS dtLastUpdate, \
                              D.NM_CASE AS nmCase,A.DT_MULTI_REF AS dtMultiRef, A.id_unit AS idUnit, \
                              E.TXT_EMPLOYEE_EMAIL_ADDRESS AS workerEmailAddres, E.CD_EXTERNAL_TYPE AS externalOrg \
                              FROM STAGE A, PERSON B,STAGE_PERSON_LINK C,CAPS_CASE D, EMPLOYEE E \
                              WHERE A.ID_STAGE = :idStage \
                              AND   A.ID_STAGE = C.ID_STAGE \
                              AND   C.ID_PERSON = B.ID_PERSON \
                              AND   B.ID_PERSON = E.ID_PERSON \
                              AND   C.CD_STAGE_PERS_TYPE = 'STF' \
                              AND   A.ID_CASE  = D.ID_CASE(+) \
                              ORDER BY C.CD_STAGE_PERS_ROLE		
     //ccmn79d                         
Assign.getOnCallDtls = SELECT B.CD_ON_CALL_REGION AS cdRegion, B.CD_ON_CALL_COUNTY AS cdOnCallCounty , A.CD_ON_CALL_PROGRAM AS cdOnCallProgram , \
					   A.CD_ON_CALL_TYPE AS cdOnCallType , A.DT_ON_CALL_START AS dtOnCallStart , A.DT_ON_CALL_END AS dtOnCallEnd ,A.ID_ON_CALL AS idOnCall \
					   FROM ON_CALL A, ON_CALL_COUNTY B \
                       WHERE  A.ID_ON_CALL = B.ID_ON_CALL \
                       AND    A.CD_ON_CALL_PROGRAM = :cdOnCallProgram \
                       AND    B.CD_ON_CALL_COUNTY  = :cdOnCallCounty \
                       AND \
                       ((A.CD_ON_CALL_TYPE  =  'BL' \
                       AND A.DT_ON_CALL_START <= :dtOnCallStart \
                       AND A.DT_ON_CALL_END   >  :dtOnCallStart ) \
                       OR \
                       (A.CD_ON_CALL_TYPE = 'SH' \
                       AND TO_CHAR(A.DT_ON_CALL_START, 'SSSSS') < TO_CHAR(A.DT_ON_CALL_END, 'SSSSS') \
                       AND TRUNC(A.DT_ON_CALL_START) <= TRUNC(:dtOnCallStart) \
                       AND TRUNC(A.DT_ON_CALL_END) >= TRUNC(:dtOnCallStart) \
                       AND TO_CHAR(A.DT_ON_CALL_START, 'SSSSS') <= TO_CHAR(:dtOnCallStart,'SSSSS') \
                       AND TO_CHAR(A.DT_ON_CALL_END, 'SSSSS')  > TO_CHAR(:dtOnCallStart,'SSSSS')) \
                       OR \
                       (A.CD_ON_CALL_TYPE = 'SH' \
                       AND TO_CHAR(A.DT_ON_CALL_START, 'SSSSS') > TO_CHAR(A.DT_ON_CALL_END, 'SSSSS') \
                       AND TRUNC(A.DT_ON_CALL_START) = TRUNC(:dtOnCallStart) \
                       AND TRUNC(A.DT_ON_CALL_END) > TRUNC(:dtOnCallStart) \
					   AND (TO_CHAR(A.DT_ON_CALL_START, 'SSSSS') <= TO_CHAR(:dtOnCallStart, 'SSSSS'))) \
				       OR \
                       (A.CD_ON_CALL_TYPE = 'SH' \
                       AND TO_CHAR(A.DT_ON_CALL_START, 'SSSSS') > TO_CHAR(A.DT_ON_CALL_END, 'SSSSS') \
                       AND TRUNC(A.DT_ON_CALL_START) < TRUNC(:dtOnCallStart) \
                       AND TRUNC(A.DT_ON_CALL_END) = TRUNC(:dtOnCallStart) \
                       AND TO_CHAR(A.DT_ON_CALL_END, 'SSSSS')    > TO_CHAR(:dtOnCallStart, 'SSSSS')) \
                       OR \
                       (A.CD_ON_CALL_TYPE = 'SH' \
                       AND TO_CHAR(A.DT_ON_CALL_START, 'SSSSS') > TO_CHAR(A.DT_ON_CALL_END, 'SSSSS') \
                       AND TRUNC(A.DT_ON_CALL_START) < TRUNC(:dtOnCallStart) \
                       AND TRUNC(A.DT_ON_CALL_END) > TRUNC(:dtOnCallStart) \
                       AND (TO_CHAR(A.DT_ON_CALL_START, 'SSSSS') <= TO_CHAR(:dtOnCallStart, 'SSSSS') \
                       OR  TO_CHAR(A.DT_ON_CALL_END, 'SSSSS') > TO_CHAR(:dtOnCallStart, 'SSSSS'))))  	
                       
//ccmn28d                     
Assign.onCallAvailStaff =   SELECT G.ID_PERSON AS idPerson, F.ID_UNIT AS idUnit, G.CD_EMP_ON_CALL_DESIG AS cdEmpOnCallDesig, \
   						   G.NBR_EMP_ON_CALL_PHONE1 AS empOnCallPhone1 ,G.NBR_EMP_ON_CALL_EXT1 AS empOnCallExt1, \
   						   G.NBR_EMP_ON_CALL_PHONE2 AS empOnCallPhone2, \
    					   G.NBR_EMP_ON_CALL_EXT2 AS empOnCallExt2, G.NBR_EMP_ON_CALL_CNTCT_ORD AS empOnCallCntctOrd, \
                           B.NM_PERSON_FULL AS nmPersonFull,C.DT_EMP_LAST_ASSIGNED AS dtEmpLastAssigned, D.NM_OFFICE_NAME AS nmOfficeName, \
                           E.CD_JOB_BJN AS bjnJob,A.NBR_PERSON_PHONE AS phone, \
                           A.NBR_PERSON_PHONE_EXTENSION AS phoneExtension \
                           FROM   PERSON_PHONE A,PERSON B,EMPLOYEE C,OFFICE  D,EMP_JOB_HISTORY  E,UNIT_EMP_LINK F,EMP_ON_CALL_LINK G WHERE  G.ID_ON_CALL = :idOnCall \
                           AND    G.ID_PERSON = B.ID_PERSON \
                           AND    G.ID_PERSON = C.ID_PERSON \
                           AND    D.ID_OFFICE = C.ID_EMP_OFFICE \
                           AND    E.ID_EMP_JOB_HISTORY = C.ID_EMP_JOB_HISTORY \
                           AND    E.IND_JOB_ASSIGNABLE = 'Y' \
                           AND    G.ID_PERSON = F.ID_PERSON \
                           AND    A.ID_PERSON (+) = G.ID_PERSON \
                           AND    A.IND_PERSON_PHONE_PRIMARY  (+)= 'Y' \
                           AND    A.CD_PERSON_PHONE_TYPE  (+)= 'BS' \
                           AND    A.DT_PERSON_PHONE_END (+)= :endDate \
                           AND    F.CD_UNIT_MEMBER_IN_OUT = 'IN' \
                           ORDER BY G.NBR_EMP_ON_CALL_CNTCT_ORD	       

Assign.indCSSReviewContact =  SELECT C.ID_CONTACT_STAGE,C.DT_LAST_UPDATE,C.ID_EVENT,C.ID_CONTACT_WORKER,C.CD_CONTACT_LOCATION, \
							  C.CD_CONTACT_METHOD,C.CD_CONTACT_OTHERS, \
                              C.CD_CONTACT_PURPOSE,C.CD_CONTACT_TYPE,C.DT_CNTCT_MNTHLY_SUMM_BEG,C.DT_CNTCT_MNTHLY_SUMM_END, \
                              C.DT_CNTCT_NEXT_SUMM_DUE,C.DT_CONTACT_APPRV, \
                              C.DT_CONTACT_OCCURRED,C.IND_CONTACT_ATTEMPTED \
                              FROM CONTACT C WHERE C.ID_CONTACT_STAGE = :idStage and C.CD_CONTACT_PURPOSE IN (:cssReviewFull, :cssReviewOther,:cssReviewScreened)

Approvers.getSearchApprovalId = SELECT a.idApproval FROM Approvers a WHERE a.idTodo = :idTodo   

#Added for DAM: CAUDB3D
Approvers.getDateApproversDetermination=SELECT  A.DT_APPROVERS_DETERMINATION as dtApprvDet \
							 FROM APPROVERS A \
						     WHERE A.ID_APPROVAL = :idApproval \
						     AND A.ID_APPROVERS = \
						         (SELECT MAX(A1.ID_APPROVERS) ID_APPROVERS \
						             FROM APPROVERS A1 \
						             WHERE A1.ID_APPROVAL = A.ID_APPROVAL \
						             AND A1.DT_APPROVERS_DETERMINATION = \
						            (SELECT MAX(A3.DT_APPROVERS_DETERMINATION) DT_APPROVERS_DETERMINATION \
						             FROM APPROVERS A3 \
						             WHERE A3.ID_APPROVAL = A.ID_APPROVAL \
						            ) \
						         ) 

ApprovalEventLink.getEventIdAndTask = SELECT  A.ID_EVENT as idEvent, B.CD_TASK as cdTask FROM EVENT B, APPROVAL_EVENT_LINK A \
    									   WHERE   A.ID_APPROVAL = :idApproval AND A.ID_EVENT = B.ID_EVENT
    									   
StageDaoImpl.searchStageEventById =  SELECT  A.ID_EVENT_STAGE AS idStage, B.ID_CASE AS idCase, B.CD_STAGE AS cdStage, B.CD_STAGE_PROGRAM AS cdStageProgram, B.CD_STAGE_REASON_CLOSED AS cdStageReasonClosed, B.NM_STAGE AS nmStage,  B.DT_STAGE_CLOSE AS dtStageClose, B.IND_STAGE_CLOSE AS indStageClose \
   									 FROM STAGE B,  EVENT A WHERE A.ID_EVENT = :idEvent AND A.ID_EVENT_STAGE = B.ID_STAGE
   								
WorkloadDao.getWrkLoadPersonId =  SELECT W.ID_WKLD_PERSON FROM Workload W WHERE W.ID_WKLD_STAGE=:idStage AND W.CD_WKLD_STAGE_PERS_ROLE=:cdStagePersRole 

WorkloadDao.getWrkLoadPersonIdsByRole =  SELECT SPL.ID_PERSON  \
    										FROM   STAGE_PERSON_LINK SPL \
    										WHERE  SPL.ID_STAGE           = :idStage \
   											 AND    SPL.CD_STAGE_PERS_ROLE = :cdStagePersRole
StagePersonLinkDao.getStgPersLinkPersonId = SELECT SPL.idPerson FROM StagePersonLink SPL WHERE SPL.idStage = :idStage AND SPL.cdStagePersRole=:cdStagePersRole 

WebsvcFormTransSearchDaoImpl.getWebsvcFromTrans = SELECT ID_WEBSVC_FORM_TRANS AS idWebsvcFormTrans, DT_CREATED AS dtCreated, DT_LAST_UPDATE AS dtLastUpdate, ID_EVENT AS idEvent, NBR_RETURN AS idReturn \
     											  FROM WEBSVC_FORM_TRANS WHERE ID_EVENT = :idEvent 
   												                                   
EmployeeDaoImpl.getEmployeePersonPhoneDtl = SELECT * FROM (SELECT E.ID_PERSON AS idPerson, E.NBR_EMP_ACTIVE_PCT AS nbrEmpActivePct, E.DT_EMP_HIRE AS dtEmpHire, E.ID_EMP_JOB_HISTORY AS idEmpJobHistory, \
											  E.ID_EMPLOYEE_LOGON AS idEmployeeLogon, E.CD_EMPLOYEE_CLASS AS cdEmployeeClass, E.TXT_EMPLOYEE_CLASS AS txtEmployeeClass, E.CD_EMP_SECURITY_CLASS_NM AS cdEmpSecurityClassNm, \
											  E.ID_EMP_OFFICE AS idOffice, E.DT_EMP_LAST_ASSIGNED AS dtEmpLastAssigned, E.CD_EMP_PROGRAM AS cdEmpProgram, E.IND_EMP_CONFIRMED_HRMIS AS indEmpConfirmedHrmis, \
											  E.IND_EMP_PENDING_HRMIS AS indEmpPendingHrmis, E.IND_EMP_ACTIVE_STATUS AS indActiveStatus, E.DT_EMP_TERMINATION AS dtEmpTermination, E.ID_EMP_UNIT AS idUnit, EJH.ID_JOB_PERS_SUPV AS idJobPersSupv, \
											  EJH.CD_JOB_CLASS AS cdJobClass, EJH.TXT_JOB_DESCR AS txtJobDesc, EJH.IND_JOB_ASSIGNABLE AS indJobAssignable, EJH.CD_JOB_FUNCTION AS cdJobFunction, \
											  EJH.CD_JOB_BJN AS bjnJob, EJH.DT_JOB_END AS dtJobEnd, EJH.DT_JOB_START AS dtJobStart, O.CD_OFFICE_MAIL as cdOfficeMail, O.CD_OFFICE_PROGRAM AS cdOfficeProgram, \
											  O.CD_OFFICE_REGION AS cdOfficeRegion, O.NM_OFFICE_NAME AS nmOfficeName, MC.NBR_MAIL_CODE_PHONE AS mailCodePhone, MC.NBR_MAIL_CODE_PHONE_EXT AS mailCodePhoneExt, \
											  MC.ADDR_MAIL_CODE_ST_LN_1 AS addrMailCodeStLn1, MC.ADDR_MAIL_CODE_ST_LN_2 AS addrMailCodeStLn2, MC.ADDR_MAIL_CODE_CITY AS addrMailCodeCity, MC.ADDR_MAIL_CODE_ZIP AS addrMailCodeZip, \
											  MC.ADDR_MAIL_CODE_COUNTY AS addrMailCodeCounty, MC.IND_MAIL_CODE_INVALID AS indMailCodeInvalid, PP.ID_PERSON_PHONE AS idPhone, PP.TXT_PERSON_PHONE_COMMENTS AS phoneComments, \
											  PP.NBR_PERSON_PHONE_EXTENSION AS nbrPhoneExtension, PP.NBR_PERSON_PHONE AS nbrPhone, PP.DT_PERSON_PHONE_START AS dtPersonPhoneStart, PP.DT_PERSON_PHONE_END AS dtPersonPhoneEnd, \
											  PP.IND_PERSON_PHONE_INVALID AS indPersonPhoneInvalid, PP.IND_PERSON_PHONE_PRIMARY AS indPersonPhonePrimary, PP.CD_PERSON_PHONE_TYPE AS cdPhoneType, N.ID_NAME AS idName, \
											  N.IND_NAME_INVALID AS indNameInvalid, N.NM_NAME_FIRST AS nmNameFirst, N.NM_NAME_MIDDLE AS nmNameMiddle, N.NM_NAME_LAST AS nmNameLast, N.IND_NAME_PRIMARY AS indNamePrimary, \
											  N.CD_NAME_SUFFIX AS cdNameSuffix, N.DT_NAME_START_DATE AS dtNameStart,N.DT_NAME_END_DATE AS dtNameEnd FROM NAME N, \
											  (SELECT ID_PERSON, ID_PERSON_PHONE, TXT_PERSON_PHONE_COMMENTS, NBR_PERSON_PHONE_EXTENSION, NBR_PERSON_PHONE, DT_PERSON_PHONE_START, DT_PERSON_PHONE_END,IND_PERSON_PHONE_INVALID, \
											  IND_PERSON_PHONE_PRIMARY, CD_PERSON_PHONE_TYPE FROM PERSON_PHONE WHERE ID_PERSON_PHONE = ( SELECT MAX(PP2.ID_PERSON_PHONE)FROM PERSON_PHONE PP2 WHERE PP2.ID_PERSON = :uIdPerson AND \
											  PP2.IND_PERSON_PHONE_PRIMARY = 'Y' AND PP2.DT_PERSON_PHONE_END =  (SELECT MAX(PP3.DT_PERSON_PHONE_END) FROM PERSON_PHONE PP3 WHERE PP3.IND_PERSON_PHONE_PRIMARY = 'Y' AND PP3.ID_PERSON = :uIdPerson))) PP, \
											  MAIL_CODE MC,OFFICE O, (SELECT IND_JOB_ASSIGNABLE, CD_JOB_FUNCTION, CD_JOB_BJN, DT_JOB_END, DT_JOB_START, CD_JOB_CLASS, ID_PERSON, ID_JOB_PERS_SUPV, C.DECODE AS TXT_JOB_DESCR FROM EMP_JOB_HISTORY , \
											  CEMPJBCL C WHERE CD_JOB_CLASS = C.CODE AND ID_EMP_JOB_HISTORY = (SELECT MAX(EJH1.ID_EMP_JOB_HISTORY) FROM EMP_JOB_HISTORY EJH1 WHERE EJH1.ID_PERSON = :uIdPerson \
											  AND EJH1.DT_JOB_END = (SELECT MAX(EJH2.DT_JOB_END) FROM EMP_JOB_HISTORY EJH2 WHERE EJH2.ID_PERSON = :uIdPerson))) EJH, EMPLOYEE E WHERE E.ID_PERSON = :uIdPerson \
											  AND E.ID_PERSON = N.ID_PERSON (+) AND N.IND_NAME_PRIMARY (+) = 'Y' AND N.DT_NAME_END_DATE (+) = TO_DATE('12/31/4712', 'MM/DD/YYYY') AND E.ID_PERSON = PP.ID_PERSON (+) \
											  AND E.ID_PERSON = EJH.ID_PERSON (+) AND E.ID_EMP_OFFICE = O.ID_OFFICE (+) AND O.CD_OFFICE_MAIL = MC.CD_MAIL_CODE (+)) WHERE ROWNUM = 1
											   
ApprovalPersonSearchDaoImpl.searchApprovalPersonSql = SELECT  A.ID_APPROVAL_PERSON as idPerson, B.NM_PERSON_FULL as nmPersonFull,  A.TXT_APPROVAL_TOPIC AS approvalTopic \
         											  FROM    PERSON   B, APPROVAL A \
   												      WHERE   A.ID_APPROVAL        = :idApproval \
  													  AND     A.ID_APPROVAL_PERSON = B.ID_PERSON
  													  
ApprovalRejectionPersonDaoImpl.getApprovalRejectionDtls =  SELECT B.NM_PERSON_FULL as nmPersonFull, A.ID_APPROVAL_REJECTION as idApprovalRejection, A.ID_REJECTOR as idRejector, A.DT_REJECTION as dtRejection, A.DT_LAST_UPDATE as dtLastUpdate,\
	          												     A.IND_APS_EFFORT as indApsEffort, A.IND_PROBLEMS as indProblems, A.IND_EVIDENCE as indEvidence,  A.IND_MISSING_EVID_RPTR as indMissingEvidRptr,  A.IND_MISSING_EVID_AP as indMissingEvidAp, \
	          												     A.IND_MISSING_EVID_MP as indMissingEvidMp, A.IND_MISSING_EVID_COL as indMissingEvidCol, A.IND_MISSING_EVID_PHOTOS as indMissingEvidPhotos, A.IND_MISSING_EVID_DE as indMissingEvidDe, \
	                                                             A.IND_MISSING_EVID_OTH as indMissingEvidOth,  A.IND_DISCRETIONARY as indDiscretionary, A.TXT_APPROVERS_CMNTS AS approversCmnts, A.IND_CPS_COLLATERALS as indCpsCollaterals, A.IND_CPS_SERVICES as indCpsServices, \
	                                                             A.IND_CPS_POLICY as indCpsPolicy, A.IND_CPS_INTERVIEWS as indCpsInterviews, A.IND_CPS_CRIMINAL_HISTORY as indCpsCriminalHistory, A.IND_CPS_FACTORS as indCpsFactors, A.IND_CPS_HISTORY as indCpsHistory, A.IND_CPS_PREVIOUS_INV as indCpsPreviousInv,\
               													 A.IND_CPS_ALLEGATIONS as indCpsAllegations, A.IND_CPS_DRUG_TESTING as indCpsDrugTesting, A.IND_CPS_DISPOSITION as indCpsDisposition, A.IND_CPS_RISK_ASSESSMENT as indCpsRiskAssessment, A.IND_CPS_SEARCH as indCpsSearch, A.IND_CPS_LAW_ENFORCEMENT as indCpsLawEnforcement,\
               													 A.IND_CPS_HOME_VISIT as indCpsHomeVisit, A.IND_CPS_ADD_SERVICES as indCpsAddServices, A.IND_CPS_LEGAL_ACTION as indCpsLegalAction, A.IND_CPS_ROLES as indCpsRoles, A.IND_CPS_PRINCIPALS as indCpsPrincipals, A.IND_CPS_OTHER as indCpsOther,\
               													 A.CD_OVRLL_DISPTN as cdOvrllDisptn, A.CD_STAGE_REASON_CLOSED as cdStageReasonClosed, A.DT_DETERMINATION_RECORDED as dtDeterminationRecorded, A.CD_JOB_CLASS as cdJobClass, A.IND_EMP_CONFIRMED_HRMIS as indEmpConfirmedHrmis, A.IND_AFC_INTERVIEWS as indAfcInterviews,\
             												     A.IND_AFC_FOLLOW_UP as indAfcFollowUp, A.IND_AFC_EVIDENCE as indAfcEvidence, A.IND_AFC_INCOMPLETE as indAfcIncomplete, A.IND_AFC_INCONSISTENT as indAfcInconsistent, A.IND_AFC_NOT_SUPPORTED as indAfcNotSupported, A.IND_AFC_NOT_SUMMARIZED as indAfcNotSummarized,\
               													 A.IND_AFC_CONCERNS as indAfcConcerns, A.IND_AFC_OTHER as indAfcOther, A.IND_CCL_INCOMPLETE as indCclIncomplete, A.IND_CCL_COLLATERALS as indCclCollaterals, A.IND_CCL_INTERVIEWS as indCclInterviews, A.IND_CCL_CITATIONS as indCclCitations, A.IND_CCL_EXTERNAL as indCclExternal,\
																 A.IND_CCL_ABUSE as indCclAbuse, A.IND_CCL_ALLEGATIONS as indCclAllegations, A.IND_CCL_EVIDENCE as indCclEvidence, A.IND_CCL_PERSON_LIST as indCclPersonList, A.IND_INCMPLT_CCL_INV as indInCompleteCCLRejection, A.IND_CCL_OTHER as indCclOther, A.IND_APS_RORA as indApsRora, A.IND_APS_ICS as indApsIcs, A.IND_APS_ROOT_CAUSE as indApsRootCause \
	   															 FROM   APPROVAL_REJECTION A,  PERSON B \
	   														     WHERE  ID_CASE = :idCase \
	                                                             AND ID_STAGE = :idStage \
	                                                             AND A.ID_REJECTOR = B.ID_PERSON \
	                                                             ORDER BY ID_APPROVAL_REJECTION

//artf164454 - updated the query to include the RCI Alerts when case worker reassigned 
TododaoImpl.getTodoUpdateDel = FROM Todo b WHERE b.personByIdTodoPersAssigned.idPerson=:idPerson AND b.stage.idStage=:stageid AND ((b.dtTodoCompleted IS NULL	AND (b.cdTodoTask !=1047 OR b.cdTodoTask is null)) OR b.cdTodoTask = 9907)

ToDoDaoImpl.getTodoByTodoStageIdTask= Select T.ID_TODO AS idTodo, \
									  T.cd_todo_type AS cdTodoType, \
									  T.DT_TODO_COMPLETED AS dtTodoCompleted, \
									  T.DT_TODO_CREATED AS dtTodoCreated, \
									  T.dt_todo_due AS dtTodoDue, \
									  T.cd_todo_task AS cdTodoTask, \
									  T.DT_TODO_TASK_DUE AS dtTodoTaskDue, \
									  T.id_todo_case AS idTodoCase, \
									  T.ID_TODO_PERS_CREATOR AS idTodoPersCreator, \
									  T.ID_TODO_PERS_ASSIGNED AS idTodoPersAssigned, \
									  T.ID_TODO_PERS_WORKER AS idTodoPersWorker, \
									  T.id_todo_stage as idTodoStage, \
									  T.id_todo_event as idTodoEvent, \
									  T.txt_todo_desc AS todoDesc, \
									  T.TXT_TODO_LONG_DESC AS todoLongDesc,\
       								  T.DT_LAST_UPDATE AS dtLastUpdate \
       								  FROM Todo T \
       								  WHERE T.ID_TODO_STAGE =:idSearch \
       								  AND T.CD_TODO_TASK =:searchTask 


StageDaoImpl.updateStageCloseByStageId=UPDATE Stage \
									   SET    dtStageClose=:dtStageClose, \
                   					   cdStageReasonClosed=:cdStageReasonClosed \
            						   WHERE  idStage=:idStage
            						   
IncomingDetailDaoImpl.updateIncomingDetailReClassByIdStage=UPDATE IncomingDetail \
														   SET    indIncmgIntInvClsReclass=:reClass \
														   WHERE  idStage =:idStage           						   

IncomingDetailDaoImpl.updateIncomingDetailReClassByIdStageFromStageLink=UPDATE IncomingDetail \
																		SET    indIncmgIntInvClsReclass=:reClass \
																		WHERE  idStage = (SELECT idStage \
																		FROM   StageLink \
																		WHERE  idPriorStage=:idStage)
																		
StageDaoImpl.getStagePersonLinkByStageRole=SELECT DT_LAST_UPDATE AS dtLastUpdate, \
                                                                      ID_STAGE AS idStage, \
                                                               ID_PERSON AS idPerson, \
                                           CD_STAGE_PERS_ROLE as cdStagePersRole, \
                                                               IND_STAGE_PERS_IN_LAW AS indStagePersInLaw, \
                                                               CD_STAGE_PERS_TYPE AS cdStagePersType, \
                                                               CD_STAGE_PERS_SEARCH_IND as cdStagePersSearchInd, \
                                                               TXT_STAGE_PERS_NOTES AS stagePersNotes, \
                                                               DT_STAGE_PERS_LINK AS dtStagePersLink, \
                                                               CD_STAGE_PERS_REL_INT AS cdStagePersRelInt, \
                                                               IND_STAGE_PERS_REPORTER AS indStagePersReporter, \
                                                               IND_STAGE_PERS_EMP_NEW AS indStagePersEmpNew, \
                                                               ID_STAGE_PERSON_LINK AS idStagePersonLink \
                                                               FROM   STAGE_PERSON_LINK \
                                                               WHERE  ID_STAGE =:idStage \
                                                               AND    CD_STAGE_PERS_ROLE =:stageRole
              							   

       								  
       								  
//EJBServive       								  
PriorityClosureEjb.getIdEventPersonInfo =  SELECT E.ID_EVENT_PERSON AS idEventPerson, E.CD_EMPLOYEE_CLASS AS cdEmployeeClass, \
                                           P.NM_PERSON_FULL AS nmPersonFull, C.DECODE AS jobClass \
                                           FROM EVENT E, STAGE S, EMPLOYEE E, PERSON P, CEMPJBCL C \
           						           WHERE E.ID_EVENT_STAGE= :idStage \
                                           AND E.ID_EVENT_STAGE=S.ID_STAGE \
                                           AND S.IND_FORMALLY_SCREENED IS NOT NULL \
                             			   AND E.CD_EVENT_TYPE= 'FSQ' \
           								   AND E.TXT_EVENT_DESCR LIKE '%Formally Screened Question%' \
           						           AND E.ID_PERSON = E.ID_EVENT_PERSON AND P.ID_PERSON = E.ID_EVENT_PERSON \
                                           AND C.CODE = E.CD_EMPLOYEE_CLASS \
           						           ORDER BY ID_EVENT DESC
           						           
WorkloadDao.getInvCnclPendingStages = SELECT DISTINCT WKL.ID_WKLD_STAGE AS STG \
										FROM WORKLOAD WKL, STAGE S_INT, STAGE S_INV \
											WHERE WKL.ID_PRIOR_STAGE = S_INT.ID_STAGE \
											AND WKL.ID_WKLD_STAGE = S_INV.ID_STAGE \
											AND WKL.CD_WKLD_STAGE = 'INV' \
											AND WKL.CD_WKLD_STAGE_PROGRAM = 'CPS' \
											AND WKL.CD_WKLD_STAGE_PERS_ROLE IN ('PR', 'SE') \
											AND S_INT.CD_STAGE = 'INT' \
											AND ID_WKLD_PERSON = :idWkldPerson \
											AND (SYSDATE - S_INT.DT_STAGE_START - \
													(SELECT NVL(SUM (DECODE (CT.DECODE, '7 Days', '7', '14 Days', '14', '21 Days', '21','30 Days', '30')), 0) \
														FROM CONTACT CT, EVENT EVT, APPROVAL_EVENT_LINK APR_EVTLNK, APPROVERS APR, CODES_TABLES CT \
															WHERE CT.ID_EVENT = EVT.ID_EVENT \
															AND EVT.ID_EVENT = APR_EVTLNK.ID_EVENT \
															AND APR_EVTLNK.ID_APPROVAL = APR.ID_APPROVAL \
															AND CT.CODE_TYPE = 'CAPRVLEN' \
															AND CT.CODE = APR.CD_EXTN_DAYS \
															AND CT.CD_CONTACT_TYPE = 'AEXR' \
															AND EVT.CD_EVENT_STATUS = 'APRV' \
															AND CT.ID_CONTACT_STAGE = S_INV.ID_STAGE)) >= 30
															
WorkloadDao.getCheckedOutStages = SELECT ID_WKLD_STAGE \
										FROM WORKLOAD \
											WHERE CD_WKLD_STAGE_PERS_ROLE IN ('PR', 'SE') \
											AND CD_MOBILE_STATUS = 'OT' \
											AND (CD_WKLD_STAGE = 'INV' OR CD_WKLD_STAGE = 'SVC'	OR \
												 CD_WKLD_STAGE = 'FRE' OR CD_WKLD_STAGE = 'FSU' OR \
												 CD_WKLD_STAGE = 'SUB' OR CD_WKLD_STAGE = 'A-R' OR \
												 CD_WKLD_STAGE = 'FPR') \
											AND ID_WKLD_STAGE IN (:idStages) \
										GROUP BY ID_WKLD_STAGE	 	
										
WorkloadDao.getStagePersRoleSql = SELECT CD_WKLD_STAGE_PERS_ROLE as cdWkldStagePersRole \
										FROM WORKLOAD \
											WHERE ID_WKLD_STAGE = :idStage \
											AND ID_WKLD_PERSON = :idPerson
										 	
WorkloadDao.getStagesWithARasPriorStage	= SELECT SL.ID_STAGE STG \
											  FROM STAGE_LINK SL, STAGE S \
											  	  WHERE S.ID_STAGE = SL.ID_PRIOR_STAGE \
											  	  AND S.CD_STAGE = 'A-R' \
											  	  AND SL.ID_STAGE IN (SELECT ID_WKLD_STAGE FROM WORKLOAD WHERE ID_WKLD_PERSON = :idWkldPerson \
											  	  						  AND CD_WKLD_STAGE_PROGRAM='CPS' \
											  	  						  AND CD_WKLD_STAGE='INV')
											  	  						  
WorkloadDao.getARPendingStages = SELECT ID_WKLD_STAGE AS idWkldStage, DT_STAGE_CREATED AS dtStageCreated, NM_WKLD_STAGE AS nmWkldStage \
									FROM WORKLOAD \
										WHERE ID_WKLD_PERSON = :idWkldPerson \
										AND DT_STAGE_CREATED < SYSDATE-46 \
										AND CD_WKLD_STAGE = 'A-R' \
										AND CD_WKLD_STAGE_PROGRAM = 'CPS'
										
WorkloadDao.getARExtensionRequest = SELECT EVENT.CD_EVENT_STATUS AS cdEventStatus, EVENT.ID_EVENT AS idEvent \
										FROM EVENT, CONTACT \
											WHERE ID_CONTACT_STAGE = :idStage \
											AND CONTACT.ID_EVENT = EVENT.ID_EVENT \
											AND CONTACT.CD_CONTACT_TYPE = 'LEXR'           						           

StageDaoImpl.getStagesByType= SELECT STAGE.ID_STAGE AS idStage, \
							  STAGE.ID_CASE AS idCase, \
       						  STAGE.ID_SITUATION AS idSituation, \
      						  STAGE.NM_STAGE AS nmStage, \
          					  STAGE.CD_STAGE AS cdStage, \
           					  STAGE.CD_STAGE_TYPE AS cdStageType, \
           					  STAGE.CD_STAGE_PROGRAM AS cdStageProgram, \
        					  STAGE.CD_STAGE_CLASSIFICATION AS cdStageClassification, \
            				  STAGE.DT_STAGE_START AS dtStageStart, \
          					  STAGE.IND_STAGE_CLOSE AS indStageClose, \
            				  STAGE.CD_STAGE_REASON_CLOSED AS cdStageReasonClosed, \
           					  STAGE.ID_UNIT AS idUnit, \
           					  CAPS_CASE.NM_CASE AS nmCase, \
           					  STAGE.DT_STAGE_CLOSE AS dtStageClose \
       						  FROM STAGE \
       						  LEFT OUTER JOIN CAPS_CASE \
       						  ON STAGE.ID_CASE = CAPS_CASE.ID_CASE \
        					  WHERE  STAGE.ID_CASE =:idCase  \
        					  AND STAGE.CD_STAGE =:cdStage 
        					  
StageDaoImpl.getStagesByTypeAndIndStageClose= AND STAGE.IND_STAGE_CLOSE =:indStage 

StageDaoImpl.getStagesByTypeOrderBy= ORDER BY CD_STAGE, NM_STAGE 

StageDaoImpl.findPrimaryChildForStage=SELECT ID_PERSON FROM STAGE_PERSON_LINK WHERE  CD_STAGE_PERS_ROLE =:cdRole and ID_STAGE =:idStage

StageDaoImpl.hasStageAccess=SELECT UNIT_EMP_LINK.ID_PERSON \
							FROM STAGE_PERSON_LINK, \
							UNIT_EMP_LINK \
							WHERE STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN(:stageRoles) \
							AND  UNIT_EMP_LINK.ID_PERSON =:idPerson \
							AND STAGE_PERSON_LINK.ID_STAGE =:idStage \
							AND STAGE_PERSON_LINK.ID_PERSON =:idPerson \
           					UNION \
           					SELECT EMP_TEMP_ASSIGN.ID_PERSON_DESIGNEE \
            				FROM EMP_TEMP_ASSIGN, STAGE_PERSON_LINK \
           					WHERE EMP_TEMP_ASSIGN.ID_PERSON_DESIGNEE =:idPerson \
         					AND NOT EMP_TEMP_ASSIGN.DT_ASSIGN_EXPIRATION <=:date \
          					AND STAGE_PERSON_LINK.ID_STAGE =:idStage \
           					AND STAGE_PERSON_LINK.ID_PERSON = EMP_TEMP_ASSIGN.ID_PERSON_EMP \
            				AND STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN(:stageRoles) \
           					UNION \
           					SELECT UNIT_EMP_LINK.ID_PERSON \
           					FROM UNIT_EMP_LINK, \
                			(SELECT UNIT_EMP_LINK.ID_UNIT \
                     		 FROM UNIT_EMP_LINK, \
                     		      (SELECT STAGE_PERSON_LINK.ID_PERSON \
                         		  FROM STAGE_PERSON_LINK \
                             	  WHERE STAGE_PERSON_LINK.ID_STAGE =:idStage \
                             	  AND STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN (:stageRoles)) STAGE_WORKERS \
                   			 WHERE UNIT_EMP_LINK.ID_PERSON = STAGE_WORKERS.ID_PERSON \
         					 UNION \
         					 SELECT ID_UNIT \
         					 FROM STAGE \
         					 WHERE ID_STAGE =:idStage) STAGE_UNITS \
           				     WHERE UNIT_EMP_LINK.ID_PERSON =:idPerson \
         					 AND UNIT_EMP_LINK.ID_UNIT = STAGE_UNITS.ID_UNIT \
           					 AND UNIT_EMP_LINK.CD_UNIT_MEMBER_ROLE IN(:unitRoles ) \
          					 UNION \
          					 SELECT UNIT_EMP_LINK.ID_PERSON \
          					 FROM UNIT_EMP_LINK, EMP_TEMP_ASSIGN, \
               				 (SELECT UNIT_EMP_LINK.ID_UNIT \
                   			 FROM UNIT_EMP_LINK, \
                        		  (SELECT STAGE_PERSON_LINK.ID_PERSON \
                            	  FROM STAGE_PERSON_LINK \
                           		  WHERE STAGE_PERSON_LINK.ID_STAGE =:idStage \
                              	  AND STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN(:stageRoles) ) STAGE_WORKERS \
                   			 WHERE UNIT_EMP_LINK.ID_PERSON = STAGE_WORKERS.ID_PERSON \
                  			 UNION \
                  			 SELECT ID_UNIT \
                  			 FROM STAGE \
                  			 WHERE ID_STAGE =:idStage ) STAGE_UNITS \
           					 WHERE UNIT_EMP_LINK.ID_PERSON = EMP_TEMP_ASSIGN.ID_PERSON_EMP \
            				 AND UNIT_EMP_LINK.ID_UNIT = STAGE_UNITS.ID_UNIT \
            				 AND UNIT_EMP_LINK.CD_UNIT_MEMBER_ROLE IN(:unitRoles) \
            				 AND EMP_TEMP_ASSIGN.ID_PERSON_DESIGNEE =:idPerson \
            				 AND NOT EMP_TEMP_ASSIGN.DT_ASSIGN_EXPIRATION <=:date

StagePersonLinkDaoImpl.deletePRSEStagePersonLinkByIdStage=DELETE FROM STAGE_PERSON_LINK \
														  WHERE  ID_STAGE=:idStage \
                										  AND  CD_STAGE_PERS_ROLE =:secondaryRole
                        								  
StagePersonLinkDaoImpl.deleteTodoForClosingStage=DELETE FROM TODO \
												 WHERE  DT_TODO_COMPLETED IS NULL \
            									 AND    ID_TODO_STAGE = :idStage \
            									AND NOT EXISTS (SELECT 1 \
            									FROM   CONTACT C \
            									WHERE  C.ID_CONTACT_STAGE = TODO.ID_TODO_STAGE \
            									AND    C.ID_EVENT         = TODO.ID_TODO_EVENT \
            									AND    (C.CD_CONTACT_TYPE =:cmst \
            									OR      C.CD_CONTACT_TYPE =:c3mt \
            									OR      C.CD_CONTACT_TYPE =:cs45 \
            									OR		C.CD_CONTACT_TYPE =:cs60))                        								  

StageDaoImpl.getIndCPSInvsDtlEaConclByStageId=SELECT IND_CPS_INVST_DTL_EA_CONCL \
											  FROM 	CPS_INVST_DETAIL \
											  WHERE ID_CPS_INVST_STAGE =:idStage \
     										  AND 	IND_CPS_INVST_DTL_EA_CONCL =:indCPS
     										  
StagePersonLinkDaoImpl.getStagePrincipalByIdStageType=SELECT \
													  L.ID_STAGE_PERSON_LINK AS idStagePersonLink, \
													  L.DT_LAST_UPDATE AS dtLastUpdate, \
													  L.ID_STAGE AS idStage, \
													  L.ID_PERSON AS idPerson, \
													  L.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
													  L.IND_STAGE_PERS_IN_LAW AS indStagePersInLaw, \
													  L.CD_STAGE_PERS_TYPE AS cdStagePersType, \
													  L.CD_STAGE_PERS_SEARCH_IND AS cdStagePersSearchInd, \
													  L.TXT_STAGE_PERS_NOTES AS stagePersNotes, \
													  L.DT_STAGE_PERS_LINK AS dtStagePersLink, \
													  L.CD_STAGE_PERS_REL_INT AS cdStagePersRelInt, \
													  L.IND_STAGE_PERS_REPORTER AS indStagePersReporter, \
													  L.IND_STAGE_PERS_EMP_NEW AS indStagePersEmpNew, \
													  P.CD_PERSON_SEX AS cdPersonSex, \
													  P.NM_PERSON_FULL AS nmPersonFull, \
													  P.IND_PERS_CANCEL_HIST AS indPersCancelHist, \
													  P.NBR_PERSON_AGE AS personAge, \
													  P.DT_PERSON_DEATH AS dtPersonDeath, \
													  P.DT_PERSON_BIRTH AS dtPersonBirth, \
													  P.CD_PERSON_RELIGION AS cdPersonReligion, \
													  P.CD_PERSON_CHAR AS cdPersonChar, \
													  P.IND_PERSON_DOB_APPROX AS indPersonDobApprox, \
													  P.CD_PERSON_LIV_ARR AS cdPersonLivArr, \
													  P.CD_PERS_GUARD_CNSRV AS cdPersGuardCnsrv, \
													  P.CD_PERSON_STATUS AS cdPersonStatus, \
													  P.CD_PERSON_DEATH AS cdPersonDeath, \
													  P.CD_PERSON_MARITAL_STATUS AS cdPersonMaritalStatus, \
													  P.TXT_PERSON_OCCUPATION AS personOccupation, \
													  P.CD_PERSON_LANGUAGE AS cdPersonLanguage, \
													  P.CD_PERSON_ETHNIC_GROUP AS cdPersonEthnicGroup, \
													  P.NM_PERSON_FIRST AS nmPersonFirst, \
													  P.NM_PERSON_LAST AS nmPersonLast, \
													  P.CD_PERSON_SUFFIX AS cdPersonSuffix, \
													  P.CD_DEATH_RSN_CPS AS cdDeathRsnCps \
													  FROM	STAGE_PERSON_LINK L, \
													  PERSON P \
													  WHERE	L.ID_STAGE		=:idStage \
													  AND	L.ID_PERSON		= P.ID_PERSON \
													  AND	L.CD_STAGE_PERS_TYPE	=:cdType \
													  ORDER BY P.NM_PERSON_FULL 
													  
ApprovalDaoImpl.checkStageCase = SELECT ID_RSRC_FA_HOME_STAGE AS idResource FROM CAPS_RESOURCE CR, STAGE S  WHERE CR.ID_RSRC_FA_HOME_STAGE = S.ID_STAGE \
								 AND CR.ID_CASE = :idCase AND S.cd_stage = :cdStg
								 
StageDaoImpl.getOpenStageByIdCase=SELECT ID_STAGE AS idStage, \
								  CD_STAGE AS cdStage \
        						  FROM   STAGE \
        						  WHERE  ID_CASE         =:idCase \
        						  AND    (DT_STAGE_CLOSE is NULL \
        						  OR DT_STAGE_CLOSE =:date)											  

StageDaoImpl.getStagePersByIdStage=SELECT \
								   S.ID_STAGE AS idStage, \
								   S.DT_LAST_UPDATE AS dtLastUpdate, \
								   S.CD_STAGE_TYPE AS cdStageType, \
								   S.ID_UNIT AS idUnit, \
								   S.ID_CASE AS idCase, \
								   S.ID_SITUATION AS idSituation, \
								   S.DT_STAGE_CLOSE AS dtStageClose, \
								   S.CD_STAGE_CLASSIFICATION AS cdStageClassification, \
								   S.CD_STAGE_CURR_PRIORITY AS cdStageCurrPriority, \
								   S.CD_STAGE_INITIAL_PRIORITY AS cdStageInitialPriority, \
								   S.CD_STAGE_REASON_CLOSED AS cdStageReasonClosed, \
								   S.CD_STAGE_RSN_PRIORITY_CHGD AS cdStageRsnPriorityChgd, \
								   S.IND_STAGE_CLOSE AS indStageClose, \
								   S.CD_STAGE_CNTY AS cdStageCnty, \
								   S.NM_STAGE AS nmStage, \
								   S.CD_STAGE_REGION AS cdStageRegion, \
								   S.DT_STAGE_START AS dtStageStart, \
								   S.CD_STAGE_PROGRAM AS cdStageProgram, \
								   S.CD_STAGE AS cdStage, \
								   S.TXT_STAGE_PRIORITY_CMNTS AS stagePriorityCmnts, \
								   S.TXT_STAGE_CLOSURE_CMNTS AS stageClosureCmnts, \
								   SPL1.ID_STAGE_PERSON_LINK AS idStagePersonLink, \
								   SPL1.DT_LAST_UPDATE AS dtLastUpdatePers, \
								   SPL1.ID_PERSON AS idPerson, \
								   SPL1.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
								   SPL1.IND_STAGE_PERS_IN_LAW AS indStagePersInLaw, \
								   SPL1.CD_STAGE_PERS_TYPE AS cdStagePersType, \
								   SPL1.CD_STAGE_PERS_SEARCH_IND AS cdStagePersSearchInd, \
								   SPL1.TXT_STAGE_PERS_NOTES AS stagePersNotes, \
								   SPL1.DT_STAGE_PERS_LINK AS dtStagePersLink, \
								   SPL1.CD_STAGE_PERS_REL_INT AS cdStagePersRelInt, \
								   SPL1.IND_STAGE_PERS_REPORTER AS indStagePersReporter, \
								   SPL1.IND_STAGE_PERS_EMP_NEW AS indStagePersEmpNew \
								   FROM	STAGE S, \
								   STAGE_PERSON_LINK SPL1, \
								   STAGE_PERSON_LINK SPL2 \
								   WHERE 	S.ID_STAGE = SPL1.ID_STAGE \
								   AND	SPL1.CD_STAGE_PERS_TYPE != 'STF' \
								   AND	S.ID_STAGE =:idStage \
								   AND 	SPL1.ID_PERSON = SPL2.ID_PERSON (+) \
								   AND  SPL2.CD_STAGE_PERS_TYPE (+) != 'STF' \
								   AND	SPL2.ID_PERSON IS NULL \
								   AND  SPL2.ID_STAGE (+) =:idStageRelated
								   
StagePersonLinkDaoImpl.getStagePersonLinkByIdStage=SELECT  DT_LAST_UPDATE AS dtLastUpdate, \
                								   ID_STAGE AS idStage, \
                								   ID_PERSON AS idPerson, \
                								   CD_STAGE_PERS_ROLE AS cdStagePersRole, \
                								   IND_STAGE_PERS_IN_LAW AS indStagePersInLaw, \
                								   CD_STAGE_PERS_TYPE AS cdStagePersType, \
                								   CD_STAGE_PERS_SEARCH_IND AS cdStagePersSearchInd, \
                								   TXT_STAGE_PERS_NOTES AS stagePersNotes, \
                								   DT_STAGE_PERS_LINK AS dtStagePersLink, \
                								   CD_STAGE_PERS_REL_INT AS cdStagePersRelInt, \
                								   IND_STAGE_PERS_REPORTER AS indStagePersReporter, \
                								   IND_STAGE_PERS_EMP_NEW AS indStagePersEmpNew, \
                								   TO_CHAR(NVL(IND_NM_STAGE,''), '9') AS strIndNmStage, \
                								   ID_STAGE_PERSON_LINK AS idStagePersonLink \
        										   FROM    STAGE_PERSON_LINK \
        										   WHERE   ID_STAGE =:idStage        		
        										   
StageDaoImpl.getStagesByIdPerson=SELECT \
								 SL.ID_STAGE AS idStage, \
								 SL.CD_STAGE_PERS_TYPE AS cdStagePersType, \
								 SL.CD_STAGE_PERS_REL_INT AS cdStagePersRelInt, \
								 S.DT_STAGE_START AS dtStageStart, \
								 S.DT_STAGE_CLOSE AS dtStageClose, \
								 S.CD_STAGE AS cdStage, \
								 S.CD_STAGE_TYPE AS cdStageType, \
								 S.NM_STAGE AS nmStage, \
								 S.ID_CASE AS idCase, \
								 C.NM_CASE AS nmCase, \
								 C.DT_CASE_OPENED AS dtCaseOpened, \
								 C.DT_CASE_CLOSED AS dtCaseClosed \
								 FROM 	STAGE_PERSON_LINK	SL, \
								 STAGE			S, \
								 CAPS_CASE		C, \
								 PERSON_MERGE_VIEW       V \
								 WHERE	V.ID_PERSON_INPUT =:idPerson \
								 AND  	SL.ID_PERSON      =	V.ID_PERSON_OUTPUT \
								 AND	S.ID_STAGE	  =	SL.ID_STAGE \
								 AND	C.ID_CASE(+)	  =	S.ID_CASE \
								 ORDER BY C.DT_CASE_OPENED, \
								 C.DT_CASE_CLOSED, \
								 S.DT_STAGE_START, \
								 S.DT_STAGE_CLOSE
								 
StageDaoImpl.getStagesByAttributes=SELECT \
        						   B.ID_STAGE AS idStage, \
        						   B.DT_LAST_UPDATE AS dtLastUpdate, \
        						   B.CD_STAGE_TYPE AS cdStageType, \
        						   B.ID_UNIT AS idUnit, \
        						   B.ID_CASE AS idCase, \
        						   B.DT_STAGE_CLOSE AS dtStageClose, \
        						   B.CD_STAGE_CLASSIFICATION AS cdStageClassification, \
        						   B.CD_STAGE_CURR_PRIORITY AS cdStageCurrPriority, \
        						   B.CD_STAGE_INITIAL_PRIORITY AS cdStageInitialPriority, \
        						   B.CD_STAGE_RSN_PRIORITY_CHGD AS cdStageRsnPriorityChgd, \
        						   B.CD_STAGE_REASON_CLOSED AS cdStageReasonClosed, \
        						   B.IND_STAGE_CLOSE AS indStageClose, \
        						   B.TXT_STAGE_PRIORITY_CMNTS AS stagePriorityCmnts, \
        						   B.CD_STAGE_CNTY AS cdStageCnty, \
        						   B.NM_STAGE AS nmStage, \
        						   B.CD_STAGE_REGION AS cdStageRegion, \
        						   B.DT_STAGE_START AS dtStageStart, \
        						   B.ID_SITUATION AS idSituation, \
        						   B.CD_STAGE_PROGRAM AS cdStageProgram, \
        						   B.CD_STAGE AS cdStage, \
        						   B.TXT_STAGE_CLOSURE_CMNTS AS stageClosureCmnts, \
        						   A.ID_STAGE_PERSON_LINK as idStagePersonLink, \
        						   A.DT_LAST_UPDATE AS dtLastUpdatePers, \
        						   A.ID_PERSON AS idPerson, \
        						   A.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
        						   A.IND_STAGE_PERS_IN_LAW AS indStagePersInLaw, \
        						   A.CD_STAGE_PERS_TYPE AS cdStagePersType, \
        						   A.CD_STAGE_PERS_SEARCH_IND AS cdStagePersSearchInd, \
        						   A.TXT_STAGE_PERS_NOTES AS stagePersNotes, \
        						   A.DT_STAGE_PERS_LINK as dtStagePersLink, \
        						   A.CD_STAGE_PERS_REL_INT AS cdStagePersRelInt, \
        						   A.IND_STAGE_PERS_REPORTER AS indStagePersReporter, \
        						   A.IND_STAGE_PERS_EMP_NEW AS indStagePersEmpNew \
    							   FROM    STAGE_PERSON_LINK   A, \
        								   STAGE           B \
    							   WHERE   A.ID_PERSON     =:idPerson \
    							   AND A.CD_STAGE_PERS_ROLE    =:stageRole \
    							   AND A.ID_STAGE      =   B.ID_STAGE \
    							   AND B.ID_CASE       =:idCase \
    							   AND B.CD_STAGE      =:cdStage \
    							   AND B.DT_STAGE_CLOSE IS NULL
    							   								        										   
StageDaoImpl.getSUBOpenStagesCount=SELECT \
								   COUNT(*) \
								   FROM \
								   STAGE_PERSON_LINK	L, \
								   STAGE			S \
								   WHERE \
								   L.ID_PERSON	=:idPerson \
								   AND	L.CD_STAGE_PERS_ROLE =:stageRole \
								   AND	S.ID_STAGE	= L.ID_STAGE \
								   AND	S.DT_STAGE_CLOSE IS NULL \
								   AND  S.CD_STAGE ='SUB'       										   

StageDaoImpl.getSubCloseStagesCongregateCount=select count(*) from placement \
                                where DT_PLCMT_END <= sysdate and id_case = :idCase \
                                and IND_CONGREGATE_CARE = 'Y'       										   

StageDaoImpl.getOpenStagesCount=SELECT \
							 	COUNT(*) \
								FROM \
								STAGE_PERSON_LINK	L, \
								STAGE			S \
								WHERE \
								L.ID_PERSON	=:idPerson \
								AND	L.CD_STAGE_PERS_ROLE =:stageRole \
								AND	S.ID_STAGE	= L.ID_STAGE \
								AND	S.DT_STAGE_CLOSE IS NULL \
								AND  S.CD_STAGE =:cdStage
								
StageDaoImpl.getOpenStagesCount1=SELECT \
							 	COUNT(*) \
								FROM \
								STAGE_PERSON_LINK	L, \
								STAGE			S \
								WHERE \
								L.ID_PERSON	=:idPerson \
								AND	L.CD_STAGE_PERS_ROLE =:stageRole \
								AND	S.ID_STAGE	= L.ID_STAGE \
								AND  S.CD_STAGE =:cdStage								
								 

StagePersonLinkDaoImpl.getStageResourceForChild=SELECT DISTINCT \
          										C.ID_RESOURCE AS idResouce, \
          										C.DT_LAST_UPDATE AS dtLastUpdate, \
          										C.ID_RSRC_FA_HOME_STAGE AS idRsrcFaHomeStage, \
          										C.NM_RESOURCE AS nmResource, \
          										C.NM_RSRC_CONTACT AS nmRsrcContact, \
          										L.ID_STAGE_PERSON_LINK AS idStagePersonLink, \
          										L.ID_STAGE AS idStage, \
          										L.ID_PERSON AS idPerson, \
          										L.ID_CASE AS idCase, \
          										L.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
          										L.IND_STAGE_PERS_IN_LAW AS indStagePersInLaw, \
          										L.CD_STAGE_PERS_TYPE AS cdStagePersType, \
          										L.CD_STAGE_PERS_SEARCH_IND AS cdStagePersSearchInd, \
          										L.TXT_STAGE_PERS_NOTES AS stagePersNotes, \
          										L.DT_STAGE_PERS_LINK AS dtStagePersLink, \
          										L.CD_STAGE_PERS_REL_INT AS cdStagePersRelInt, \
          										L.IND_STAGE_PERS_REPORTER AS indStagePersReporter, \
          										L.IND_STAGE_PERS_EMP_NEW AS indStagePersEmpNew \
     											FROM \
          										CAPS_RESOURCE C, \
             									STAGE_PERSON_LINK L, \
             									PLACEMENT P \
     											WHERE \
          										P.ID_PLCMT_CHILD =:idPerson \
     											AND \
          										P.DT_PLCMT_END   =  (SELECT MAX (P2.DT_PLCMT_END) \
              									FROM PLACEMENT P2 \
              									WHERE P2.ID_PLCMT_CHILD =:idPerson) \
    		 									AND \
          										P.CD_PLCMT_ACT_PLANNED =:plannedType \
     											AND \
          										C.ID_RESOURCE    = P.ID_RSRC_FACIL \
     											AND \
          										L.ID_STAGE       = C.ID_RSRC_FA_HOME_STAGE
TododaoImpl.getTodoInfoByTodoInfo=SELECT \
								  T.ID_TODO_INFO AS idTodoInfo, \
            					  T.DT_LAST_UPDATE AS dtLastUpdate, \
    							  T.CD_TODO_INFO AS cdTodoInfo, \
    							  T.CD_TODO_INFO_PERS_ASSIGND AS cdTodoInfoPersAssigned, \
    							  T.CD_TODO_INFO_TASK AS cdTodoInfoTask, \
    							  T.CD_TODO_INFO_TYPE AS cdTodoInfoType, \
    	    					  T.NBR_TODO_INFO_DUE_DD AS todoInfoDueDD, \
    							  T.NBR_TODO_INFO_DUE_MM AS todoInfoDueMM, \
    							  T.NBR_TODO_INFO_DUE_YY AS todoInfoDueYY, \
    							  T.NBR_TODO_INFO_TASK_DUE_DD AS todoInfoTaskDueDD, \
    							  T.NBR_TODO_INFO_TASK_DUE_MM AS todoInfoTaskDueMM, \
    	    					  T.NBR_TODO_INFO_TASK_DUE_YY AS todoInfoTaskDueYY, \
    							  T.TXT_TODO_INFO_DESC AS todoInfoDesc, \
    							  T.TXT_TODO_INFO_LONG_DESC AS todoInfoLongDesc, \
            					  T.IND_TODO_INFO_ENABLED AS indTodoInfoEnabled \
								  FROM 	TODO_INFO T \
								  WHERE	T.CD_TODO_INFO =:cdTodoInfo
								  

Todo.getTodoDetailsbyStageTask =   SELECT COUNT (ID_TODO) AS LeCount  FROM   TODO  WHERE ID_TODO_STAGE =:idStage \
 									AND CD_TODO_TASK  = '1047' AND DT_TODO_COMPLETED IS NULL 
								  

Contact.getContactCount = SELECT COUNT(CD_CONTACT_PURPOSE) AS contactCount	FROM CONTACT 	WHERE ID_CONTACT_STAGE = :idStage \
							AND   CD_CONTACT_PURPOSE = 'DFOS'	


ContactDaoImpl.getContactEntityById=SELECT * FROM contact WHERE idEvent=:idEvent


ContactDaoImpl.getContactById=SELECT ID_EVENT AS idEvent, \
							  ID_CASE AS idCase, \
                      		  ID_CONTACT_STAGE AS idContactStage, \
                      		  ID_CONTACT_WORKER AS idContactWorker, \
                      		  DT_CNTCT_MNTHLY_SUMM_BEG AS dtCntctMnthlySummBeg, \
                      		  DT_CNTCT_MNTHLY_SUMM_END AS dtCntctMnthlySummEnd, \
                      		  DT_CONTACT_APPRV AS dtContactApprv, \
                      		  CD_CONTACT_LOCATION AS cdContactLocation, \
                      		  CD_CONTACT_METHOD AS cdContactMethod, \
                      		  CD_CONTACT_OTHERS AS cdContactOthers, \
                      		  CD_CONTACT_PURPOSE AS cdContactPurpose, \
                      		  CD_CONTACT_TYPE AS cdContactType, \
                      		  DT_CONTACT_OCCURRED AS dtContactOccurred, \
                      		  DT_CNTCT_NEXT_SUMM_DUE AS dtCntctNextSummDue, \
                      		  IND_CONTACT_ATTEMPTED AS indContactAttempted, \
                      		  ID_LAST_EMP_UPDATE AS idLastEmpUpdate, \
                      		  DT_LAST_EMP_UPDATE AS dtLastEmpUpdate, \
                      		  IND_EMERGENCY AS indEmergency, \
                      		  CD_RSN_SCROUT AS cdRsnScrout, \
                      		  IND_REC_CONS AS indRecCons, \
                      		  TXT_KIN_CAREGIVER AS kinCaregiver, \
                      		  CD_RSN_AMTNE AS cdRsnAmtne, \
                      		  AMT_NEEDED AS amtNeeded, \
                      		  IND_SIBLING_VISIT AS indSiblingVisit, \
                      		  CD_CHILD_SAFETY AS cdChildSafety, \
                      		  CD_PEND_LEGAL_ACTION AS cdPendLegalAction, \
                      		  IND_PRINCIPAL_INTERVIEW AS indPrincipalInterview, \
                      		  CD_PROF_COLLATERAL AS cdProfCollateral, \
                      		  CD_ADMINISTRATIVE AS cdAdministrative, \
                      		  TXT_COMMENTS AS txtComments, \
                      		  IND_ANNOUNCED AS indAnnounced, \
                      		  IND_SAF_PLAN_COMP AS indSafPlanComp, \
                      		  IND_FAM_PLAN_COMP AS indFamPlanComp, \
                      		  IND_SAF_CON_RESOLV AS indSafConResolv, \
					  		  EST_CONTACT_HOURS AS estContactHours, \
					  		  EST_CONTACT_MINS AS estContactMins \
            				  FROM Contact \
            				  WHERE id_event=:idEvent
            				  			          				  
AdminReviewDaoImpl.getAdminReviewById=SELECT b FROM AdminReview b WHERE b.idStage=:idAdminReview            				  
            				  
EventDaoImpl.getEventEntityById=SELECT b FROM Event b WHERE b.idEvent=:idEvent

WorkloadDao.cdMobileStatusSql=SELECT CD_MOBILE_STATUS FROM WORKLOAD WHERE ID_WKLD_CASE=:idWkldCase

WorkloadDao.roleWorkloadStageSql=SELECT cd_wkld_stage_pers_role AS cdWkldStagePersRole FROM workload WHERE id_wkld_stage=:idwkldStage AND id_wkld_person=:idwkldPerson

StageDaoImpl.getIdPersonForPALWorker=SELECT U.ID_PERSON \
									 FROM   STAGE    S, \
               						 UNIT     U, \
               						 CCNTYREG C \
        							 WHERE  U.CD_UNIT_SPECIALIZATION ='PAL' \
        							 AND    S.CD_STAGE_CNTY          = C.CODE \
        							 AND    '0'+C.DECODE             = U.CD_UNIT_REGION \
        							 AND    S.ID_STAGE               =:idStage
        							 
WorkloadDao.getActiveStagesForPersonSql=SELECT B.ID_STAGE AS idStage FROM STAGE A, STAGE_PERSON_LINK B, PERSON_MERGE_VIEW V \
										WHERE B.ID_PERSON = V.ID_PERSON_OUTPUT AND A.ID_STAGE = B.ID_STAGE 	AND A.DT_STAGE_CLOSE IS NULL AND  V.ID_PERSON_INPUT=:idPerson											  

WorkloadDao.disableTletsCheckSql=SELECT TXT_VALUE AS value FROM ONLINE_PARAMETERS WHERE TXT_NAME=:idtxtName

StageDaoImpl.getEventStagePersonListByAttributes=SELECT \
    											 A.CD_EVENT_STATUS AS cdEventStatus, \
    											 A.CD_EVENT_TYPE AS cdEventType, \
    											 B.CD_STAGE AS cdStage, \
    											 A.DT_EVENT_OCCURRED AS dtEventOccurred, \
    											 B.CD_STAGE_REASON_CLOSED AS cdStageReasonClosed, \
    											 B.ID_CASE AS idCase, \
    											 A.ID_EVENT AS idEvent, \
    											 A.ID_EVENT_STAGE AS idEventStage, \
    											 B.NM_STAGE AS nmStage, \
    											 C.NM_PERSON_FULL AS nmPersonFull, \
    											 A.TXT_EVENT_DESCR AS eventDescr, \
    											 A.CD_TASK AS cdTask, \
    											 'N' AS stringN, \
    											 A.DT_EVENT_CREATED AS dtEventCreated \
   												 FROM \
    											 EVENT  A, \
    											 STAGE  B, \
    											 PERSON C \
   												 WHERE \
    											 A.ID_EVENT_STAGE = B.ID_STAGE \
    											 AND  A.ID_EVENT_PERSON = C.ID_PERSON(+) \
    											 AND A.ID_EVENT_STAGE =:idStage
    											 
StageDaoImpl.getEventStagePersonListByAttributesAppend= AND A.CD_EVENT_TYPE =:cdType 		

StageDaoImpl.getEventStagePersonListByAttributesTaskAppend= AND A.CD_TASK =:cdTask										 
    											 
EventDaoImpl.getGuardianshipDtoByIdEvent=SELECT \
										 G.ID_GUARD_EVENT AS idGuardEvent, \
                						 G.DT_LAST_UPDATE AS dtLastUpdate, \
										 G.ID_GUARD_PERS AS idPerson, \
										 G.ID_GUARD_RSRC AS idCapsResource, \
										 G.ADDR_GUARD_CITY AS addrGuardCity, \
										 G.ADDR_GUARD_CNTY AS addrGuardCnty, \
										 G.ADDR_GUARD_LN1 AS addrGuardLn1, \
										 G.ADDR_GUARD_LN2 AS addrGuardLn2, \
        								 G.ADDR_GUARD_ST AS addrGuardSt, \
										 G.ADDR_GUARD_ZIP AS addrGuardZip, \
										 G.CD_GUARD_CLOSE_REASON AS cdGuardCloseReason, \
										 G.CD_GUARD_GUARDIAN_TYPE AS cdGuardGuardianType, \
										 G.CD_GUARD_TYPE AS cdGuardType, \
										 G.DT_GUARD_CLOSE_DATE AS dtGuardCloseDate, \
										 G.DT_GUARD_LETTER_ISSUED AS dtGuardLetterIssued, \
										 G.DT_GUARD_ORDERED as dtGuardOrdered, \
										 G.IND_GUARD_AGED_OUT AS indGuardAgedOut, \
										 G.NBR_GUARD_PHONE AS guardPhone, \
										 G.NBR_GUARD_PHONE_EXT AS guardPhoneExt, \
										 G.SDS_GUARD_NAME AS sdsGuardName, \
                						 G.TXT_GUARD_ADDR_COMMENTS AS guardAddrComments, \
										 G.TXT_GUARD_COMMENTS AS guardComments, \
										 G.DT_REFERRAL_SENT AS dtReferralSent, \
	        							 G.DT_INIT_REVIEW AS dtInitReview, \
	        							 G.CD_INIT_REVIEW_RESULT AS cdInitReviewResult, \
	        							 G.DT_ACCEPTANCE AS dtAcceptance, \
		 								 G.DT_NOTIF_ASSESS AS dtNotifAssess, \
										 G.CD_NOTIF_ASSESS_RESULT AS cdNotifAssessResult, \
										 G.DT_JOINT_STAFF AS dtJointStaff, \
										 G.CD_JOINT_STAFF_RESULT AS cdJointStaffResult, \
										 G.DT_MGMT_REVIEW AS dtMgmtReview, \
										 G.CD_MGMT_REVIEW_RESULT AS cdMgmtReviewResult, \
										 G.DT_COMMITTEE AS dtCommittee, \
										 G.CD_COMMITTEE_RESULT AS cdCommitteeResult, \
										 G.CD_FINAL_OUTCOME AS cdFinalOutcome, \
                						 R.NM_RESOURCE AS nmResource, \
                						 P.NM_PERSON_FULL AS nmPersonFull \
          								 FROM	PERSON P, \
                						 CAPS_RESOURCE R, \
										 GUARDIANSHIP G \
	  									 WHERE G.ID_GUARD_EVENT =:idEvent \
          								 AND   G.ID_GUARD_PERS = P.ID_PERSON(+) \
          								 AND   G.ID_GUARD_RSRC  =R.ID_RESOURCE(+)          					
          								 
UnitSummaryDaoImpl.unitValidity=SELECT unit.idUnit AS idUnit,unit.idPerson AS idPerson,unitEmpLink.cdUnitMemberRole AS cdUnitMemberRole,unit.cdUnitProgram AS program  \
										,unit.cdUnitRegion AS region,unit.indExternal AS external,  \
														unit.nbrUnit AS unit FROM UnitEmpLink AS unitEmpLink,Unit AS unit  \
									WHERE unit.cdUnitProgram= :program AND unit.cdUnitRegion= :region \
									AND unit.nbrUnit= :nbrUnit and unit.idPerson=unitEmpLink.idPerson   \
									AND unit.idUnit=unitEmpLink.idUnit AND unit.indExternal=:external

UnitSummaryDaoImpl.getUnitSummary=SELECT 	 unitEmpLink.idPerson AS idPerson,  \
											 employee.cdEmpBjnEmp AS cdEmpBjnEmp ,  \
											 unitEmpLink.cdUnitMemberInOut AS cdUnitMemberInOut,  \
											 employee.nmEmployeeFirst AS nmEmployeeFirst,  \
											 employee.nmEmployeeMiddle AS nmEmployeeMiddle,  \
											 employee.nmEmployeeLast AS nmEmployeeLast  \
									FROM     Employee       employee,   \
											 UnitEmpLink   unitEmpLink   \
									WHERE    unitEmpLink.idUnit = :idUnit   \
									AND      unitEmpLink.idPerson = employee.idPerson
									
UnitSummaryDaoImpl.getInvSvcAssignments=	SELECT COUNT(w.id.idWkldPerson) FROM Stage s,Workload w WHERE  \
												w.id.idWkldPerson=:idPerson   \
												AND w.id.idWkldStage=s.idStage   	
																						 
EventDaoImpl.getSVCAuthEventDtoByIdSVCAuthEvent=SELECT \
												ID_SVC_AUTH_EVENT AS idSVCAuthEvent, \
												ID_SVC_AUTH as idSVCAuth, \
        										DT_LAST_UPDATE as dtLastUpdate \
        										FROM    SVC_AUTH_EVENT_LINK \
												WHERE   ID_SVC_AUTH_EVENT =:idSVCAuthEvent
												  											 
ServAuthRetrieveDaoImpl.getServiceAuthorizationById=SELECT \
        											S.ID_SVC_AUTH AS idSvcAuth, \
        											S.DT_LAST_UPDATE AS dtLastUpdate, \
        											S.CD_SVC_AUTH_COUNTY AS cdSvcAuthCounty, \
        											S.ID_RESOURCE AS idResource, \
        											S.ID_CONTRACT AS idContract, \
        											S.ID_PERSON AS idPerson, \
        											S.ID_PRIMARY_CLIENT AS idPrimaryClient, \
        											S.CD_SVC_AUTH_ABIL_TO_RESPOND AS cdSvcAuthAbilToRespond, \
        											S.CD_SVC_AUTH_CATEGORY AS cdSvcAuthCategory, \
        											S.CD_SVC_AUTH_REGION AS cdSvcAuthRegion, \
        											S.CD_SVC_AUTH_SERVICE AS cdSvcAuthService, \
        											S.DT_SVC_AUTH_VERBAL_REFERL AS dtSvcAuthVerbalReferl, \
        											S.IND_SVC_AUTH_COMPLETE AS indSvcAuthComplete, \
        											S.TXT_SVC_AUTH_COMMENTS AS svcAuthComments, \
        											S.TXT_SVC_AUTH_DIR_TO_HOME AS svcAuthDirToHome, \
        											S.TXT_SVC_AUTH_HOME_ENVIRON AS svcAuthHomeEnviron, \
            										S.TXT_SVC_AUTH_MED_COND AS svcAuthMedCond, \
        											S.TXT_SVC_AUTH_SEC_PROVDR AS svcAuthSecProvdr, \
        											S.DT_SVC_AUTH_EFF AS dtSvcAuthEff, \
        											S.IND_DONTD_COMNTY_SVC AS indDontdComntySvc, \
        											S.AMT_EST_VALUE AS amtEstValue \
       												FROM SERVICE_AUTHORIZATION S \
       												WHERE    S.ID_SVC_AUTH =:idSvcAuth

ServAuthRetrieveDaoImpl.getServiceAuthorizationEntityById=SELECT b FROM ServiceAuthorization b WHERE b.idSvcAuth =:idSvcAuth

ServAuthRetrieveDaoImpl.getSVCAuthDetailDtoById=SELECT \
        										SAD.ID_SVC_AUTH_DTL AS idSvcAuthDtl, \
        										SAD.ID_SVC_AUTH AS idSvcAuth, \
        										SAD.ID_PERSON AS idPerson, \
        										SAD.DT_LAST_UPDATE AS dtLastUpdate, \
        										SAD.CD_SVC_AUTH_DTL_AUTH_TYPE AS cdSvcAuthDtlAuthType, \
        										SAD.CD_SVC_AUTH_DTL_PERIOD AS cdSvcAuthDtlPeriod, \
        										SAD.CD_SVC_AUTH_DTL_SVC AS cdSvcAuthDtlSvc, \
        										SAD.CD_SVC_AUTH_DTL_UNIT_TYPE AS cdSvcAuthDtlUnitType, \
        										SAD.DT_SVC_AUTH_DTL AS dtSvcAuthDtl, \
        										SAD.DT_SVC_AUTH_DTL_BEGIN AS dtSvcAuthDtlBegin, \
        										SAD.DT_SVC_AUTH_DTL_END AS dtSvcAuthDtlEnd, \
        										SAD.DT_SVC_AUTH_DTL_TERM AS dtSvcAuthDtlTerm, \
        										SAD.DT_SVC_AUTH_DTL_SHOW AS dtSvcAuthDtlShow, \
        										SAD.NBR_SVC_AUTH_DTL_FREQ AS svcAuthDtlFreq, \
        										SAD.NBR_SVC_AUTH_DTL_LINE_ITM AS svcAuthDtlLineItm, \
        										SAD.NBR_SVC_AUTH_DTL_SUG_UNIT AS svcAuthDtlSugUnit, \
        										SAD.NBR_SVC_AUTH_DTL_UNITS_REQ AS svcAuthDtlUnitsReq, \
        										SAD.AMT_SVC_AUTH_DTL_AMT_REQ AS amtSvcAuthDtlAmtReq, \
        										SAD.AMT_SVC_AUTH_DTL_AMT_USED AS amtSvcAuthDtlAmtUsed, \
        										SAD.NBR_SVC_AUTH_DTL_UNIT_RATE AS svcAuthDtlUnitRate, \
        										SAD.NBR_SVC_AUTH_DTL_UNIT_USED AS svcAuthDtlUnitUsed, \
        										SA.IND_SVC_AUTH_COMPLETE AS indSvcAuthComplete, \
        										SAD.ID_NAME AS idName, \
        										NM.NM_NAME_FIRST AS nmNameFirst , \
        										NM.NM_NAME_MIDDLE AS nmNameMiddle, \
        										NM.NM_NAME_LAST AS nmNameLast, \
        										NM.CD_NAME_SUFFIX AS cdNameSuffix \
    											FROM  SVC_AUTH_DETAIL SAD, \
            									SERVICE_AUTHORIZATION SA, \
            									NAME NM \
    											WHERE SA.ID_SVC_AUTH=:idSvcAuth \
      											AND SAD.ID_SVC_AUTH(+) = SA.ID_SVC_AUTH \
      											AND NM.ID_NAME     (+) = SAD.ID_NAME \
    											ORDER BY SAD.ID_SVC_AUTH_DTL ASC
    											
ServAuthRetrieveDaoImpl.getSVCAuthListByPerson = SELECT \
        										SAD.ID_SVC_AUTH_DTL AS idSvcAuthDtl, \
        										SAD.ID_SVC_AUTH AS idSvcAuth, \
        										SAD.ID_PERSON AS idPerson, \
        										SAD.DT_LAST_UPDATE AS dtLastUpdate, \
        										SAD.CD_SVC_AUTH_DTL_AUTH_TYPE AS cdSvcAuthDtlAuthType, \
        										SAD.CD_SVC_AUTH_DTL_PERIOD AS cdSvcAuthDtlPeriod, \
        										SAD.CD_SVC_AUTH_DTL_SVC AS cdSvcAuthDtlSvc, \
        										SAD.CD_SVC_AUTH_DTL_UNIT_TYPE AS cdSvcAuthDtlUnitType, \
        										SAD.DT_SVC_AUTH_DTL AS dtSvcAuthDtl, \
        										SAD.DT_SVC_AUTH_DTL_BEGIN AS dtSvcAuthDtlBegin, \
        										SAD.DT_SVC_AUTH_DTL_END AS dtSvcAuthDtlEnd, \
        										SAD.DT_SVC_AUTH_DTL_TERM AS dtSvcAuthDtlTerm, \
        										SAD.DT_SVC_AUTH_DTL_SHOW AS dtSvcAuthDtlShow, \
        										SAD.NBR_SVC_AUTH_DTL_FREQ AS svcAuthDtlFreq, \
        										SAD.NBR_SVC_AUTH_DTL_LINE_ITM AS svcAuthDtlLineItm, \
        										SAD.NBR_SVC_AUTH_DTL_SUG_UNIT AS svcAuthDtlSugUnit, \
        										SAD.NBR_SVC_AUTH_DTL_UNITS_REQ AS svcAuthDtlUnitsReq, \
        										SAD.AMT_SVC_AUTH_DTL_AMT_REQ AS amtSvcAuthDtlAmtReq, \
        										SAD.AMT_SVC_AUTH_DTL_AMT_USED AS amtSvcAuthDtlAmtUsed, \
        										SAD.NBR_SVC_AUTH_DTL_UNIT_RATE AS svcAuthDtlUnitRate, \
        										SAD.NBR_SVC_AUTH_DTL_UNIT_USED AS svcAuthDtlUnitUsed, \
        										SA.IND_SVC_AUTH_COMPLETE AS indSvcAuthComplete, \
        										SA.ID_RESOURCE AS idResource, \
        										SA.CD_SVC_AUTH_COUNTY AS cdSvcAuthCounty, \
        										SAD.ID_NAME AS idName \
    											FROM  SVC_AUTH_DETAIL SAD, \
            									SERVICE_AUTHORIZATION SA \
    											WHERE SAD.ID_PERSON = :idPerson \
      											AND SAD.ID_SVC_AUTH(+) = SA.ID_SVC_AUTH \
    											ORDER BY SAD.DT_SVC_AUTH_DTL_BEGIN ASC
    											
ServAuthRetrieveDaoImpl.getOverlappingSvcAuthDtl = SELECT SD.ID_SVC_AUTH AS idServiceAuth, \
													C.ID_CASE AS idCase, \
													ST.ID_STAGE AS idStage, \
													C.IND_CASE_SENSITIVE AS indSensitiveCase, \
											   EV.CD_EVENT_STATUS AS cdEventStatus, \
											   EV.DT_EVENT_CREATED AS dtEventCreated, \
											   EV.TXT_EVENT_DESCR AS eventDescr, \
											   ST.DT_STAGE_START AS dtStageStart, \
											   ST.CD_STAGE AS cdStage, \
											   ST.CD_STAGE_PROGRAM AS cdStageProgram \
											   FROM CAPS_CASE C, STAGE ST, EVENT EV, SVC_AUTH_EVENT_LINK SE, SERVICE_AUTHORIZATION SA, SVC_AUTH_DETAIL SD \
											   WHERE C.ID_CASE = EV.ID_CASE AND ID_SVC_AUTH_DTL <> ? AND SA.ID_SVC_AUTH = SD.ID_SVC_AUTH AND SE.ID_SVC_AUTH = SA.ID_SVC_AUTH \
											   AND EV.ID_EVENT = SE.ID_SVC_AUTH_EVENT AND ST.ID_STAGE = EV.ID_EVENT_STAGE AND SA.ID_RESOURCE = ? \
											   AND SD.CD_SVC_AUTH_DTL_SVC = ? AND SD.ID_PERSON = ? AND \
											   ( \
											    (SD.DT_SVC_AUTH_DTL_BEGIN <= to_date(?,'mm/dd/yyyy HH24:mi:ss') AND SD.DT_SVC_AUTH_DTL_TERM >= to_date(?,'mm/dd/yyyy HH24:mi:ss')) \
											    OR  \
											    (SD.DT_SVC_AUTH_DTL_BEGIN >= to_date(?,'mm/dd/yyyy HH24:mi:ss') AND SD.DT_SVC_AUTH_DTL_TERM <= to_date(?,'mm/dd/yyyy HH24:mi:ss')) \
											      OR \
											    (SD.DT_SVC_AUTH_DTL_BEGIN <= to_date(?,'mm/dd/yyyy HH24:mi:ss') AND SD.DT_SVC_AUTH_DTL_TERM >= to_date(?,'mm/dd/yyyy HH24:mi:ss')) \
											      OR \
											    (SD.DT_SVC_AUTH_DTL_BEGIN >= to_date(?,'mm/dd/yyyy HH24:mi:ss') AND SD.DT_SVC_AUTH_DTL_BEGIN <= to_date(?,'mm/dd/yyyy HH24:mi:ss')) \
											   ) \
											    ORDER BY EV.DT_EVENT_CREATED ASC 

WorkloadDao.contactPurposeStatusSql=SELECT COUNT(*) AS recCount FROM CONTACT WHERE ID_CONTACT_STAGE = :idStage AND CD_CONTACT_PURPOSE = :cdContactPurpose

WorkloadDao.contactApprovedSql=SELECT EV.CD_EVENT_STATUS AS cdEventStatus FROM EVENT EV WHERE EV.ID_EVENT IN (SELECT MAX(CC.ID_EVENT) FROM CONTACT CC WHERE CC.ID_CASE=:idCase AND CC.CD_CONTACT_TYPE =:idContactType)

LicensingInvstCnclsnDao.hasContactTypeSql=SELECT CASE WHEN EXISTS ( \
                                            SELECT 'indRecFound' FROM CONTACT c, EVENT_PERSON_LINK epl \
                                            WHERE c.ID_EVENT = epl.ID_EVENT AND c.id_contact_stage = :idStage \
                                                  AND c.cd_contact_type = :cdContactType AND epl.ID_PERSON = :idPerson \
                                          ) THEN 1 ELSE 0 END AS rec_exists FROM dual

LicensingInvstCnclsnDao.isChildSexLaborTrafficking= SELECT CASE WHEN EXISTS (SELECT 1 FROM   ALLEGATION WHERE ID_CASE = (SELECT ID_CASE FROM STAGE WHERE ID_STAGE = :idStage) AND ( CD_ALLEG_TYPE = 'LBTR' OR CD_ALLEG_TYPE = 'SXTR' ) ) \
												THEN 'Y' ELSE 'N' END FROM DUAL	 

LicensingInvstCnclsnDao.isChildSexLaborTraffickingFalse= SELECT CASE WHEN EXISTS (SELECT 1 FROM LICENSING_INVST_DTL WHERE ID_LICNG_INVST_STAGE = :idInvstStage \
													AND ( IND_CHILD_SEX_TRAFFIC IS NOT NULL AND IND_CHILD_LABOR_TRAFFIC IS NOT NULL) ) THEN 'Y' ELSE 'N' END  FROM DUAL


EventDaoImpl.getPersonFromEventPlanLinkByIdEvent=SELECT \
												 A.ID_PERSON AS idPerson, \
      											 A.DT_LAST_UPDATE AS dtLastUpdate, \
          										 B.NM_PERSON_FULL AS nmPersonFull \
     											 FROM \
          										 EVENT_PERSON_LINK A, \
          										 PERSON B \
     											 WHERE \
     											 A.ID_EVENT =:idEvent \
     											 AND  A.ID_PERSON = B.ID_PERSON

StageDaoImpl.getPersonFromPRNStageByIdStage=SELECT A.ID_PERSON AS idPerson, \
                   							B.NM_PERSON_FULL AS nmPersonFull \
            								FROM   STAGE_PERSON_LINK A, \
                   							PERSON B \
            								WHERE  A.ID_STAGE           =:idStage \
            								AND    A.CD_STAGE_PERS_TYPE ='PRN' \
            								AND    B.ID_PERSON          = A.ID_PERSON
            								
StageDaoImpl.getStageByCasePersonId=SELECT C.ID_STAGE AS idStage, \
 									C.ID_PERSON AS idPerson, \
 									D.ID_CASE AS idCase \
 									FROM   STAGE_PERSON_LINK A, \
 									PERSON            B, \
 									STAGE_PERSON_LINK C, \
 									STAGE             D \
 									WHERE  A.ID_PERSON          =:idPerson \
        							AND    A.CD_STAGE_PERS_TYPE ='PRN' \
        							AND    B.CD_PERSON_STATUS   ='A' \
        							AND    C.CD_STAGE_PERS_ROLE ='PR' \
        							AND    B.ID_PERSON          =  A.ID_PERSON \
        							AND    C.ID_STAGE           =  A.ID_STAGE \
        							AND    D.ID_STAGE           =  C.ID_STAGE \
        							AND    D.ID_CASE            !=:idCase \
        							AND    D.DT_STAGE_CLOSE IS NULL

TododaoImpl.getTodoByStageId=SELECT \
							 T.ID_TODO AS idTodo, \
							 T.DT_LAST_UPDATE AS dtLastUpdate, \
							 C.ID_EVENT AS idTodoEvent, \
	     					 C.DT_LAST_UPDATE AS dtContactLastUpdate, \
	     					 E.DT_LAST_UPDATE AS dtEventLastUpdate \
							 FROM \
	     					 TODO     T, \
	     					 CONTACT  C, \
	     					 EVENT    E \
							 WHERE \
							 E.ID_EVENT_STAGE  =:idStage \
							 AND  E.ID_EVENT        = C.ID_EVENT \
							 AND  E.ID_EVENT        = T.ID_TODO_EVENT \
							 AND  E.CD_EVENT_STATUS = 'NEW' \
							 AND  C.CD_CONTACT_TYPE = 'CMST'
							        							
WorkloadDao.checkoutPersonStatusSql = SELECT distinct count(*) AS recCount FROM  STAGE_PERSON_LINK SPL, WORKLOAD W \
									  WHERE  SPL.ID_PERSON = :idPerson  OR SPL.ID_PERSON = :idPerson2 AND W.ID_WKLD_STAGE = SPL.ID_STAGE  \
									  AND W.CD_MOBILE_STATUS = :cdMobileStatus
									  
EventDaoImpl.getAdoptionSubsidyByIdEvent=SELECT \
    									 A.ID_ADPT_SUB AS idAdptSub, \
    									 B.DT_LAST_UPDATE AS dtLastUpdate, \
    									 B.DT_ADPT_SUB_AGREE_RETN AS dtAdptSubAgreeRetn, \
    									 B.DT_ADPT_SUB_AGREE_SENT AS dtAdptSubAgreeSent, \
    									 B.DT_ADPT_SUB_APP_RETURNED AS dtAdptSubAppReturned, \
    									 B.DT_ADPT_SUB_LAST_INVC AS dtAdptSubLastInvc, \
    									 B.DT_ADPT_SUB_END AS dtAdptSubEnd, \
    									 B.DT_ADPT_SUB_EFFECTIVE AS dtAdptSubEffective, \
    									 B.DT_ADPT_SUB_APPRVD AS dtAdptSubApprvd, \
    									 B.DT_ADPT_SUB_APP_SENT AS dtAdptSubAppSent, \
    									 B.ID_ADPT_SUB_PAYEE AS idCapsResource, \
    									 B.ID_ADPT_SUB_PERSON AS idPerson, \
    									 B.ID_PLCMT_EVENT AS idPlacement, \
    									 B.AMT_ADPT_SUB AS amtAdptSub, \
    									 B.CD_ADPT_SUB_CLOSE_RSN AS cdAdptSubCloseRsn, \
    									 B.CD_ADPT_SUB_DETERM AS cdAdptSubDeterm, \
    									 B.IND_ADPT_SUB_THIRD_PARTY AS indAdptSubThirdParty, \
    									 B.IND_ADPT_SUB_PROCESS AS indAdptSubProcess, \
    									 B.TXT_ADPT_SUB_RSN AS adptSubRsn, \
    									 B.ID_ADPT_ELIG_APPLICATION AS idAdptEligApplication, \
    									 B.ID_ADPT_ELIG_RECERT AS idAdptEligRecert, \
    									 B.DT_NEXT_RECERT AS dtNextRecert, \
    									 B.DT_WITHDRAW AS dtWithdraw, \
    									 B.TXT_WITHDRAW_RSN AS withdrawRsn, \
    									 B.CD_WITHDRAW_RSN AS cdWithdrawRsn, \
    									 B.IND_ELIG_OVERRIDE AS indEligOverride \
										 FROM ADPT_SUB_EVENT_LINK A, \
     									 ADOPTION_SUBSIDY    B \
										 WHERE A.ID_EVENT =:idEvent \
										 AND   A.ID_ADPT_SUB = B.ID_ADPT_SUB
										     							
EventDaoImpl.deleteAdptSubEventLinkByIdEvent=DELETE ADPT_SUB_EVENT_LINK WHERE  ID_EVENT =:idEvent

EventDaoImpl.getAdoptionSubsidyEntityByIdEvent=SELECT b AdoptionSubsidy b where b.idAdptSub=:idAdptSub	

EventDaoImpl.getidAdptEligApplicationByIdEvent=SELECT \
        									   A.ID_ADPT_ELIG_APPLICATION \
        									   FROM  ADPT_ASST_APP_EVENT_LINK A, \
        									   ADPT_ELIG_APPLICATION B \
        									   WHERE A.ID_EVENT =:idEvent \
        									   AND   A.ID_ADPT_ELIG_APPLICATION = B.ID_ADPT_ELIG_APPLICATION

EventDaoImpl.deleteApdtAsstAppEventLinkByIdEvent=DELETE ADPT_SUB_EVENT_LINK WHERE  ID_EVENT =:idEvent

EventDaoImpl.getidAdptEligRecertByIdEvent=SELECT \
										  A.ID_ADPT_ELIG_RECERT \
										  FROM ADPT_ASST_APP_EVENT_LINK A, \
        								  ADPT_ELIG_RECERT B \
  										  WHERE A.ID_EVENT =:idEvent \
  										  AND   A.ID_ADPT_ELIG_RECERT = B.ID_ADPT_ELIG_RECERT
  										  
StagePersonLinkDaoImpl.getPrimaryChildIdByIdStage=SELECT ID_PERSON AS idPerson, \
												  ID_CASE AS idCase \
												  FROM STAGE_PERSON_LINK \
												  WHERE ID_STAGE =:idStage \
												  AND CD_STAGE_PERS_ROLE = 'PC'
												  
StagePersonLinkDaoImpl.getIdADOStageByIdSUBStage=SELECT ID_STAGE \
												 FROM STAGE \
												 WHERE  CD_STAGE = 'ADO' AND  DT_STAGE_CLOSE IS NULL AND \
												 ID_STAGE IN ( SELECT L.ID_STAGE FROM STAGE S,STAGE_LINK  L \
												 WHERE S.ID_STAGE  = L.ID_PRIOR_STAGE AND L.ID_PRIOR_STAGE  =:idStage \
												 AND S.CD_STAGE = 'SUB')

StagePersonLinkDaoImpl.getIdSUBStageByIdADOStage=SELECT ID_STAGE \
												 FROM STAGE \
												 WHERE  CD_STAGE = 'SUB' AND  DT_STAGE_CLOSE IS NULL AND \
												 ID_STAGE IN ( SELECT ID_PRIOR_STAGE FROM STAGE_LINK \
												 WHERE ID_STAGE =:idStage)
												 
MedicalConcenterDaoImpl.updateMedicalConcenterByAttributes=UPDATE MEDICAL_CONSENTER \
														   SET \
														   DT_MED_CONS_END =:dateEnd \
														   WHERE ID_CASE =:idCase \
														   AND ID_PERSON =:idPerson \
														   AND DT_MED_CONS_END IS NULL
														   
MedicalConcenterDaoImpl.fetchActiveMedConsList = SELECT  m.ID_MED_CONSENTER AS idMedConsenter, \
	m.ID_EVENT AS idEvent, m.ID_PERSON AS idPerson, m.ID_CASE AS idCase, m.ID_MED_CONSENTER_PERSON AS idMedConsenterPerson, \
	m.CD_MED_CONSENTER_TYPE AS cdMedConsenterType, m.CD_COURT_AUTH AS cdCourtAuth, m.CD_DFPS_DESIG AS cdDfpsDesig, \
	m.DT_LAST_UPDATE AS dtLastUpdate, m.DT_MED_CONS_START AS dtMedConsStart, m.DT_MED_CONS_END AS dtMedConsEnd, \
	m.DT_MED_CONS_FILED AS dtMedConsFiled, m.TXT_YOUTH_SOME AS comments, m.IND_COURT_AUTH AS indCourtAuth, s.id_stage AS idStage, s.cd_stage_program AS cdStageProgram, \
     c.ind_case_sensitive AS indSensitiveCase, s.dt_stage_start AS dtStageStart, s.cd_stage AS cdStage \
     FROM   MEDICAL_CONSENTER m, EVENT e, CAPS_CASE c, STAGE s  WHERE m.ID_EVENT = e.id_event  \
     AND m.ID_CASE = c.ID_CASE AND e.ID_EVENT_STAGE = s.ID_STAGE AND m.ID_MED_CONSENTER_PERSON = :idPerson \
     AND (m.DT_MED_CONS_END IS NULL OR m.DT_MED_CONS_END > SYSDATE) ORDER BY s.DT_STAGE_START DESC	
     
     													   
StageDaoImpl.getActiveStageByIdPerson=SELECT  A.ID_CASE AS idCase, \
									  A.CD_STAGE_PROGRAM AS cdStageProgram, \
									  B.ID_STAGE AS idStage \
									  FROM    STAGE A, \
									  STAGE_PERSON_LINK B, \
									  PERSON_MERGE_VIEW V \
									  WHERE   V.ID_PERSON_INPUT  =:idPerson \
									  AND     B.ID_PERSON       = V.ID_PERSON_OUTPUT \
									  AND     A.ID_STAGE        = B.ID_STAGE \
									  AND     A.DT_STAGE_CLOSE IS NULL
									  
		          								
Approver.getApproverStatus=SELECT CD_APPROVERS_STATUS from (SELECT * FROM APPROVAL_EVENT_LINK AEL, APPROVERS A \
		       							    	WHERE AEL.ID_EVENT =:idEvent  AND AEL.ID_APPROVAL = A.ID_APPROVAL  \
		          								ORDER BY AEL.ID_APPROVAL DESC, A.ID_APPROVERS DESC) WHERE ROWNUM < 2 
	
		          								
WorkloadDao.getCheckedOutStagesForPerson = 	SELECT C.IND_CASE_SENSITIVE AS indSensitiveCase, W.ID_WKLD_PERSON AS idPrimaryWorker, P.NM_PERSON_FULL AS nmPrimaryWorker, \
   SPL.ID_PERSON AS idPerson, W.CD_WKLD_STAGE AS cdStage, SPL.ID_STAGE AS idStage, SPL.ID_CASE AS idCase, W.CD_WKLD_STAGE_REGION AS cdStageRegion, \
   W.CD_WKLD_STAGE_PROGRAM AS cdStageProgram, SPL.CD_STAGE_PERS_ROLE AS cdStagePersRole, SPL.CD_STAGE_PERS_TYPE AS cdStagePersType, \
   SPL.CD_STAGE_PERS_REL_INT AS cdStagePersRelLong, W.DT_CHECKOUT AS dtStageCheckout \
   FROM   STAGE_PERSON_LINK SPL, WORKLOAD W, CAPS_CASE C, PERSON P \
   WHERE  W.ID_WKLD_CASE = C.ID_CASE AND SPL.ID_PERSON = :idPerson AND W.ID_WKLD_STAGE = SPL.ID_STAGE AND W.CD_MOBILE_STATUS = 'OT' \
   AND SPL.CD_STAGE_PERS_ROLE NOT IN ('PR', 'HP', 'SE') AND W.CD_WKLD_STAGE_PERS_ROLE IN ('PR', 'SE') AND W.ID_WKLD_PERSON = P.ID_PERSON \
   ORDER BY SPL.DT_STAGE_PERS_LINK DESC 	
   
   
WorkloadDao.getOpenStageListForPerson =  SELECT C.IND_CASE_SENSITIVE AS indSensitiveCase, C.ID_CASE AS idCase, C.NM_CASE AS nmCase, \
   S.ID_STAGE AS idStage, S.CD_STAGE AS cdStage, S.NM_STAGE AS nmStage, SPL.ID_PERSON AS idPerson, S.DT_STAGE_START AS dtStageStart, S.CD_STAGE_PROGRAM AS cdStageProgram, SPL.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
   SPL.CD_STAGE_PERS_TYPE AS cdStagePersType, SPL.CD_STAGE_PERS_REL_INT AS cdStagePersRelLong \
   FROM   STAGE_PERSON_LINK SPL, STAGE S, CAPS_CASE C \
   WHERE  SPL.ID_PERSON = :idPerson AND SPL.ID_CASE = C.ID_CASE  AND SPL.ID_STAGE = S.ID_STAGE \
   AND SPL.CD_STAGE_PERS_ROLE NOT IN ('PR', 'HP', 'SE') AND S.DT_STAGE_CLOSE is null ORDER BY S.DT_STAGE_START DESC      


WorkloadDao.getOpenRCLINVStagesForPerson = SELECT C.IND_CASE_SENSITIVE AS indSensitiveCase, C.ID_CASE AS idCase, C.NM_CASE AS nmCase, \
                                            S.ID_STAGE AS idStage, S.CD_STAGE AS cdStage, S.NM_STAGE AS nmStage, SPL.ID_PERSON AS idPerson, \
                                            S.DT_STAGE_START AS dtStageStart, S.CD_STAGE_PROGRAM AS cdStageProgram, SPL.CD_STAGE_PERS_ROLE AS cdStagePersRole, \
                                            SPL.CD_STAGE_PERS_TYPE AS cdStagePersType, SPL.CD_STAGE_PERS_REL_INT AS cdStagePersRelLong \
                                            FROM   STAGE_PERSON_LINK SPL \
                                            JOIN STAGE S ON SPL.ID_STAGE=S.ID_STAGE JOIN CAPS_CASE C ON SPL.ID_CASE = C.ID_CASE \
                                            WHERE  SPL.ID_PERSON = :idPerson AND S.CD_STAGE='INV' AND S.CD_STAGE_PROGRAM='RCL' \
                                            AND SPL.CD_STAGE_PERS_ROLE='VC' AND spl.cd_stage_pers_type='PRN' AND s.ind_stage_close='N' ORDER BY S.DT_STAGE_START DESC  
   
   
EventDaoImpl.eventWithTwoPerson = SELECT C.IND_CASE_SENSITIVE AS indSensitiveCase, C.ID_CASE AS idCase, \
   S.ID_STAGE AS idStage, S.CD_STAGE AS cdStage, S.CD_STAGE_PROGRAM AS cdProgram,  E.ID_EVENT AS idEvent, E.DT_EVENT_OCCURRED AS dtEventOccurred, E.TXT_EVENT_DESCR AS eventDescr \
   FROM EVENT_PERSON_LINK EP1, EVENT_PERSON_LINK EP2, EVENT E, STAGE S, CAPS_CASE C \
   WHERE EP1.ID_PERSON = :idPerson1 AND EP2.ID_PERSON = :idPerson2 \
   AND EP1.ID_EVENT = EP2.ID_EVENT AND EP1.ID_EVENT = E.ID_EVENT \
   AND E.ID_EVENT_STAGE = S.ID_STAGE AND E.ID_CASE = C.ID_CASE \
   AND S.DT_STAGE_CLOSE IS NULL ORDER BY E.DT_EVENT_OCCURRED DESC 	
   
StageDaoImpl.openStageWithTwoPerson = 	SELECT C.IND_CASE_SENSITIVE AS indSensitiveCase, C.ID_CASE AS idCase, S.ID_STAGE AS idStage, \
   S.CD_STAGE AS cdStage,  S.DT_STAGE_START AS dtStageStart, S.CD_STAGE_PROGRAM AS cdStageProgram,  SPL1.CD_STAGE_PERS_ROLE AS cdStagePersRole,  SPL2.CD_STAGE_PERS_ROLE AS cdStageforwardPersRole \
   FROM   STAGE_PERSON_LINK SPL1, STAGE_PERSON_LINK SPL2, STAGE S, CAPS_CASE C \
   WHERE  SPL1.ID_PERSON = :idPerson1 AND SPL2.ID_PERSON = :idPerson2 AND SPL1.ID_STAGE = SPL2.ID_STAGE AND S.DT_STAGE_CLOSE IS NULL \
   AND SPL1.ID_CASE = C.ID_CASE  AND SPL1.ID_STAGE = S.ID_STAGE   AND SPL2.CD_STAGE_PERS_ROLE in ('PR', 'SE') ORDER BY S.DT_STAGE_START ASC 	
   
StageDaoImpl.getPendingClosureEvent = SELECT C.IND_CASE_SENSITIVE AS indSensitiveCase, \
   C.ID_CASE AS idCase, S.ID_STAGE AS idStage, S.CD_STAGE AS cdStage, S.CD_STAGE_PROGRAM AS cdProgram, E.DT_EVENT_MODIFIED AS dtEventModified, E.TXT_EVENT_DESCR AS eventDescr \
   FROM EVENT E, STAGE S, TASK T, CAPS_CASE C  WHERE E.ID_EVENT_STAGE = S.ID_STAGE \
   AND E.ID_EVENT_STAGE = S.ID_STAGE AND E.ID_CASE = C.ID_CASE AND E.CD_TASK = T.CD_TASK \
   AND T.IND_STAGE_CLOSURE = '1' AND E.CD_EVENT_STATUS = 'PEND' AND E.CD_EVENT_TYPE in ('CCL', 'STG', 'APP') \
   AND EXISTS (SELECT   S1.ID_STAGE FROM   STAGE S1, STAGE_PERSON_LINK L1 WHERE S1.ID_STAGE = L1.ID_STAGE AND S1.DT_STAGE_CLOSE is NULL \
   AND L1.CD_STAGE_PERS_TYPE <> 'STF' AND L1.ID_PERSON = :idPerson AND S1.ID_STAGE = S.ID_STAGE ) ORDER BY E.DT_EVENT_MODIFIED ASC															 											   										  									  													   										 											   									


												
ApprovalDaoImpl.getPrimaryWorkerIdForStage= SELECT ID_WKLD_PERSON AS ulIdPerson \
                                     FROM WORKLOAD \
                                     WHERE ID_WKLD_STAGE = :idStage \
                                    AND CD_WKLD_STAGE_PERS_ROLE = 'PR' 	
                                    
ApprovalDaoImpl.getARStageOverallDisposition = SELECT CD_AR_OVRLL_DISPTN FROM CPS_AR_CNCLSN_DETAIL CACD WHERE CACD.ID_CASE= :idCase and CACD.ID_STAGE= :idStage 
 
DigitalPictureDaoImpl.getExtDocDtl = SELECT    ID_EXT_DOCUMENTATION AS idExtSitInfo, DT_LAST_UPDATE AS dtLastUpdate, DT_EXT_DOC_OBTAINED AS dtExtDocObtained, TXT_EXT_DOC_DETAILS AS extDocDetails \
	, CD_EXT_DOC_TYPE AS cdExtDocType,  TXT_EXT_DOC_LOCATION AS extDocLocation, ID_DOC_REPOSITORY AS idDocRepository, CD_EXT_DOC_SORT AS cdExtDocSort FROM  \
	EXT_DOCUMENTATION WHERE ID_EXT_DOCUMENTATION = :idExtDocDetail  ORDER BY  CD_EXT_DOC_SORT, DT_EXT_DOC_OBTAINED DESC
	
DigitalPictureDaoImpl.getCountExtDocDtl = SELECT COUNT(*) AS count_nbr_pic FROM PICTURE_DETAIL WHERE ID_EXT_DOCUMENTATION = :idExtDocDetail 

DigitalPictureDaoImpl.getDigitalPictureListSql=SELECT D.ID_PICTURE_DETAIL AS idPictureDetail, D.DT_LAST_UPDATE AS dtLastUpdate, D.ID_EXT_DOCUMENTATION AS idExtDocumentation,NVL(D.ID_PERSON, 0 ) AS idPerson, \
 											P.NM_PERSON_FULL AS personName, D.ID_CASE AS idCase, D.CD_PICTURE_TYPE AS cdPictureType,D.TXT_SUBJECT AS subject, D.NM_OTHER_PHOTOGRAPHER AS nmOtherPhotographer, \
 											D.DT_PICTURE_TAKEN AS dtPictureTaken, D.DT_PICTURE_UPLOADED as dtPictureUploaded, D.TXT_DESCRIPTION AS description, D.NM_IMAGE AS nmImage, D.NM_THUMBNAIL AS nmThumbnail \
 											FROM PICTURE_DETAIL D left outer join PERSON P on D.ID_PERSON = P.ID_PERSON where D.ID_EXT_DOCUMENTATION = :idExtDocumentation
 
DigitalPictureDaoImpl.getDigitalPictureDetailsSql=SELECT D.ID_PICTURE_DETAIL AS idPictureDetail, D.DT_LAST_UPDATE AS dtLastUpdate, D.ID_EXT_DOCUMENTATION AS idExtDocumentation,NVL(D.ID_PERSON, 0 ) as idPerson, \
 											P.NM_PERSON_FULL AS personName, D.ID_CASE AS idCase, D.CD_PICTURE_TYPE AS cdPictureType,D.TXT_SUBJECT AS subject, D.NM_OTHER_PHOTOGRAPHER AS nmOtherPhotographer, \
 											D.DT_PICTURE_TAKEN AS dtPictureTaken,TO_CHAR(D.DT_PICTURE_TAKEN, 'HH:MI') AS tmStrPicTaken,TO_CHAR(D.DT_PICTURE_TAKEN, 'AM') AS tmStrAmPmPicTaken, \
 											D.DT_PICTURE_UPLOADED AS dtPictureUploaded,D.TXT_DESCRIPTION AS description, D.NM_IMAGE AS nmImage, D.NM_THUMBNAIL AS nmThumbnail \
 											FROM PICTURE_DETAIL D left outer join PERSON P on D.ID_PERSON = P.ID_PERSON where D.ID_PICTURE_DETAIL = :idPicDetail
 											
TododaoImpl.getTodoByEventId=SELECT T.cd_todo_type AS cdTodoType,T.dt_todo_due AS dtTodoDue, T.cd_todo_task as cdTodoTask, T.txt_todo_desc AS todoDesc, T.id_todo AS idTodo, T.id_todo_case AS idTodoCase, \
      						 T.id_todo_stage AS idTodoStage, T.id_todo_event AS idTodoEvent, T.DT_TODO_CREATED AS dtTodoCreated, T.DT_TODO_TASK_DUE AS dtTodoTaskDue, T.ID_TODO_INFO AS idTodoInfo, \
      						 T.DT_LAST_UPDATE AS dtLastUpdate, T.ID_TODO_PERS_ASSIGNED AS idTodoPersAssigned, T.DT_TODO_COMPLETED AS dtTodoCompleted \
							 FROM  TODO  T WHERE T.ID_TODO_EVENT = :idEvent
							 
TododaoImpl.getTodoIdForApproval=SELECT T.ID_TODO AS idTodo, T.ID_TODO_PERS_ASSIGNED AS idTodoPersAssigned,C.ID_CASE as idTodoCase,C.NM_CASE AS nmCase,S.ID_STAGE AS idTodoStage,S.NM_STAGE AS nmStage, \
								S.CD_STAGE AS cdStage,S.CD_STAGE_PROGRAM AS cdStageProgram,S.CD_STAGE_TYPE AS cdStageType,E.ID_EVENT AS idTodoEvent,E.CD_EVENT_STATUS AS eventStatus,TSK.CD_TASK AS cdTodoTask,\
       							TSK.CD_TASK_EVENT_TYPE AS cdTaskEventType,TSK.IND_STAGE_CLOSURE AS indStageClosure,TSK.TXT_EVENT_DETAIL_URL AS eventDetailUrl, T.TXT_TODO_DESC AS todoDesc FROM TODO T, STAGE S, EVENT E, CAPS_CASE C, TASK TSK \
       							WHERE T.ID_TODO = :idToDo AND T.ID_TODO_EVENT = E.ID_EVENT (+) AND T.ID_TODO_STAGE = S.ID_STAGE AND T.ID_TODO_CASE = C.ID_CASE (+) AND T.CD_TODO_TASK = TSK.CD_TASK AND T.DT_TODO_COMPLETED IS NULL							 

AssignWorkloadDaoImpl.getTempAssignWorkloadDtls = SELECT \
      				                          ID_TEMP_STAGE AS idWkldStage, \
      		                                  DT_LAST_UPDATE AS dtLastUpdated, \
      					                      CD_TEMP_STAGE AS wkldStage, \
      									      CD_TEMP_STAGE_PERS_ROLE AS wkldStagePersRole \
     										  FROM \
      										  TEMP_STAGE_PERS_LINK \
     										  WHERE \
      										  ID_TEMP_STAGE_PERSON = :idPerson

							 
WrokingNarrativeDaoImpl.getStageCaseDtls = 	SELECT	ST.ID_STAGE AS idStage, ST.ID_CASE AS idCase, ST.ID_SITUATION AS idSituation, ST.DT_LAST_UPDATE AS dtLastUpdate, SYSDATE, \
											ST.CD_STAGE_TYPE AS cdStageType, ST.ID_UNIT AS idUnit,  ST.DT_STAGE_CLOSE AS dtStageClose, ST.CD_STAGE_CLASSIFICATION AS cdStageClassification, \
											ST.CD_STAGE_CURR_PRIORITY AS cdStageCurrPriority, ST.CD_STAGE_INITIAL_PRIORITY AS cdStageInitialPriority, ST.CD_STAGE_RSN_PRIORITY_CHGD AS cdStageRsnPriorityChgd, \
											ST.CD_STAGE_REASON_CLOSED AS cdStageReasonClosed, ST.IND_STAGE_CLOSE AS indStageClose, ST.CD_STAGE_CNTY AS cdStageCnty, ST.NM_STAGE AS nmStage, \
											ST.CD_STAGE_REGION AS cdStageRegion, ST.DT_STAGE_START AS dtStageStart,	ST.CD_STAGE_PROGRAM AS cdStageProgram, ST.CD_STAGE AS cdStage, \
											ST.TXT_STAGE_PRIORITY_CMNTS AS stagePriorityCmnts, ST.TXT_STAGE_CLOSURE_CMNTS AS stageClosureCmnts, CA.CD_CASE_PROGRAM AS cdCaseProgram, \
											CA.CD_CASE_COUNTY AS cdCaseCounty, CA.CD_CASE_SPECIAL_HANDLING AS cdCaseSpecialHandling, CA.IND_CASE_WORKER_SAFETY AS indCaseWorkerSafety, \
											CA.TXT_CASE_WORKER_SAFETY AS caseWorkerSafety, CA.TXT_CASE_SENSITIVE_CMNTS AS caseSensitiveCmnts, CA.IND_CASE_SENSITIVE AS indCaseSensitive, \
											CA.IND_CASE_ARCHIVED AS indCaseArchived, CA.DT_CASE_CLOSED AS dtCaseClosed, CA.CD_CASE_REGION AS cdCaseRegion, CA.DT_CASE_OPENED AS dtCaseOpened, \
											CA.NM_CASE AS nmCase FROM CAPS_CASE CA, STAGE ST WHERE ID_STAGE = :idStage AND ST.ID_CASE = CA.ID_CASE
											
WrokingNarrativeDaoImpl.getCaseMergeDtls = 	SELECT 	ID_CASE_MERGE AS idCaseMerge, ID_CASE_MERGE_TO AS idCaseMergeTo, ID_CASE_MERGE_FROM AS idCaseMergeFrom, \
											ID_CASE_MERGE_SIT_FROM AS idsituation, ID_CASE_MERGE_STAGE_FROM AS idstage, ID_CASE_MERGE_PERS_MRG AS idPersonCaseMerge, \
											ID_CASE_MERGE_PERS_SPLIT AS idPersonCaseMergeSplit,	IND_CASE_MERGE_INVALID AS indCaseMergeInvalid, IND_CASE_MERGE_PENDING AS indCaseMergePending, \
											IND_CASE_MERGE_STAGE_SWAP AS indCaseMergeStageSwap,	DT_CASE_MERGE AS dtCaseMerge, DT_CASE_MERGE_SPLIT AS dtCaseMergeSplit, \
											DT_LAST_UPDATE AS dtLastUpdate FROM CASE_MERGE WHERE ID_CASE_MERGE_TO = :idCase		
											
WrokingNarrativeDaoImpl.getMergedStagesSP =  CALL CLSCDBD.PROC_CLSCDBD(:idCase,:idStage,:cdStage)									

WrokingNarrativeDaoImpl.getContactDtlsA = SELECT CASE WHEN S1.ID_CASE IS NOT NULL THEN DECODE(S1.ID_CASE,null,'No','Yes') END AS indNarrative, \
										  T1.ID_EVENT AS idEvent, T1.DT_LAST_UPDATE AS dtLastUpdate, T1.ID_CONTACT_WORKER AS idContactWorker, \
										  T1.ID_CONTACT_STAGE AS idContactStage, T1.DT_CONTACT_OCCURRED AS dtContactOccurred, T1.DT_CNTCT_NEXT_SUMM_DUE AS dtCntctNextSummDue, \
										  DECODE(T1.IND_CONTACT_ATTEMPTED,'Y','Yes','N','No') AS  indContactAttempted, T1.CD_CONTACT_TYPE AS cdContactType, \
										  T1.CD_CONTACT_PURPOSE AS cdContactPurpose, T1.CD_CONTACT_LOCATION AS cdContactLocation, T1.CD_CONTACT_METHOD AS cdContactMethod, \
										  T1.CD_CONTACT_OTHERS AS cdContactOthers, T1.DT_CNTCT_MNTHLY_SUMM_BEG AS dtCntctMnthlySummBeg, T1.DT_CNTCT_MNTHLY_SUMM_END AS dtCntctMnthlySummEnd, \
										  T1.DT_CONTACT_APPRV AS dtContactApprv, T1.CD_RSN_SCROUT AS cdRsnScrout, T1.IND_REC_CONS AS indRecCons, T1.TXT_KIN_CAREGIVER AS kinCaregiver, \
										  T1.CD_RSN_AMTNE AS cdRsnAmtne, T1.AMT_NEEDED AS amtNeeded, T1.IND_SIBLING_VISIT AS indSiblingVisit, P1.ID_PERSON AS idPerson, \
										  P1.NM_PERSON_FIRST AS nmPersonFirst, P1.NM_PERSON_MIDDLE AS nmPersonMiddle, P1.NM_PERSON_LAST AS nmPersonLast, P1.CD_PERSON_SUFFIX AS cdPersonSuffix, \
										  V1.DT_EVENT_CREATED AS dtEventCreated, T1.IND_ANNOUNCED AS indAnnounced, 0 AS indMerge, T1.IND_SAF_PLAN_COMP AS indSafPlanComp, \
										  T1.IND_FAM_PLAN_COMP AS indFamPlanComp, CASE WHEN T1.DT_CONTACT_OCCURRED >= TO_DATE('12/14/2014', 'MM/DD/YYYY') \
										  THEN 'Y' ELSE 'N' END AS indClientTime, T1.EST_CONTACT_HOURS AS estContactHours,  T1.EST_CONTACT_MINS  AS estContactMins \
										  FROM EVENT V1, PERSON P1, CONTACT_NARRATIVE S1, CONTACT T1 WHERE T1.ID_CONTACT_WORKER = P1.ID_PERSON AND T1.ID_EVENT = S1.ID_EVENT (+) \
										  AND T1.ID_EVENT = V1.ID_EVENT AND T1.CD_CONTACT_TYPE NOT IN ('AEXR','LEXR')
										  
WrokingNarrativeDaoImpl.getContactDtlsB = SELECT CASE WHEN S.ID_CASE IS NOT NULL THEN DECODE(S.ID_CASE,null,'No','Yes') END AS indNarrative, \
										  T.ID_EVENT AS idEvent, T.DT_LAST_UPDATE AS dtLastUpdate, T.ID_CONTACT_WORKER AS idContactWorker, \
										  T.ID_CONTACT_STAGE AS idContactStage, T.DT_CONTACT_OCCURRED AS dtContactOccurred, \
										  T.DT_CNTCT_NEXT_SUMM_DUE AS dtCntctNextSummDue, DECODE(T.IND_CONTACT_ATTEMPTED,'Y','Yes','N','No') AS  indContactAttempted, \
										  T.CD_CONTACT_TYPE AS cdContactType, T.CD_CONTACT_PURPOSE AS cdContactPurpose, T.CD_CONTACT_LOCATION AS cdContactLocation, \
										  T.CD_CONTACT_METHOD AS cdContactMethod, T.CD_CONTACT_OTHERS AS cdContactOthers, T.DT_CNTCT_MNTHLY_SUMM_BEG AS dtCntctMnthlySummBeg, \
										  T.DT_CNTCT_MNTHLY_SUMM_END AS dtCntctMnthlySummEnd, T.DT_CONTACT_APPRV AS dtContactApprv, T.CD_RSN_SCROUT AS cdRsnScrout, \
										  T.IND_REC_CONS AS indRecCons, T.TXT_KIN_CAREGIVER AS kinCaregiver, T.CD_RSN_AMTNE as cdRsnAmtne, T.AMT_NEEDED AS amtNeeded, \
										  T.IND_SIBLING_VISIT AS indSiblingVisit, P.ID_PERSON AS idPerson, P.NM_PERSON_FIRST AS nmPersonFirst, P.NM_PERSON_MIDDLE AS nmPersonMiddle, \
										  P.NM_PERSON_LAST AS nmPersonLast, P.CD_PERSON_SUFFIX AS cdPersonSuffix, V.DT_EVENT_CREATED AS dtEventCreated, T.IND_ANNOUNCED AS indAnnounced, \
										  1 AS indMerge, T.IND_SAF_PLAN_COMP AS indSafPlanComp, T.IND_FAM_PLAN_COMP AS indFamPlanComp, \
										  CASE WHEN T.DT_CONTACT_OCCURRED >= TO_DATE('12/14/2014', 'MM/DD/YYYY') THEN 'Y' ELSE 'N' END AS indClientTime, \
										  T.EST_CONTACT_HOURS AS estContactHours, T.EST_CONTACT_MINS AS estContactMins FROM EVENT V, PERSON P, CONTACT_NARRATIVE S, CONTACT T, STAGE A, STAGE B \
										  WHERE T.ID_CONTACT_WORKER = P.ID_PERSON AND T.ID_EVENT = S.ID_EVENT (+) AND T.ID_EVENT = V.ID_EVENT \
										  AND(B.DT_STAGE_CLOSE IS NULL OR B.DT_STAGE_CLOSE >= A.DT_STAGE_CLOSE) AND B.ID_STAGE <> A.ID_STAGE \
										  AND T.ID_CONTACT_STAGE = A.ID_STAGE AND T.CD_CONTACT_TYPE NOT IN ('AEXR','LEXR')

WrokingNarrativeDaoImpl.getContactNamesandEventId = SELECT C.ID_EVENT AS idEvent,CO.DECODE AS name, 'A' AS nmPersonFull \
													FROM CONTACT C,COTHCNCT CO WHERE ID_CONTACT_STAGE = :idStage \
													AND C.CD_CONTACT_OTHERS = CO.CODE AND TRUNC(C.DT_CONTACT_OCCURRED) BETWEEN TO_DATE(:dtFrom, 'MM/DD/YYYY')  AND TO_DATE(:dtTo, 'MM/DD/YYYY') \
													UNION SELECT EPL.ID_EVENT AS idEvent,P.NM_PERSON_FULL AS name, SPL.CD_STAGE_PERS_TYPE AS nmPersonFull \
													FROM PERSON P , EVENT_PERSON_LINK EPL ,STAGE_PERSON_LINK SPL, CONTACT C WHERE SPL.ID_STAGE = :idStage \
													AND SPL.CD_STAGE_PERS_TYPE <> 'STF' AND EPL.ID_PERSON = P.ID_PERSON AND P.ID_PERSON = SPL.ID_PERSON \
													AND C.ID_EVENT = EPL.ID_EVENT AND C.ID_EVENT IN (SELECT ID_EVENT FROM CONTACT WHERE ID_CONTACT_STAGE = :idStage) \
													AND TRUNC(C.DT_CONTACT_OCCURRED) BETWEEN TO_DATE(:dtFrom, 'MM/DD/YYYY') AND TO_DATE(:dtTo, 'MM/DD/YYYY') ORDER BY nmPersonFull DESC
													
WrokingNarrativeDaoImpl.getContactDtlOnDateRange = SELECT DISTINCT CASE WHEN A.ID_CASE IS NOT NULL THEN decode(A.ID_CASE,null,'No','Yes') \
													WHEN A.ID_CASE IS NULL THEN decode(CGN.ID_CASE,null,'No','Yes') END AS indNarrative, \
													C.ID_EVENT AS idEvent, C.DT_LAST_UPDATE AS dtLastUpdate, C.ID_CONTACT_WORKER AS idContactWorker, \
													C.ID_CONTACT_STAGE AS idContactStage, C.DT_CONTACT_OCCURRED AS dtContactOccurred, \
													C.DT_CNTCT_NEXT_SUMM_DUE AS dtCntctNextSummDue, decode(C.IND_CONTACT_ATTEMPTED,'Y','Yes','N','No') AS indContactAttempted, \
													C.CD_CONTACT_TYPE AS cdContactType, C.CD_CONTACT_PURPOSE AS cdContactPurpose, C.CD_CONTACT_LOCATION AS cdContactLocation, \
													C.CD_CONTACT_METHOD AS cdContactMethod, C.CD_CONTACT_OTHERS AS cdContactOthers,C.DT_CNTCT_MNTHLY_SUMM_BEG AS dtCntctMnthlySummBeg, \
													C.DT_CNTCT_MNTHLY_SUMM_END AS dtCntctMnthlySummEnd, C.DT_CONTACT_APPRV AS dtContactApprv, C.CD_RSN_SCROUT AS cdRsnScrout, \
													C.IND_REC_CONS AS indRecCons, C.TXT_KIN_CAREGIVER AS kinCaregiver, C.CD_RSN_AMTNE AS cdRsnAmtne, C.AMT_NEEDED AS amtNeeded, \
													C.IND_SIBLING_VISIT AS indSiblingVisit, P.ID_PERSON AS idPerson, P.NM_PERSON_FIRST AS nmPersonFirst, \
													P.NM_PERSON_MIDDLE AS nmPersonMiddle, P.NM_PERSON_LAST AS nmPersonLast, P.CD_PERSON_SUFFIX AS cdPersonSuffix, \
													E.DT_EVENT_CREATED AS dtEventCreated, C.IND_ANNOUNCED AS indAnnounced, C.IND_SAF_PLAN_COMP AS indSafPlanComp, \
													C.IND_FAM_PLAN_COMP AS indFamPlanComp, CASE WHEN DT_CONTACT_OCCURRED >= TO_DATE('12/14/2014', 'MM/DD/YYYY') \
													THEN 'Y' ELSE 'N' END AS indClientTime, C.EST_CONTACT_HOURS AS estContactHours, C.EST_CONTACT_MINS AS estContactMins \
													FROM EVENT E, PERSON P, CONTACT_NARRATIVE A, CONTACT C, CONTACT_GUIDE_NARR CGN WHERE C.ID_CONTACT_WORKER = P.ID_PERSON \
													AND C.ID_EVENT = A.ID_EVENT (+) AND CGN.ID_EVENT(+) = E.ID_EVENT AND C.ID_EVENT = E.ID_EVENT AND C.ID_CONTACT_STAGE = :idStage \
													AND TRUNC(C.DT_CONTACT_OCCURRED) BETWEEN TO_DATE(:dtFrom, 'MM/DD/YYYY') AND TO_DATE(:dtTo, 'MM/DD/YYYY') AND C.CD_CONTACT_TYPE NOT IN ('AEXR','LEXR') \
													ORDER BY dtContactOccurred ASC
													
WrokingNarrativeDaoImpl.getContactGuideNarrDtls = SELECT CGN.ID_CONTACT_GUIDE_NARR AS idContactGuideNarr, CGN.DT_LAST_UPDATE AS dtLastUpdate, \
												  CGN.ID_EVENT AS idEvent, CGN.ID_PERSON AS idPerson, CGN.ID_CASE AS idCase, CGN.ID_STAGE AS idStage, \
												  CGN.CD_TYPE AS cdType, CGN.CD_GUIDE_ROLE AS cdGuideRole, P.NM_PERSON_FIRST AS nmPersonFirst, \
												  P.NM_PERSON_MIDDLE AS nmPersonMiddle, P.NM_PERSON_LAST AS nmPersonLast, P.CD_PERSON_SUFFIX AS cdPersonSuffix \
												  FROM CONTACT_GUIDE_NARR CGN, CONTACT C, PERSON P WHERE CGN.ID_CASE = :idCase AND C.ID_EVENT = CGN.ID_EVENT \
												  AND TRUNC(C.DT_CONTACT_OCCURRED) BETWEEN TO_DATE(:dtFrom, 'MM/DD/YYYY') AND TO_DATE(:dtTo, 'MM/DD/YYYY') AND P.ID_PERSON(+) = CGN.ID_PERSON
												  
TododaoImpl.getPrintTaskExists = select count(*) AS count from TODO where ID_TODO_CASE= :idCase and ID_TODO_STAGE =:idStage and ID_TODO_EVENT= :idEvent and CD_TODO_TASK=:cdTask and CD_TODO_TYPE=:cdTodoType									  

Workload.getPersonInRole = 	SELECT ID_WKLD_PERSON FROM WORKLOAD WHERE ID_WKLD_STAGE=:idStage AND CD_WKLD_STAGE_PERS_ROLE=:cdStagePersonRole

TodoDaoImpl.selectToDosForEvent = SELECT tdi.cd_todo_info as cdTodoInfo,td.ID_TODO as idTodo,td.DT_LAST_UPDATE as dtLastUpdate,\
								  td.ID_TODO_PERS_ASSIGNED as idTodoPersAssigned,td.ID_TODO_CASE as idTodoCase,td.ID_TODO_EVENT as idTodoEvent,\
								  td.ID_TODO_PERS_CREATOR as idTodoPersCreator,td.ID_TODO_STAGE as idTodoStage,\
								  td.ID_TODO_PERS_WORKER as idTodoPersWorker,td.DT_TODO_DUE as dtTodoDue,td.CD_TODO_TASK as cdTodoTask,\
								  td.TXT_TODO_DESC as todoDesc,td.CD_TODO_TYPE as cdTodoType,\
								  td.TXT_TODO_LONG_DESC as todoLongDesc,td.DT_TODO_CREATED as dtTodoCreated,\
								  td.DT_TODO_TASK_DUE as dtTodoTaskDue,td.DT_TODO_COMPLETED as dtTodoCompleted,\
								  td.NM_TODO_CREATOR_INIT as nmTodoCreatorInit,td.ID_TODO_INFO as idTodoInfo \
								  FROM todo td, todo_info tdi WHERE tdi.id_todo_info (+) = td.id_todo_info \
								  AND td.dt_todo_completed IS NULL AND td.id_todo_event = :idContactEvt	 
								   
ContactDaoImpl.getFacilityType = {? = call PKG_CHILDFATALITY.FN_GET_OPERATION_TYPE(?, ?, ?)}

ContactDaoImpl.fetchCurrAbuseNglctInfo = {call PKG_CHILDFATALITY.PROC_GET_CURR_HISTORY_DETAILS(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}

ContactDaoImpl.fetchChildFatalityInfo = {call PKG_CHILDFATALITY.PROC_GET_CHILD_FTLTY_DETAILS(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}

ContactDaoImpl.fetchPriorHistoryInfo = {call PKG_CHILDFATALITY.PROC_GET_PRIOR_HISTORY_DETAILS(?, ?, ?, ?, ? )}							 

     
ContactDaoImpl.updateAppEventStatus	=	UPDATE EVENT \
										SET CD_EVENT_STATUS = :eventStatus \
										WHERE ID_EVENT IN \
										( SELECT ID_APPROVAL \
										FROM APPROVAL_EVENT_LINK \
										WHERE ID_EVENT = :idEvent) \
										AND CD_EVENT_TYPE = 'APP'
											    
HandWritingDaoImpl.fetchEventStageInfo=SELECT s.ID_CASE as idCase, s.ID_STAGE as idStage, s.CD_STAGE as cdStage FROM EVENT e, STAGE s \
   WHERE e.ID_EVENT_STAGE = s.ID_STAGE AND e.ID_EVENT =:idEvent 
   
HandWritingDaoImpl.fetchHandwritableFieldList=SELECT TXT_DOCUMENT_NAME as txtDocType, TXT_FIELD_NAME as txtFieldName, CD_NOTES_TYPE as cdNotesType \
	FROM HANDWRITING_FIELDS WHERE TXT_DOCUMENT_NAME =:sDocType

HandWritingDaoImpl.fetchHandwrittenDataForEvent=SELECT hd.ID_HANDWRITTEN_DATA as txtKeyValue, hd.CD_NOTES_TYPE as cdNotesType, \
	hd.BIN_TRANSLATED_NOTES as txtTranslatedNotes, \
    hd.IMG_HANDWRITTEN_DATA as blobImgHandwrittenData, hd.TXT_FIELD_NAME as txtFieldName, \
    hd.ID_EVENT as idEvent, hd.ID_CASE as idCase, hd.ID_STAGE as idStage, (case when hd.BIN_TRANSLATED_NOTES is null then 'N'  Else  'Y' End ) as strIsConverted, \
    hd.DT_CREATED as dtCreated, hd.DT_LAST_UPDATE as dtLastUpdate, hd.ID_FAMILY_PLAN_NARR AS idFamilyPlanNarr, \
    s.NM_STAGE as nmStage FROM HANDWRITTEN_DATA hd, STAGE s WHERE hd.ID_STAGE = s.ID_STAGE AND hd.ID_EVENT =:idEvent

HandWritingDaoImpl.fetchHandwrittenDataForStageOrCase=SELECT hd.ID_HANDWRITTEN_DATA as txtKeyValue, hd.CD_NOTES_TYPE as cdNotesType, hd.BIN_TRANSLATED_NOTES as txtTranslatedNotes, \
hd.IMG_HANDWRITTEN_DATA as blobImgHandwrittenData, hd.TXT_FIELD_NAME as txtFieldName, hd.ID_EVENT as idEvent, hd.ID_CASE as idCase, \
hd.ID_STAGE as idStage,  (case when hd.BIN_TRANSLATED_NOTES is null then 'N'  Else  'Y' End ) as strIsConverted, \
hd.DT_CREATED as dtCreated, hd.DT_LAST_UPDATE as dtLastUpdate, s.NM_STAGE as nmStage from HANDWRITTEN_DATA hd, STAGE s WHERE hd.ID_STAGE = s.ID_STAGE

HandWritingDaoImpl.fetchHandwrittenDataForKeyEstm=SELECT hd.ID_HANDWRITTEN_DATA as txtKeyValue, hd.CD_NOTES_TYPE as cdNotesType, BIN_TRANSLATED_NOTES as txtTranslatedNotes, \
  hd.IMG_HANDWRITTEN_DATA as blobImgHandwrittenData, hd.TXT_FIELD_NAME as txtFieldName, hd.ID_EVENT as idEvent, hd.ID_CASE as idCase, s.ID_STAGE as idStage, \
  (case when hd.BIN_TRANSLATED_NOTES is null then 'N' Else 'Y' End ) as strIsConverted, \
  hd.DT_CREATED as dtCreated, hd.DT_LAST_UPDATE as dtLastUpdate, s.NM_STAGE as nmStage from HANDWRITTEN_DATA hd, STAGE s \
  WHERE hd.ID_CASE = s.ID_CASE AND s.ID_STAGE = hd.ID_STAGE AND hd.ID_HANDWRITTEN_DATA =:dataKey

HandWritingDaoImpl.fetchHandwrittenDataForKey=SELECT hd.ID_HANDWRITTEN_DATA as txtKeyValue, hd.CD_NOTES_TYPE as cdNotesType, BIN_TRANSLATED_NOTES as txtTranslatedNotes, \
  hd.IMG_HANDWRITTEN_DATA as blobImgHandwrittenData, hd.TXT_FIELD_NAME as txtFieldName, hd.ID_EVENT as idEvent, hd.ID_CASE as idCase, hd.ID_STAGE as idStage, \
  (case   when  hd.BIN_TRANSLATED_NOTES is null then 'N'  Else  'Y' End ) as strIsConverted, \
  hd.DT_CREATED as dtCreated, hd.DT_LAST_UPDATE as dtLastUpdate, s.NM_STAGE as nmStage from HANDWRITTEN_DATA hd, STAGE s \
  WHERE hd.ID_STAGE = s.ID_STAGE AND hd.ID_HANDWRITTEN_DATA =:dataKey


HandWritingDaoImpl.fetchLinkedNotesForStages = 	SELECT H.ID_HANDWRITTEN_DATA AS idHandwrittenData, H.DT_CREATED AS dtCreated,\
												H.DT_LAST_UPDATE AS dtLastUpdate,H.TXT_FIELD_NAME AS txtFieldName, \
												T.TXT_TASK_DECODE AS txtTaskDecode, \
												E.ID_EVENT AS idEvent, C.ID_CASE AS idCase, C.NM_CASE AS nmCase, S.ID_STAGE AS idStage, \
												S.NM_STAGE AS nmStage, S.CD_STAGE AS cdStage, E.CD_TASK AS cdTask FROM HANDWRITTEN_DATA H, Event E, STAGE S, CAPS_CASE C, TASK T \
											   	WHERE E.ID_EVENT_STAGE = S.ID_STAGE and E.ID_CASE = C.ID_CASE  \
  											   	AND E.CD_TASK = T.CD_TASK AND H.ID_EVENT = E.ID_EVENT AND H.TXT_FIELD_NAME IS NOT NULL
  											   	
HandWritingDaoImpl.fetchStageName = SELECT NM_WKLD_STAGE AS idWkldStage, ID_WKLD_CASE AS idWkldCase FROM WORKLOAD WHERE ID_WKLD_STAGE = :idStage

HandWritingDaoImpl.fetchStageInfo = SELECT C.ID_CASE AS caseId, S.NM_STAGE AS stageName, C.NM_CASE AS caseName FROM STAGE S, CAPS_CASE C WHERE S.ID_CASE = C.ID_CASE AND ID_STAGE = :idStage

HandWritingDaoImpl.fetchCaseIdForStageId=SELECT ID_CASE AS caseId FROM STAGE WHERE ID_STAGE = :idStage		

contactGuideDaoImpl.isPrincipalParentSql 	= 	SELECT cd_person_marital_status as cdPersonMaritalStatus, \
												cd_stage_pers_rel_int as cdStagePersRelInt \
                                           		FROM person p, stage_person_link sp \
                                           		WHERE p.id_person = sp.id_person \
                                           		AND sp.id_stage = :idStage \
                                           		AND p.id_person = :idPerson  \
                                          		AND sp.cd_stage_pers_rel_int IN ('AB', 'AD', 'AP', 'PA', 'PB', 'PD', 'ST', 'PG')
                                          		
ContactGuideDaoImpl.princChildPCSql	=	select distinct s2.id_stage \
										from stage_person_link l2, stage s2 \
										where l2.id_stage = s2.id_stage \
										and s2.dt_stage_start < (select dt_contact_occurred from contact where id_event = :idEvent1 ) \
										and s2.dt_stage_close > (select dt_contact_occurred from contact where id_event = :idEvent2 ) \
										and s2.cd_stage = 'SUB' \
										and l2.cd_stage_pers_role = 'PC' \
										and l2.id_person = :idPerson        
										
ContactGuideDaoImpl.princChildInfoWhenStageCloseSql	=	SELECT cd_person_marital_status as cdPersonMaritalStatus, cd_stage_pers_rel_int as cdStagePersRelInt \
														FROM person p, stage_person_link sp \
														WHERE p.id_person = sp.id_person \
														AND sp.id_stage = :idStageOut \
														AND p.id_person = :idPersonOut \
														AND (select trunc((months_between((select dt_last_update from event_person_link where id_person = :idPersonIn and id_event = :idEventIn), p1.DT_PERSON_BIRTH ))/12) \
														from person p1 where id_person= :idPerson) < 18 \
														AND sp.cd_stage_pers_rel_int NOT IN \
														('AB', 'AD', 'AP', 'PA', 'PB', 'PD', 'ST', 'PG') 										                                  		
														
ContactGuideDaoImpl.princHasSUBStageSql	=	SELECT s.id_stage AS idStage \
                                            FROM stage_person_link sp, stage s \
                                            WHERE sp.id_person = :idPerson \
                                            AND sp.id_stage = s.id_stage \
                                            AND s.cd_stage = 'SUB' \
                                            AND sp.cd_stage_pers_role = 'PC' AND dt_stage_close is null														
                                            
 ContactGuideDaoImpl.isPrincChildSql	=	SELECT cd_person_marital_status as cdPersonMaritalStatus, cd_stage_pers_rel_int as cdStagePersRelInt \
                                            FROM person p, stage_person_link sp \
                                            WHERE p.id_person = sp.id_person \
                                            AND sp.id_stage = :idStage \
                                            AND p.id_person = :idPerson \
                                            AND (select trunc((months_between(sysdate, p1.DT_PERSON_BIRTH ))/12) \
                                            from person p1 where id_person= :idPersonIn) < 18 \
                                            AND sp.cd_stage_pers_rel_int NOT IN \
                                            ('AB', 'AD', 'AP', 'PA', 'PB', 'PD', 'ST', 'PG')
													
													
ContactGuideDaoImpl.isPrincChildMpsSql	=	SELECT cd_person_marital_status as cdPersonMaritalStatus, cd_stage_pers_rel_int as cdStagePersRelInt \
                                            FROM person p, stage_person_link sp \
                                            WHERE p.id_person = sp.id_person \
                                            AND sp.id_stage = :idStage \
                                            AND p.id_person = :idPerson \
                                            AND (select cast(((( now() - p1.DT_PERSON_BIRTH ) - MOD(( now() -p1.DT_PERSON_BIRTH ),365) ) / 365) as integer) \
                                            from person p1 where id_person= :idPersonIn) < 18 \
                                            AND sp.cd_stage_pers_rel_int NOT IN \
                                            ('AB', 'AD', 'AP', 'PA', 'PB', 'PD', 'ST', 'PG')
#Added for SSCCReferral												
SSCCRefDaoImpl.selectStage = SELECT STAGE.ID_STAGE,STAGE.ID_CASE,STAGE.ID_SITUATION,STAGE.NM_STAGE,STAGE.CD_STAGE,STAGE.CD_STAGE_TYPE,STAGE.CD_STAGE_PROGRAM, \
 						STAGE.CD_STAGE_CLASSIFICATION,STAGE.DT_STAGE_START,STAGE.IND_STAGE_CLOSE,STAGE.CD_STAGE_REASON_CLOSED,STAGE.ID_UNIT,CAPS_CASE.NM_CASE,\
						STAGE.DT_STAGE_CLOSE FROM STAGE LEFT OUTER JOIN CAPS_CASE ON STAGE.ID_CASE = CAPS_CASE.ID_CASE WHERE ID_STAGE = :idStage

CaseUtils.getIncomingCallDate=\ 
CaseUtils.getStagesByType = SELECT STAGE.ID_STAGE as idStage, STAGE.ID_CASE as idCase, STAGE.ID_SITUATION as idSituation, STAGE.NM_STAGE as nmStage, STAGE.CD_STAGE as cdStage, STAGE.CD_STAGE_TYPE as cdStageType, \
 							STAGE.CD_STAGE_PROGRAM as cdStageProgram,STAGE.CD_STAGE_CLASSIFICATION as cdStageClassification, STAGE.DT_STAGE_START as dtStageStart,STAGE.IND_STAGE_CLOSE as indStageClose, \
 							STAGE.CD_STAGE_REASON_CLOSED as cdStageReasonClosed , STAGE.ID_UNIT as idUnit,  CAPS_CASE.NM_CASE as nmCase, STAGE.DT_STAGE_CLOSE  as dtStageClose \
							FROM STAGE LEFT OUTER JOIN CAPS_CASE ON STAGE.ID_CASE = CAPS_CASE.ID_CASE WHERE

CaseUtils.hasStageAccess= SELECT UNIT_EMP_LINK.ID_PERSON FROM STAGE_PERSON_LINK, UNIT_EMP_LINK WHERE UNIT_EMP_LINK.ID_PERSON = :idPerson AND STAGE_PERSON_LINK.ID_STAGE = :idStage  AND STAGE_PERSON_LINK.ID_PERSON = :idPerson \
							AND STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN ( 'PR', 'SE', 'HP' ) UNION SELECT EMP_TEMP_ASSIGN.ID_PERSON_DESIGNEE FROM EMP_TEMP_ASSIGN, STAGE_PERSON_LINK WHERE EMP_TEMP_ASSIGN.ID_PERSON_DESIGNEE = :idPerson \
							AND NOT EMP_TEMP_ASSIGN.DT_ASSIGN_EXPIRATION <= SYSDATE  AND STAGE_PERSON_LINK.ID_STAGE = :idStage  AND STAGE_PERSON_LINK.ID_PERSON = EMP_TEMP_ASSIGN.ID_PERSON_EMP AND STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN ( 'PR', 'SE', 'HP' ) \
							UNION \
							SELECT UNIT_EMP_LINK.ID_PERSON FROM UNIT_EMP_LINK, ( SELECT UNIT_EMP_LINK.ID_UNIT FROM UNIT_EMP_LINK, ( SELECT STAGE_PERSON_LINK.ID_PERSON FROM STAGE_PERSON_LINK WHERE STAGE_PERSON_LINK.ID_STAGE = :idStage  AND \
							STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN ( 'PR', 'SE', 'HP' ) ) STAGE_WORKERS WHERE UNIT_EMP_LINK.ID_PERSON = STAGE_WORKERS.ID_PERSON UNION SELECT ID_UNIT FROM STAGE WHERE ID_STAGE = :idStage ) STAGE_UNITS  WHERE \
							UNIT_EMP_LINK.ID_PERSON = :idPerson  AND UNIT_EMP_LINK.ID_UNIT = STAGE_UNITS.ID_UNIT AND UNIT_EMP_LINK.CD_UNIT_MEMBER_ROLE IN ( '20', '30', '40' ) \
							UNION \
							SELECT UNIT_EMP_LINK.ID_PERSON FROM UNIT_EMP_LINK, EMP_TEMP_ASSIGN, ( SELECT UNIT_EMP_LINK.ID_UNIT FROM UNIT_EMP_LINK, ( SELECT STAGE_PERSON_LINK.ID_PERSON FROM STAGE_PERSON_LINK  WHERE STAGE_PERSON_LINK.ID_STAGE = :idStage \
							AND STAGE_PERSON_LINK.CD_STAGE_PERS_ROLE IN ( 'PR', 'SE', 'HP' ) ) STAGE_WORKERS WHERE UNIT_EMP_LINK.ID_PERSON = STAGE_WORKERS.ID_PERSON  UNION SELECT ID_UNIT FROM STAGE WHERE ID_STAGE = :idStage ) STAGE_UNITS  \
							WHERE UNIT_EMP_LINK.ID_PERSON = EMP_TEMP_ASSIGN.ID_PERSON_EMP AND UNIT_EMP_LINK.ID_UNIT = STAGE_UNITS.ID_UNIT AND UNIT_EMP_LINK.CD_UNIT_MEMBER_ROLE IN ( '20', '30', '40' ) AND EMP_TEMP_ASSIGN.ID_PERSON_DESIGNEE = :idPerson \
							 AND NOT EMP_TEMP_ASSIGN.DT_ASSIGN_EXPIRATION <= SYSDATE 

CaseUtils.getStageDetails = SELECT STAGE.ID_STAGE as idStage, \
STAGE.ID_CASE as idCase, \
STAGE.ID_SITUATION as idSituation, \
STAGE.NM_STAGE as nmStage, \
STAGE.CD_STAGE as cdStage, \
STAGE.CD_STAGE_TYPE as cdStageType, \
STAGE.CD_STAGE_PROGRAM as cdStageProgram, \
STAGE.CD_STAGE_CLASSIFICATION as cdStageClassification, \
STAGE.DT_STAGE_START as dtStageStart, \
STAGE.IND_STAGE_CLOSE as indStageClose, \
STAGE.CD_STAGE_REASON_CLOSED as cdStageReasonClosed, \
STAGE.ID_UNIT as idUnit, \
CAPS_CASE.NM_CASE as nmCase, \
STAGE.DT_STAGE_CLOSE as dtStageClose \
FROM STAGE LEFT OUTER JOIN CAPS_CASE  ON STAGE.ID_CASE = CAPS_CASE.ID_CASE \
WHERE STAGE.ID_STAGE = :idStage

CaseUtils.getCaseCheckoutStatus = SELECT ID_WKLD_PERSON,CD_MOBILE_STATUS, CD_WKLD_STAGE_PERS_ROLE FROM   WORKLOAD WHERE \
								   CD_WKLD_STAGE_PERS_ROLE IN ('PR', 'SE') \
								   AND (   CD_WKLD_STAGE = 'INV'  \
						                 OR CD_WKLD_STAGE = 'SVC'  \
						                 OR CD_WKLD_STAGE = 'FPR'  \
						                 OR CD_WKLD_STAGE = 'SUB'  \
						                 OR CD_WKLD_STAGE = 'FSU'  \
						                 OR CD_WKLD_STAGE = 'FRE'  \
						                 OR CD_WKLD_STAGE = 'A-R')  \
						                 AND CD_MOBILE_STATUS IN ('OT', 'AI')  \
						                 AND ID_WKLD_STAGE = :idWkldStage 

EventUtilityDaoImpl.eventExists = SELECT COUNT(*) FROM EVENT WHERE \
									ID_EVENT_STAGE = :h_IdEventStage AND \
									CD_EVENT_TYPE = :h_CdEventType AND  \
									CD_TASK = :h_CdTask AND \
									CD_EVENT_STATUS= :h_CdEventStatus
									
Ccmn55dDaoImpl.getIDApproval=SELECT  A.ID_APPROVAL as ulIdApproval  FROM APPROVAL_EVENT_LINK A  WHERE A.ID_EVENT=:hostulIdEvent \


Ccmn57dDaoImpl.getApprovalEventLink=SELECT  A.ID_EVENT as hostulIdEvent,B.CD_TASK as hostszCdTask \
		  FROM EVENT B,APPROVAL_EVENT_LINK A \
		  WHERE A.ID_APPROVAL=:hostulIdApproval  \
		 AND A.ID_EVENT=B.ID_EVENT \

UpdateEventDaoImpl.updateEvent=UPDATE EVENT SET CD_EVENT_STATUS=:hostszCdEventStatus,DT_EVENT_MODIFIED=SYSDATE  WHERE ID_EVENT=:hostulIdEvent \


Ccmn88dDaoImpl.updateApproverStatus=UPDATE APPROVERS SET CD_APPROVERS_STATUS='INVD' \
		  WHERE CD_APPROVERS_STATUS='PEND'  \
		 AND ID_APPROVAL=:hI_ulIdApproval \ 

AddressDaoImpl.fetchCurrentPrimaryAddress=  SELECT apl.ID_PERSON as personId, pa.ADDR_PERS_ADDR_ST_LN_1 as streetLn1,\
pa.ADDR_PERS_ADDR_ST_LN_2 as streetLn2, pa.ADDR_PERSON_ADDR_ATTN as attention,\
pa.ADDR_PERSON_ADDR_CITY as city,pa.CD_PERSON_ADDR_STATE as state,\
  pa.CD_PERSON_ADDR_COUNTY as county,pa.ADDR_PERSON_ADDR_ZIP as zip,\
  apl.IND_PERS_ADDR_LINK_PRIMARY as primary,apl.IND_PERS_ADDR_LINK_INVALID as invalid,\
  apl.CD_PERS_ADDR_LINK_TYPE as addressType,apl.DT_PERS_ADDR_LINK_END as endDate,\
  apl.DT_PERS_ADDR_LINK_START as startDate,apl.ID_PERSON_ADDR as idPersonAddr,\
  apl.ID_ADDR_PERSON_LINK as idAddrPersonLink,apl.TXT_PERS_ADDR_CMNTS as txtAplComments,\
  apl.ID_PERSON_MERGE as idPersonMerge,apl.DT_LAST_UPDATE as dtLastUpdate  \
  FROM SNAPSHOT_HEADER SSH, SNAPSHOT_DTL SSD1, SNAPSHOT_DTL SSD2, SS_PERSON_ADDRESS PA, SS_ADDRESS_PERSON_LINK APL  \
    WHERE   SSH.ID_REFERENCE_DATA =:idReferenceData AND SSH.CD_SNAPSHOT_TYPE =:cdSnapshotType  \
    AND SSH.CD_ACTION_TYPE =:cdActionType  AND SSH.ID_OBJECT =:idObject  \
    AND SSD1.ID_SNAPSHOT_HEADER = SSH.ID_SNAPSHOT_HEADER  \
    AND SSD1.ID_SNAPSHOT_DTL = PA.ID_SNAPSHOT_DTL  \
    AND SSD2.ID_SNAPSHOT_HEADER = SSH.ID_SNAPSHOT_HEADER  \
    AND SSD2.ID_SNAPSHOT_DTL = APL.ID_SNAPSHOT_DTL  \
    AND PA.ID_PERSON_ADDR = APL.ID_PERSON_ADDR AND APL.IND_PERS_ADDR_LINK_PRIMARY = 'Y'  \
    AND APL.DT_PERS_ADDR_LINK_END = TO_DATE ('12/31/4712', 'MM/DD/YYYY') AND NVL (APL.IND_PERS_ADDR_LINK_INVALID, 'N') = 'N'  \
    AND APL.ID_PERSON =:idPerson    
								
AddressDaoImpl.isRmRsAddressExist	=  select count(*)  from person_address pa, address_person_link apl  \
												  where pa.id_person_addr = apl.id_person_addr  \
												   AND NVL (APL.DT_PERS_ADDR_LINK_END, TO_DATE('12/31/4712', 'mm/dd/yyyy')) = TO_DATE('12/31/4712', 'mm/dd/yyyy')	\
												   AND CD_PERS_ADDR_LINK_TYPE in ('RM', 'RS') AND apl.ID_PERSON = :idPerson
AddressDaoImpl.fetchCurrentPrimaryAddress1 = SELECT pa.ADDR_PERSON_ADDR_ZIP as zip, pa.CD_PERSON_ADDR_STATE as state, pa.ADDR_PERSON_ADDR_CITY as city, \
								pa.ADDR_PERS_ADDR_ST_LN_1 as streetLn1, pa.ADDR_PERS_ADDR_ST_LN_2 as streetLn2, pa.CD_PERSON_ADDR_COUNTY as county \
								FROM   PERSON_ADDRESS pa, ADDRESS_PERSON_LINK apl WHERE   pa.ID_PERSON_ADDR = apl.ID_PERSON_ADDR AND apl.IND_PERS_ADDR_LINK_PRIMARY = 'Y'  \
								AND apl.DT_PERS_ADDR_LINK_END = TO_DATE ('12/31/4712', 'MM/DD/YYYY') AND NVL (apl.IND_PERS_ADDR_LINK_INVALID, 'N') = 'N' \
								AND apl.ID_PERSON = :idPerson ORDER BY pa.DT_LAST_UPDATE
								
OnCallDaoImpl.getOnCallCnty = SELECT CD_ON_CALL_COUNTY as cdOnCallCounty,DT_LAST_UPDATE as dtLastUpdate \
								  	FROM ON_CALL_COUNTY \
								  	WHERE CD_ON_CALL_REGION =:cdRegn \
								    AND ID_ON_CALL = :idOnCall \
								  	ORDER BY CD_ON_CALL_COUNTY

Cinvc4dDaoImpl.setStgDetails = UPDATE Stage S SET S.dtStageStart=:hI_dtDtStageStart \
							   WHERE S.idStage=:hI_ulIdStage 
							   
 Cinvc7dDaoImpl.updateIncomingDetail =  UPDATE INCOMING_DETAIL A SET DT_INCOMING_CALL_DISPOSED = :dtIncomingCallDisposed  WHERE A.ID_STAGE = \
  								( SELECT B.ID_STAGE FROM STAGE B WHERE B.ID_CASE = :idCase AND B.CD_STAGE = :cdStage )
  								
 Cinvc9dDaoImpl.updateEvent =   UPDATE EVENT SET DT_EVENT_OCCURRED = :dtEventOccurred WHERE TXT_EVENT_DESCR = :txtEventDescr AND ID_EVENT_STAGE = 
								( SELECT ID_PRIOR_STAGE  FROM STAGE_LINK WHERE ID_STAGE = :idStage )	
								
Csys20DaoImpl.getEarliestContactDate=SELECT MIN( DT_CONTACT_OCCURRED as dtContactOccured ) \
                                             FROM CONTACT A, \
                                                  STAGE B \
                                            WHERE A.ID_CONTACT_STAGE = B.ID_STAGE AND \
                                                  A.ID_CASE = B.ID_CASE AND \
                                                  A.ID_CONTACT_STAGE = :idContactStage AND \
                                                  A.CD_CONTACT_TYPE  = :cdContactType"
                                                  
Cseca9dDaoImpl.getIdPersonForDifferentRole = SELECT B.ID_STAGE as idStage, \
                                                  A.ID_PERSON as idPerson \
                                             FROM STAGE_PERSON_LINK A, \
                                                  STAGE B \
                                            WHERE A.ID_STAGE = B.ID_STAGE AND \
                                                  B.ID_CASE = :idCase AND \
                                                  B.CD_STAGE = :cdStage AND \
                                                  B.DT_STAGE_CLOSE IS NULL AND \
                                                  A.CD_STAGE_PERS_ROLE = :cdStagePersRole AND \
                                                  A.ID_PERSON IN ( SELECT ID_PERSON \
                                                                    FROM STAGE_PERSON_LINK \
                                                                   WHERE ID_STAGE = :idStage AND \
                                                                         CD_STAGE_PERS_ROLE = :persRole )						

Clsc16dDaoImpl.getAllegationFacilAllegPerson =	  SELECT A.ID_ALLEGATION as idAllegation, \
                                                   A.DT_LAST_UPDATE as dtLastUpdate, \
                                                    A.ID_ALLEGATION_STAGE as idAllegationStage, \
                                                    A.ID_VICTIM as idVictim, \
                                                   A.ID_ALLEGED_PERPETRATOR as idAllegedPerpetrator, \
                                                    A.CD_ALLEG_INCIDENT_STAGE as cdAllegIncidentStage, \
                                                    A.TXT_ALLEG_DURATION as txtAllegDuration, \
                                                    A.CD_ALLEG_TYPE as cdAllegType, \
                                                    A.CD_ALLEG_DISPOSITION as cdAllegDisposition, \
                                                    A.CD_ALLEG_SEVERITY as cdAllegSeverity, \
                                                    A.IND_ALLEG_CANCEL_HIST as indAllegCancelHist, \
                                                    F.IND_FACIL_ALLEG_CANCEL_HIST as indFacilAllegCancelHist, \
                                                    F.CD_FACIL_ALLEG_EVENT_LOC as cdFacilAllegEventLoc, \
                                                    F.CD_FACIL_ALLEG_CLSS as facilAllegInvClass, \
                                                    F.CD_FACIL_ALLEG_CLSS_SUPR as cdFacilAllegClssSupr, \
                                                    F.CD_FACIL_ALLEG_DISP_SUPR as cdFacilAllegDispSupr, \
                                                    F.CD_FACIL_ALLEG_SRC as cdFacilAllegSrc, \
                                                    F.CD_FACIL_ALLEG_SRC_SUPR as cdFacilAllegSrcSupr, \
                                                    F.DT_FACIL_ALLEG_SUPR_REPLY as dtFacilAllegSuprReply, \
                                                    F.DT_FACIL_ALLEG_INVSTGTR as dtFacilAllegInvstgtr, \
                                                    F.CD_FACIL_ALLEG_INJ_SER as cdFacilAllegInjSer, \
                                                    F.CD_FACIL_ALLEG_NEGL_TYPE as cdFacilAllegNeglType, \
                                                    F.DT_FACIL_ALLEG_INCIDENT as dtFacilAllegIncident, \
                                                    F.IND_FACIL_ALLEG_AB_OFF_GR as indFacilAllegAbOffGr, \
                                                    F.IND_FACIL_ALLEG_SUPVD as indFacilAllegSupvd, \
                                                    F.TXT_FACIL_ALLEG_CMNTS as txtFacilAllegCmnts, \
                                                    F.NBR_FACIL_ALLEG_MHMR as facilAllegMHMR, \
                                                    P.ID_PERSON as idPerson, \
                                                    P.CD_PERSON_SEX as cdPersonSex, \
                                                    P.NM_PERSON_FULL as nmPersonFull, \
                                                    P.NBR_PERSON_AGE as personAge, \
                                                    P.DT_PERSON_DEATH as dtPersonDeath, \
                                                    P.DT_PERSON_BIRTH as dtPersonBirth, \
                                                    P.CD_PERSON_RELIGION as cdPersonReligion, \
                                                    P.CD_PERSON_CHAR as cdPersonChar, \
                                                    P.IND_PERSON_DOB_APPROX as indPersonDobApprox , \
                                                    P.CD_PERSON_LIV_ARR as cdPersonLivArr, \
                                                    P.CD_PERS_GUARD_CNSRV as cdPersGuardCnsrv, \
                                                    P.CD_PERSON_STATUS as cdPersonStatus, \
                                                    P.CD_PERSON_DEATH as cdPersonDeath, \
                                                    P.CD_PERSON_MARITAL_STATUS as cdPersonMaritalStatus, \
                                                    P.TXT_PERSON_OCCUPATION as txtOccupation, \
                                                    P.CD_PERSON_LANGUAGE as cdPersonLanguage, \
                                                    P.CD_PERSON_ETHNIC_GROUP as cdPersonEthnicGroup, \
                                                    P.IND_PERS_CANCEL_HIST as indPersCancelHist, \
                                                    P.NM_PERSON_FIRST as nameFirst, \
                                                    P.NM_PERSON_MIDDLE as nameMiddle, \
                                                    P.NM_PERSON_LAST as nameLast, \
                                                    P.CD_PERSON_SUFFIX  as cdNameSuffix \
                                               FROM FACIL_ALLEG F, \
                                                    PERSON P, \
                                                    ALLEGATION A \
                                             WHERE A.ID_ALLEGATION_STAGE =:idAllegationStage AND \
                                                    A.ID_ALLEGATION = F.ID_ALLEGATION AND \
                                                    A.ID_VICTIM = P.ID_PERSON \
                                           ORDER BY A.CD_ALLEG_TYPE
                                           
                                           
Cinv44dDaoImpl.getStagesOverallDispFromApsInvDtl=SELECT ID_EVENT as ulIdEvent, \
                                                  ID_APS_STAGE as ulIdStage, \
                                                  CD_APS_INVST_FINAL_PRTY as szCdApsInvstFinalPrty, \
                                                  CD_APS_INVST_OVRALL_DISP as szcdApsInvstOvrallDisp, \
                                                  DT_APS_INVST_BEGUN as dtDtApsInvstBegun, \
                                                  DT_APS_INVST_CLT_ASSMT as dtDtApsInvstCltAssmt, \
                                                  DT_APS_INVST_CMPLT as dtDtApsInvstCmplt, \
                                                  DT_LAST_UPDATE as tsLastUpdate, \
                                                  CD_CLOSURE_TYPE as szCdClosureType, \
                                                  IND_EXT_DOC as bIndExtDoc, \
                                                  IND_LEGAL_ACTION as bIndLegalAction, \
                                                  IND_FAM_VIOLENCE as bIndFamViolence, \
                                                  IND_ECS as bIndECS, \
                                                  IND_CLIENT as bIndClient, \
                                                  TXT_CLIENT_OTHER as szTxtClientOther, \
                                                  CD_INTERPRETER as szCdInterpreter, \
                                                  TXT_METHOD_COMM as szTxtMethodComm, \
                                                  TXT_TRNS_NAME_RLT as szTxtTrnsNameRlt, \
                                                  TXT_ALT_COMM as szTxtAltComm, \
                                                  DT_CLIENT_ADVISED as dtClientAdvised, \
                                                  ID_PROGRAM_ADMIN_PERSON as idProgramAdminPerson, \
                                                  ID_ENTITY as idEntity \
                                             FROM APS_INVST_DETAIL \
                                            WHERE ID_APS_STAGE = :idApsStage
                                            
Cinvf2dDaoImpl.doesInitialContactExist = SELECT COUNT(1) AS count FROM CONTACT WHERE ID_CONTACT_STAGE  = :idStage \
						AND   CD_CONTACT_PURPOSE = 'BNTL'
						
Cmsc14dDaoImpl.getUlSysNbrValidationMsg= SELECT COUNT(*) FROM (SELECT DISTINCT P.CD_PAL_SERVICE_TYPE \
                                             FROM PAL_SERVICE P \
                                            WHERE P.ID_PAL_SERVICE_STAGE = :ulIdStage AND \
                                                  P.CD_PAL_SERVICE_CATGORY = :cpalsvccTrn \
                                            UNION \
                                           SELECT DISTINCT D.CD_SVC_DTL_SERVICE \
                                             FROM DELVRD_SVC_DTL D, \
                                                  PERSON_MERGE_VIEW V \
                                            WHERE V.ID_PERSON_INPUT = :ulIdPerson AND \
                                                  D.ID_SVC_DTL_PERSON = V.ID_PERSON_OUTPUT AND \
                                                  D.CD_SVC_DTL_SERVICE IN ( :csvcCodeList ) )
                                                  
                                                  
Csesc2dDaoImpl.getCriminalCheckRecords = SELECT ID_REC_CHECK_PERSON as ulIdPerson FROM CRIMINAL_HISTORY C,RECORDS_CHECK R \
											WHERE R.ID_STAGE=:hI_ulIdStage AND C.ID_REC_CHECK=R.ID_REC_CHECK \
											AND C.CD_CRfroIM_HIST_ACTION IS null
											
Csys11dDaoImpl.getContactDetails = SELECT A.ID_CONTACT_WORKER as idContact, \
									B.NM_PERSON_FULL as nmPerson, \
									A.CD_CONTACT_LOCATION as cdContactLoc, \
									A.CD_CONTACT_METHOD as cdContMeth, \
									A.CD_CONTACT_OTHERS as cdCntOthr, \
									A.CD_CONTACT_PURPOSE as cdCntPurp, \
									A.CD_CONTACT_TYPE as cdCntTyp, \
									A.DT_CONTACT_OCCURRED as dtCntOccr, \
									TO_CHAR(A.DT_CONTACT_OCCURRED, 'HH:MI AM') as tmScrTmCntct, \
									A.IND_CONTACT_ATTEMPTED as indCntAttmt, \
									A.DT_CNTCT_MNTHLY_SUMM_BEG as dtMntlsumBg, \
									A.DT_CNTCT_MNTHLY_SUMM_END as dtCntMntSumEnd, \
									A.DT_LAST_UPDATE as dtLstUpdate, \
									C.DT_LAST_UPDATE as dtLstUpdt, \
									A.CD_RSN_SCROUT as cdRsnScrOut, \
									A.IND_REC_CONS as indRecCons, \
									A.TXT_KIN_CAREGIVER as txtKinCareGvr, \
									A.CD_RSN_AMTNE as cdRsnAmtne, \
									A.AMT_NEEDED as AmtNeeded, \
									A.IND_SIBLING_VISIT as indSibVst, \
									A.CD_CHILD_SAFETY as cdChildSafty, \
									A.CD_PEND_LEGAL_ACTION as cdPendLegActn, \
									A.IND_PRINCIPAL_INTERVIEW as indPrncplIntrview, \
									A.CD_PROF_COLLATERAL as cdProfColatrl, \
									A.CD_ADMINISTRATIVE as cdAdminstrat, \
									A.TXT_COMMENTS as txtCmmnts, \
									A.IND_ANNOUNCED as indAnnced, \
									A.IND_SAF_PLAN_COMP as indSafPln, \
									A.IND_FAM_PLAN_COMP as indFamPlnComp, \
									A.IND_SAF_CON_RESOLV as indSafConResolv, \
									A.EST_CONTACT_HOURS as estCntHr, \
									A.EST_CONTACT_MINS as estCntMin \
									FROM PERSON B, \
								           EVENT C, \
								           CONTACT A \
								    WHERE  A.ID_EVENT  (+)  = :idEvent \
								    AND    B.ID_PERSON (+)  = A.ID_CONTACT_WORKER \
								    AND    C.ID_EVENT  (+)  = A.ID_EVENT
									
  Cinvc5dDaoImpl.updateStage = UPDATE STAGE \
                                              SET DT_STAGE_CLOSE = :dtStageClose \
                                            WHERE ID_STAGE = ( SELECT ID_PRIOR_STAGE \
                                                                FROM STAGE_LINK \
                                                              WHERE ID_STAGE = :idStage )
                                                              
ContactOccuredDaoImpl.csys15dQueryDao=SELECT  DT_CONTACT_OCCURRED as dtDTContactOccurred FROM CONTACT  \
 WHERE   NVL(DT_CONTACT_OCCURRED, TO_DATE('12/31/4712','MM/DD/YYYY')) =  \
          (SELECT NVL(MIN(DT_CONTACT_OCCURRED), TO_DATE('12/31/4712','MM/DD/YYYY'))  \
          FROM CONTACT B WHERE B.ID_CONTACT_STAGE = :contactIds)  AND ID_CONTACT_STAGE = :idContactStage
          
ContactPersonDaoImpl.getPersonDetailsForEvent=SELECT A.NM_PERSON_FULL as szNmPersonFull,  A.ID_PERSON as ulIdPerson  FROM PERSON A,  \
                                                  EVENT_PERSON_LINK B  WHERE B.ID_EVENT =:idEvent AND \
                                                  A.ID_PERSON = B.ID_PERSON  
                                                  
DigitalPictureDaoImpl.getCaseids = SELECT DISTINCT W.ID_WKLD_CASE AS idCase, C.NM_CASE AS nmCase FROM WORKLOAD W, CAPS_CASE C, STAGE S \
   WHERE ID_WKLD_PERSON = :idPerson  AND CD_WKLD_STAGE_PERS_ROLE IN ('PR', 'SE') \
    AND W.ID_WKLD_CASE = C.ID_CASE \
    AND W.ID_WKLD_STAGE = S.ID_STAGE \
     AND S.CD_STAGE IN ('KIN', 'ADO', 'AOC', 'ARF', 'FAD', 'FPR', 'FRE', 'FSU', 'INV', 'PAD', 'SUB', 'SVC')  
     
contactDetailsDaoImpl.deleteFtRlsInfoRpt=DELETE FROM FT_RLS_INFO_RPT WHERE ID_EVENT =:idEvent
  
contactDetailsDaoImpl.deleteRlsInfoRptCPSByRptId=DELETE FROM FT_RLS_INFO_RPT_CPS WHERE ID_FT_RLS_INFO_RPT =:rptId

contactDetailsDaoImpl.deleteRlsInfoAllegDispositionByRptId=DELETE FROM FT_RLS_INFO_RPT_ALLEG_DISP WHERE ID_FT_RLS_INFO_RPT =:rptId

contactDetailsDaoImpl.deleteRlsInfoRptRsrcByRptId=DELETE FROM FT_RLS_INFO_RPT_RSRC WHERE ID_FT_RLS_INFO_RPT =:rptId

contactDetailsDaoImpl.deleteRsrcViolationByRptId=DELETE FROM FT_RLS_INFO_RPT_RSRC_VOLTNS WHERE ID_FT_RLS_INFO_RPT =:rptId

contactDetailsDaoImpl.deleteRlsInfoRptCPAByRptId= DELETE FROM FT_RLS_INFO_RPT_CPA WHERE ID_FT_RLS_INFO_RPT =:rptId

contactDetailsDaoImpl.reasonRlngshmntCodes= SELECT CD_CODE as code,SDS_CODE as decode FROM CODE_TABLE_ROW WHERE NM_TABLE =:nmtableString ORDER BY CD_CODE
					                         
  
EventUtilityDaoImpl.getINVConclusionStatus = SELECT CD_EVENT_STATUS as cdEventStatus \
FROM EVENT \
	WHERE CD_EVENT_TYPE = 'CCL' \
	AND   ID_EVENT_STAGE IN \
              ( SELECT ID_STAGE \
         	FROM   STAGE \
	        WHERE ID_CASE = :idCase \
	        AND   CD_STAGE= 'INV' \
                AND   DT_STAGE_CLOSE IS NULL)       
                
ServAuthRetrieveDaoImpl.getSvcAuthDtTerm = SELECT A.DT_SVC_AUTH_DTL_TERM as dtSvcAuthDtlTerm \
	FROM 	EVENT 			C, \
		STAGE			D, \
		SVC_AUTH_EVENT_LINK	B, \
		SVC_AUTH_DETAIL		A \
	WHERE	D.ID_CASE	=	:idCase \
	AND	D.ID_STAGE	=	C.ID_EVENT_STAGE \
	AND	C.ID_EVENT	=	B.ID_SVC_AUTH_EVENT \
	AND	B.ID_SVC_AUTH	=	A.ID_SVC_AUTH \
	AND	trunc(A.DT_SVC_AUTH_DTL_TERM)  > trunc(sysdate)                                                                                                         								                                                             																			                                                  						                                                                                                                                         															  	
	
	
	NotifToParentEngDaoImpl.getStageReviewed =    SELECT A.CD_ADMIN_ALLEG_TYPE as cdAdminAllegType, \
                                                 A.CD_ADMIN_ALLEG_DISPOSTIION as cdAdminAllegDispostion, \
                                          A.CD_ADMIN_ALLEG_SEVERITY as cdAdminAllegSeverity, \
                                                 A.CD_ADMIN_ALLEG_CLSS as cdAdiminAllegClss, \
                                          N.ID_PERSON as idPerson, \
                                                 N.NM_NAME_FIRST as nmNameFirst, \
                                         N.NM_NAME_LAST as nmNameLast, \
                                          N.NM_NAME_MIDDLE as nmNameMiddle, \
                                                 N.CD_NAME_SUFFIX as cdNameSuffix \
                                                 FROM    ADMIN_ALLEGATION    A, \
                                          NAME            N  \
                                                 WHERE   A.ID_ADMIN_ALLEG_AR_STAGE   =  :idStage \
                                                 AND N.ID_PERSON         =   A.ID_ADMIN_ALLEG_VICTIM \
                                                 AND trunc(N.DT_NAME_START_DATE) <=  :dtNameEndDate \
                                                 AND trunc(N.DT_NAME_END_DATE)   > :dtNameEndDate  \
                                                 AND N.IND_NAME_PRIMARY      =   'Y' \
                                                 AND A.IND_ADMIN_ALLEG_PRIOR     =  :indAdminAllegPrior \
                                                 ORDER BY N.NM_NAME_LAST, \
                                          N.NM_NAME_FIRST, \
                                                   N.NM_NAME_MIDDLE, \
                                                  N.CD_NAME_SUFFIX 
                                  
NotifToParentEngDaoImpl.getPrimaryWorker = SELECT P.ID_PERSON as idPerson \
        FROM  STAGE_PERSON_LINK P \
        WHERE P.ID_STAGE = :idStage \
        AND   (P.CD_STAGE_PERS_ROLE = :cdHpStagePersRole \
           OR P.CD_STAGE_PERS_ROLE = :cdPrStagePersRole )

NotifToParentEngDaoImpl.getAdminReview = SELECT \
											A.ID_EVENT as idEvent, \
											A.DT_LAST_UPDATE as dtLastUpdate, \
											A.ID_PERSON_REQUESTOR as idPerson, \
											A.ID_STAGE as idStage, \
											A.ID_STAGE_RELATED as idStageRelated, \
											A.CD_ADMIN_RV_APPEAL_RESULT as cdAdminRvAppealResult, \
											A.CD_ADMIN_RV_APPEAL_TYPE as cdAdminRvAppealType, \
											A.CD_ADMIN_RV_AUTH as cdAdminRvAuth, \
											A.CD_ADMIN_RV_STATUS as cdAdminRvStatus, \
											A.DT_ADMIN_RV_APPEAL_NOTIF as dtAdminRvAppealNotif, \
											A.DT_ADMIN_RV_APPEAL_REVIEW as dtAdminRvAppealReview, \
											A.DT_ADMIN_RV_DUE as dtAdminRvDue, \
											A.DT_ADMIN_RV_EMGCY_REL as dtAdminRvEmgcyRel, \
											A.DT_ADMIN_RV_HEARING as dtAdminRvHearing, \
											A.DT_ADMIN_RV_REQ_APPEAL as dtAdminRvReqAppeal, \
											A.IND_ADMIN_RV_EMGCY_REL as indAdminRvEmgcyRel \
										   FROM     ADMIN_REVIEW   A \
										   WHERE    A.ID_STAGE = :idStage
										   
WorkloadDao.getPriorityTracking = SELECT S.ID_PRIORITY_TRACKING as idPriorityTracking,S.ID_STAGE as idStage,S.ID_PERSON as idPerson,S.CD_STAGE_CURR_PRIORTY as cdStageCurrPriority,\
									  S.CD_STAGE_PREV_PRIORTY as cdStageInitialPriority,S.CD_STAGE_RSN_PRIORTY_CHGD as cdReasonChanged,\
									  S.DT_START as dtStart,S.DT_END as dtEnd,S.DT_CREATED as dtCreated,S.ID_CREATED_PERSON as idCreatedPerson,S.DT_LAST_UPDATE as dtLastUpadte, \
									  S.ID_LAST_UPDATE_PERSON as idLastUpdatePerson,S.DT_PURGED as dtPurge ,p.NM_PERSON_FULL as nmPersonFull FROM PRIORITY_TRACKING S,PERSON P \
									  WHERE P.ID_PERSON=S.ID_LAST_UPDATE_PERSON and S.ID_STAGE=:idStage										   

ServAuthRetrieveDaoImpl.getSVCAuthDetailRecordSql = SELECT  \
													SAD.ID_SVC_AUTH_DTL as idSvcAuthDtl,  \
													SAD.ID_SVC_AUTH as idSvcAuth,  \
													SAD.ID_PERSON as idPerson,  \
													SAD.DT_LAST_UPDATE as dtLastUpdate,  \
													SAD.CD_SVC_AUTH_DTL_AUTH_TYPE as cdSvcAuthDtlAuthType,  \
													SAD.CD_SVC_AUTH_DTL_PERIOD as cdSvcAuthDtlPeriod,  \
													SAD.CD_SVC_AUTH_DTL_SVC as cdSvcAuthDtlSvc,  \
													SAD.CD_SVC_AUTH_DTL_UNIT_TYPE as cdSvcAuthDtlUnitType,  \
													SAD.DT_SVC_AUTH_DTL as dtSvcAuthDtl,  \
													SAD.DT_SVC_AUTH_DTL_BEGIN as dtSvcAuthDtlBegin,  \
													SAD.DT_SVC_AUTH_DTL_END as dtSvcAuthDtlEnd,  \
													SAD.DT_SVC_AUTH_DTL_TERM as dtSvcAuthDtlTerm,  \
													SAD.DT_SVC_AUTH_DTL_SHOW as dtSvcAuthDtlShow, \
													SAD.NBR_SVC_AUTH_DTL_FREQ as nbrSvcAuthDtlFreq,  \
													SAD.NBR_SVC_AUTH_DTL_LINE_ITM as nbrSvcAuthDtlLineItm,  \
													SAD.NBR_SVC_AUTH_DTL_SUG_UNIT as nbrSvcAuthDtlSugUnit,  \
													SAD.NBR_SVC_AUTH_DTL_UNITS_REQ as nbrSvcAuthDtlUnitsReq,  \
													SAD.AMT_SVC_AUTH_DTL_AMT_REQ as amtSvcAuthDtlAmtReq,  \
													SAD.AMT_SVC_AUTH_DTL_AMT_USED as amtSvcAuthDtlAmtUsed,  \
													SAD.NBR_SVC_AUTH_DTL_UNIT_RATE as nbrSvcAuthDtlUnitRate,  \
													SAD.NBR_SVC_AUTH_DTL_UNIT_USED as nbrSvcAuthDtlUnitUsed,  \
													P.CD_PERSON_SEX as cdPersonSex,  \
													P.NM_PERSON_FULL as nmPersonFull,  \
													P.NBR_PERSON_AGE as nbrPersonAge,  \
													P.DT_PERSON_DEATH as dtPersonDeath,  \
													P.DT_PERSON_BIRTH as dtPersonBirth,  \
													P.CD_PERSON_RELIGION as cdPersonReligion,  \
													P.CD_PERSON_CHAR as cdPersonChar,  \
													P.IND_PERSON_DOB_APPROX as indPersonDobApprox,  \
													P.CD_PERSON_LIV_ARR as cdPersonLivArr,  \
													P.CD_PERS_GUARD_CNSRV as cdPersGuardCnsrv,  \
													P.CD_PERSON_STATUS as cdPersonStatus,  \
													P.CD_PERSON_DEATH as cdPersonDeath,  \
													P.CD_PERSON_MARITAL_STATUS as cdPersonMaritalStatus,  \
													P.TXT_PERSON_OCCUPATION as txtPersonOccupation,  \
													P.CD_PERSON_LANGUAGE as cdPersonLanguage,  \
													P.CD_PERSON_ETHNIC_GROUP as cdPersonEthnicGroup,  \
													P.IND_PERS_CANCEL_HIST as indPersCancelHist,  \
													P.NBR_PERSON_ID_NUMBER as nbrPersonIdNumber,  \
													SPL.ID_STAGE_PERSON_LINK as idStagePersonLink,  \
													SPL.ID_STAGE as idStage,  \
													SPL.CD_STAGE_PERS_ROLE as cdStagePersRole,  \
													SPL.IND_STAGE_PERS_IN_LAW as indStagePersInLaw,  \
													SPL.CD_STAGE_PERS_TYPE as cdStagePersType,  \
													SPL.CD_STAGE_PERS_SEARCH_IND as cdStagePersSearchInd,  \
													SPL.TXT_STAGE_PERS_NOTES as txtStagePersNotes,  \
													SPL.DT_STAGE_PERS_LINK as dtStagePersLink,  \
													SPL.CD_STAGE_PERS_REL_INT as cdStagePersRelInt,  \
													SPL.IND_STAGE_PERS_REPORTER as indStagePersReporter,  \
													SPL.IND_STAGE_PERS_EMP_NEW as indStagePersEmpNew,  \
													P.NM_PERSON_FIRST as nmPersonFirst,  \
													P.NM_PERSON_MIDDLE as nmPersonMiddle,  \
													P.NM_PERSON_LAST as nmPersonLast,  \
													P.CD_PERSON_SUFFIX as cdPersonSuffix  \
													FROM    PERSON              P,  \
													STAGE_PERSON_LINK   SPL,  \
													PERSON_MERGE_VIEW   PMV,    \
													SVC_AUTH_DETAIL     SAD,  \
													EVENT               E,      \
													SVC_AUTH_EVENT_LINK SAEL    \
													WHERE   E.ID_EVENT                   = :idSvcAuth      \
													AND     SAEL.ID_SVC_AUTH_EVENT       = E.ID_EVENT            \
													AND     SAD.ID_SVC_AUTH              = SAEL.ID_SVC_AUTH      \
													AND     SAD.ID_PERSON                = PMV.ID_PERSON_INPUT   \
													AND     PMV.ID_PERSON_OUTPUT         = SPL.ID_PERSON         \
													AND     E.ID_EVENT_STAGE             = SPL.ID_STAGE         \
													AND     SAD.ID_PERSON                = P.ID_PERSON
													
													
WorkloadDao.getApproverList = SELECT ID_EVENT AS idEvent FROM EVENT WHERE ID_CASE  = :idCase AND  CD_TASK = :cdTask AND  CD_EVENT_STATUS = 'APRV' ORDER BY DT_LAST_UPDATE DESC

ApprovalRejectionPersonDaoImpl.saveApprovalRejectionDtls = UPDATE APPROVAL_REJECTION set IND_INCMPLT_CCL_INV=:indInCompleteCCLRejection WHERE ID_CASE=:idCase and ID_STAGE=:idStage	


EmployeeDaoImpl.getEmployeeEmailAddressForStage= SELECT E.TXT_EMPLOYEE_EMAIL_ADDRESS as employeeEmailAddress \
		FROM WORKLOAD W INNER JOIN EMPLOYEE E \
    ON W.ID_WKLD_PERSON=E.ID_PERSON \
		WHERE W.ID_WKLD_STAGE= :idStage

WorkloadDao.getAssignedWorkersSQL=SELECT ID_WKLD_PERSON as idWkldPerson \
                                      FROM WORKLOAD \
                                          WHERE ID_WKLD_STAGE = :idStage AND CD_WKLD_STAGE_PERS_ROLE IN ('PR', 'SE')
                                          
                                          
ContactDaoImpl.getRiskAssmtNarr=SELECT ID_EVENT AS idEvent FROM RISK_ASSMT_NARR WHERE ID_CASE=:idCase and ID_EVENT=:idEvent      

ContactDaoImpl.getRiskAssmtIarNarr=SELECT ID_EVENT AS idEvent FROM RISK_ASSMT_IRA_NARR WHERE ID_CASE=:idCase and ID_EVENT=:idEvent                                      																			          									   


OnCallDaoImpl.getRouterPersonOnCall=SELECT P.ID_PERSON AS idPerson, P.NM_PERSON_FULL AS nmPersonFull FROM ON_CALL OC \
                                    JOIN ON_CALL_COUNTY OCC ON OC.ID_ON_CALL = OCC.ID_ON_CALL \
                                    AND OC.CD_ON_CALL_PROGRAM = :cdProgram AND OC.DT_ON_CALL_START <= SYSDATE \
                                    AND OC.DT_ON_CALL_END >= SYSDATE AND OCC.CD_ON_CALL_COUNTY IN :cdCounty \
                                    JOIN EMP_ON_CALL_LINK EOC ON EOC.ID_ON_CALL = OCC.ID_ON_CALL AND EOC.CD_EMP_ON_CALL_DESIG = 'RC' \
                                    JOIN PERSON P ON P.ID_PERSON = EOC.ID_PERSON \
                                    ORDER BY P.NM_PERSON_FULL ASC \
                                    FETCH FIRST ROW ONLY


WorkloadDao.hasAppEventExistsBeforeFBSSRef=SELECT CASE WHEN EXISTS (\
                                    SELECT E.ID_EVENT FROM EVENT E WHERE E.ID_EVENT = :idApproval AND \
                                    TRUNC(E.DT_EVENT_OCCURRED) <= TO_DATE((SELECT DECODE FROM CODES_TABLES WHERE CODE_TYPE = 'CRELDATE' AND CODE = 'AUG_2020_IMPACT'),'MM/DD/YYYY') \
                                    AND E.CD_TASK IN ('2340','9895') AND NOT EXISTS (\
                                    SELECT AP.ID_APPROVAL FROM APPROVERS AP JOIN EVENT EV ON EV.ID_EVENT = AP.ID_APPROVAL AND EV.CD_TASK IN ('9910', '9911') \
                                    AND EV.ID_EVENT_STAGE = E.ID_EVENT_STAGE AND AP.CD_APPROVERS_STATUS = 'APRV'\
                                    )) THEN 1 ELSE 0 END AS stageExists FROM DUAL

StageDaoImpl.getRcciMrefs=with stageToResource as ( \
SELECT intToInv.ID_STAGE stageId, \
s.ID_STAGE intStageId, \
s.ID_CASE caseId, \
CASE WHEN thisintupd.ID_RESOURCE is null THEN toResource.ID_RESOURCE ELSE thisintupd.ID_RESOURCE END resourceId \
from STAGE s, INCOMING_FACILITY toResource, LICENSING_INVST_DTL thisintupd, STAGE_LINK intToInv \
where s.ID_STAGE = toResource.ID_STAGE \
AND intToInv.ID_STAGE = thisintupd.ID_LICNG_INVST_STAGE (+) \
AND intToInv.id_prior_stage = s.ID_STAGE \
AND s.ID_CASE in 

StageDaoImpl.getRcciMrefsGroupBy = ) \
SELECT count (*) rcciMrefCnt, heavyLifting.stageId idStage, heavyLifting.nbrRsrcFacilCapacity, \
heavyLifting.cdRsrcFacilType \
FROM ( \
SELECT inDetail.ID_RESOURCE, inDetail.ID_STAGE, stageToResource.resourceId, stageToResource.stageId, \
  r.NBR_RSRC_FACIL_CAPACITY nbrRsrcFacilCapacity, r.CD_RSRC_FACIL_TYPE cdRsrcFacilType \
FROM INCOMING_FACILITY inDetail, (select * from stageToResource) stageToResource, STAGE_LINK intToInvMapping, \
STAGE everystage, CAPS_RESOURCE r, LICENSING_INVST_DTL updates \
WHERE inDetail.ID_RESOURCE = stageToResource.resourceId \
AND intToInvMapping.ID_PRIOR_STAGE = inDetail.ID_STAGE \
AND intToInvMapping.ID_STAGE = everystage.ID_STAGE \
AND everystage.ID_STAGE = updates.ID_LICNG_INVST_STAGE (+) \
AND updates.ID_RESOURCE is null \
AND stageToResource.resourceId = r.ID_RESOURCE \
AND everystage.CD_STAGE = 'INV' \
AND everystage.CD_STAGE_PROGRAM in ('RCL', 'CCL') \
AND everystage.DT_STAGE_CREATED <> '31-DEC-4712' \
AND everystage.dt_stage_created >= add_months(sysdate, -6) \
AND r.CD_RSRC_FACIL_TYPE in ('80', '64', '67') \
UNION \
SELECT inDetail.ID_RESOURCE, inDetail.ID_LICNG_INVST_STAGE, stageToResource.resourceId, stageToResource.stageId, \
  r.NBR_RSRC_FACIL_CAPACITY nbrRsrcFacilCapacity, r.CD_RSRC_FACIL_TYPE cdRsrcFacilType \
FROM LICENSING_INVST_DTL inDetail, (select * from stageToResource) stageToResource, \
STAGE everystage, CAPS_RESOURCE r \
WHERE stageToResource.resourceId  = inDetail.ID_RESOURCE \
AND inDetail.ID_LICNG_INVST_STAGE = everystage.ID_STAGE \
AND stagetoresource.resourceId = r.ID_RESOURCE \
AND everystage.CD_STAGE = 'INV' \
AND everystage.CD_STAGE_PROGRAM in ('RCL', 'CCL') \
AND everystage.DT_STAGE_CREATED <> '31-DEC-4712'  \
AND everystage.dt_stage_created >= add_months(sysdate, -6) \
AND r.CD_RSRC_FACIL_TYPE in ('80', '64', '67') \
) heavyLifting \
GROUP BY (heavyLifting.stageId, heavyLifting.nbrRsrcFacilCapacity, heavyLifting.cdRsrcFacilType)

WorkloadDao.getCaseAssignedToPerson=select ID_WKLD_STAGE from workload wl \
                                    where ID_WKLD_CASE = :idCase \
                                    and (    ID_WKLD_PERSON = :idPerson \
                                    or ID_WKLD_PERSON in \
                                    (select id_person from unit_emp_link where id_unit in (select id_unit from unit_emp_link where id_person = :idPerson and cd_unit_member_role = 40 )))

ServAuthRetrieveDaoImpl.updateServiceAuthDetails=UPDATE SVC_AUTH_DETAIL SET DT_SVC_AUTH_DTL_TERM  = :authDetailSvcTermDate, \
        CD_SVC_AUTH_DTL_AUTH_TYPE = :authDetailSvcType, ID_LAST_UPDATE_PERSON = :lastUpdatePersonId, \
        DT_LAST_UPDATE = :lastUpdateDate, ID_TERM_RECORDED_PERSON = :termRecordPersonId, \
        DT_TERM_RECORDED = :termRecordedDate WHERE  ID_SVC_AUTH_DTL IN \
        (SELECT ID_SVC_AUTH_DTL FROM SVC_AUTH_DETAIL  WHERE ID_PERSON = :personId AND DT_SVC_AUTH_DTL_TERM > SYSDATE \
        AND CD_SVC_AUTH_DTL_SVC  = :authDetailSvcCode AND ID_SVC_AUTH \
        IN (SELECT ID_SVC_AUTH FROM SERVICE_AUTHORIZATION WHERE ID_RESOURCE = :resourceId \
        AND ID_CONTRACT  = :contractId ))

ServAuthRetrieveDaoImpl.getSadStartDateInFuture = SELECT DT_SVC_AUTH_DTL_BEGIN FROM SVC_AUTH_DETAIL \
        WHERE ID_PERSON = :personId \
        AND DT_SVC_AUTH_DTL_BEGIN > SYSDATE AND CD_SVC_AUTH_DTL_SVC = :authDetailSvcCode \
        AND CD_SVC_AUTH_DTL_AUTH_TYPE <> 'TRM' AND ID_SVC_AUTH \
        IN (SELECT ID_SVC_AUTH FROM SERVICE_AUTHORIZATION WHERE ID_RESOURCE = :resourceId AND ID_CONTRACT = :contractId)

ServAuthRetrieveDaoImpl.getOtherServiceAuthStartDate = SELECT  ID_SVC_AUTH_DTL as idSvcAuthDtl, \
        DT_SVC_AUTH_DTL_BEGIN as dtSvcAuthDtlBegin FROM \
        SVC_AUTH_DETAIL  WHERE ID_SVC_AUTH IN ( SELECT ID_SVC_AUTH FROM SERVICE_AUTHORIZATION \
        WHERE ID_RESOURCE != :resourceId  ) AND ID_PERSON = :personId AND CD_SVC_AUTH_DTL_AUTH_TYPE <> 'TRM' \
        AND DT_SVC_AUTH_DTL_TERM >= SYSDATE  AND CD_SVC_AUTH_DTL_SVC IN ('68O', '68P')

ServAuthRetrieveDaoImpl.updateServiceAuthTermDetail = UPDATE SVC_AUTH_DETAIL SET DT_SVC_AUTH_DTL_TERM = :authDetailSvcTermDate, \
        CD_SVC_AUTH_DTL_AUTH_TYPE = 'TRM', ID_TERM_RECORDED_PERSON = :termRecordedPersonID, \
        ID_LAST_UPDATE_PERSON = :personId, DT_LAST_UPDATE = SYSDATE, DT_TERM_RECORDED = SYSDATE \
        WHERE ID_SVC_AUTH_DTL = :authDetailSvcId  AND CD_SVC_AUTH_DTL_AUTH_TYPE <> 'TRM' AND DT_SVC_AUTH_DTL_TERM >= SYSDATE

WorkloadDao.workloadHasLoginUserForStageAndCase = SELECT COUNT(*) AS count FROM WORKLOAD \
		WHERE ID_WKLD_STAGE = :stageId AND ID_WKLD_CASE = :caseId AND ID_WKLD_PERSON = :loginUserId \
        AND CD_WKLD_STAGE_PROGRAM IN ('RCL', 'CCL') AND CD_WKLD_STAGE_PERS_ROLE IN ('PR', 'SE')