ContactDetailsDaoImpl.getCFTChildrenForStage=SELECT  DISTINCT P.ID_PERSON as idperson \
                                    FROM PERSON P, ALLEGATION A, STAGE S \
                                   WHERE P.ID_PERSON = A.ID_VICTIM \
                                   AND A.ID_ALLEGATION_STAGE = S.ID_STAGE \
                                   AND A.ID_ALLEGATION_STAGE = :ID_ALLEGATION_STAGE \
                                   AND P.DT_PERSON_DEATH IS NOT NULL \
                                   AND A.CD_ALLEG_DISPOSITION = 'RTB' \
                                   AND A.CD_ALLEG_SEVERITY = 'FT' \
                                   AND ( P.CD_PERSON_DEATH IN ('ABO', 'ABN', 'ABP') \
                                    OR P.CD_DEATH_RSN_CPS IN ('ABO', 'ABN', 'ABP') ) \
                                   AND NVL( S.CD_STAGE_REASON_CLOSED, 0 ) <> '79' 	
                                   
                                   
ContactDetailsDaoImpl.hasCF1050BRecord=SELECT   COUNT(*) CNT FROM   CONTACT CT, FT_RLS_INFO_RPT RLS \
                                        WHERE   CT.ID_EVENT = RLS.ID_EVENT AND CD_CONTACT_TYPE = 'FCFT' \
                                       AND RLS.DT_END IS NULL AND CT.ID_CONTACT_STAGE =:ID_CONTACT_STAGE AND RLS.ID_PERSON =:ID_PERSON
                                       
ContactDetailsDaoImpl.fetchContactPersonNarr =  SELECT id_contact_person_narr AS idContactPersonNarr, dt_last_update AS dtLastUpdate, narrative AS narrative, CD_RSN_NOT_NOTIFIED AS  cdRsnNotNofified \
											    FROM contact_person_narr \
											    WHERE id_person =  :idPerson \
											    AND id_event =   :idEvent	
											    
ContactDetailsDaoImpl.getCFTCurrHisInfo={call PKG_CHILDFATALITY.PROC_GET_CURR_HISTORY_DETAILS(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}

ContactDetailsDaoImpl.getCFTPriorHistory=call PKG_CHILDFATALITY.PROC_GET_PRIOR_HISTORY_DETAILS(?, ?, ?, ?, ? )

ContactDetailsDaoImpl.fetchFacilityType={? = call PKG_CHILDFATALITY.FN_GET_OPERATION_TYPE(?, ?, ?)}

ContactDetailsDaoImpl.cdTable= Select ct.cd_code, ct.sds_code FROM code_table_row ct WHERE ct.nm_table = 'ReasonRlngshmnt'

ContactDetailsDaoImpl.childFatility = {call PKG_CHILDFATALITY.PROC_GET_CHILD_FTLTY_DETAILS(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}

Csys04dDaoImpl.searchContactsSql	=	SELECT A.DT_CONTACT_OCCURRED AS dtContactOccurred, \
								A.DT_LAST_UPDATE AS tsLastUpdate, A.CD_CONTACT_TYPE AS cdContactType,A.CD_CONTACT_PURPOSE AS cdContactPurpose, \
								A.CD_CONTACT_METHOD AS cdContactMethod, A.IND_CONTACT_ATTEMPTED AS indContactAttempted, \
								A.ID_CONTACT_STAGE AS idContactStage,A.ID_EVENT AS idEvent FROM CONTACT A

											     			
Csys13dDaoImpl.getLastUpdate= SELECT DT_LAST_UPDATE as tsLastUpdate FROM
				     		 
Csys13dDaoImpl.eventId= WHERE ID_EVENT = :hI_ulIdEvent 

												 
FetchEventStatusDaoImpl.fourTableBaseSql = SELECT A.CD_EVENT_STATUS as szCdEventStatus, \
			  A.CD_EVENT_TYPE as szCdEventType, B.CD_STAGE as szCdStage, \
			  A.DT_EVENT_OCCURRED as dtDtEventOccurred, B.CD_STAGE_REASON_CLOSED as szCdStageReasonClosed, \
			 B.ID_CASE as ulIdCase, A.ID_EVENT as ulIdEvent,  A.ID_EVENT_STAGE as ulIdStage, \
			 B.NM_STAGE as szNmStage, C.NM_PERSON_FULL as szScrCaseWorker, \
			 A.TXT_EVENT_DESCR as szTxtEventDescr , A.CD_TASK as szCdTask, \
			  E.IND_CASE_SENSITIVE as bIndCaseSensitive, A.DT_EVENT_CREATED as dtDtEventCreated  FROM EVENT A LEFT JOIN PERSON C ON A.ID_EVENT_PERSON = C.ID_PERSON \
               JOIN STAGE B ON A.ID_EVENT_STAGE = B.ID_STAGE JOIN EVENT_PERSON_LINK D ON A.ID_EVENT = D.ID_EVENT \
               JOIN CAPS_CASE E ON B.ID_CASE = E.ID_CASE   
               
                 
FetchEventStatusDaoImpl.sqlThreeTablesStmtCaseSearch = SELECT  A.CD_EVENT_STATUS as szCdEventStatus,A.CD_EVENT_TYPE as szCdEventType, \
			 B.CD_STAGE as szCdStage,A.DT_EVENT_OCCURRED as dtDtEventOccurred, \
			 B.CD_STAGE_REASON_CLOSED as szCdStageReasonClosed,B.ID_CASE as ulIdCase,   A.ID_EVENT as ulIdEvent, \
			 A.ID_EVENT_STAGE as ulIdStage,B.NM_STAGE as szNmStage,C.NM_PERSON_FULL as szScrCaseWorker, \
			 A.TXT_EVENT_DESCR as szTxtEventDescr,A.CD_TASK as szCdTask, 'N', \
			 A.DT_EVENT_CREATED as dtDtEventCreated   FROM    EVENT  A,STAGE  B,PERSON C  WHERE \
			 A.ID_CASE = B.ID_CASE   AND  A.ID_EVENT_PERSON = C.ID_PERSON(+) 
			
FetchEventStatusDaoImpl.threeTableBaseSql = SELECT  A.CD_EVENT_STATUS as szCdEventStatus,A.CD_EVENT_TYPE as szCdEventType, \
			 B.CD_STAGE as szCdStage,A.DT_EVENT_OCCURRED as dtDtEventOccurred, \
			 B.CD_STAGE_REASON_CLOSED as szCdStageReasonClosed,B.ID_CASE as ulIdCase,   A.ID_EVENT as ulIdEvent, \
			 A.ID_EVENT_STAGE as ulIdStage,B.NM_STAGE as szNmStage,C.NM_PERSON_FULL as szScrCaseWorker, \
			 A.TXT_EVENT_DESCR as szTxtEventDescr,A.CD_TASK as szCdTask, 'N', \
			 A.DT_EVENT_CREATED as dtDtEventCreated   FROM EVENT A \
               JOIN STAGE B ON A.ID_EVENT_STAGE = B.ID_STAGE \
               LEFT JOIN PERSON C ON A.ID_EVENT_PERSON = C.ID_PERSON    
   
                                      
Ccmn87dDaoImpl.getRemovalDate=SELECT ID_PERSON as idPerson, CD_LEGAL_STAT_STATUS as cdLegalStatStatus,  DT_LEGAL_STAT_STATUS_DT as dtLegalStatStatusDt \
  													  FROM LEGAL_STATUS  \
  													  WHERE ID_LEGAL_STAT_EVENT = :idLegalStatEvent

Ccmn87dDaoImpl.selectRemovalDate=SELECT CR.DT_REMOVAL as dtRemoval \
  	   FROM CNSRVTRSHP_REMOVAL CR \
  	   WHERE CR.ID_VICTIM =:idperson \
  	   AND CR.ID_REMOVAL_EVENT = (SELECT MAX (CR2.ID_REMOVAL_EVENT) \
  	                             FROM CNSRVTRSHP_REMOVAL CR2 \
  	                             WHERE CR2.ID_VICTIM = :idPers \
  	                             AND CR2.DT_REMOVAL <=:dtLegalStatus \
  	                             AND CR2.DT_REMOVAL = (SELECT MAX (CR3.DT_REMOVAL) \
  	                                                   FROM CNSRVTRSHP_REMOVAL CR3 \
  	                                                   WHERE CR3.ID_VICTIM = :idpersn \
  	                                                   AND CR3.DT_REMOVAL <= :dtLegalStats))   
  	                                                     													                                                            
ContactFieldDaoImpl.getContactDetails = SELECT A.ID_CONTACT_WORKER as idPerson,B.NM_PERSON_FULL as nmPersonFull,A.CD_CONTACT_LOCATION as cdContactLocation, \
										A.CD_CONTACT_METHOD as cdContactMethod,A.CD_CONTACT_OTHERS as cdContactOthers,A.CD_CONTACT_PURPOSE as cdContactPurpose, \
										A.CD_CONTACT_TYPE as cdContactType,A.DT_CONTACT_OCCURRED as dtContactOccurred,A.IND_CONTACT_ATTEMPTED as indContactAttempted, \
										A.DT_CNTCT_MNTHLY_SUMM_BEG as dtMonthlySummBegin,A.DT_CNTCT_MNTHLY_SUMM_END as dtMonthlySummEnd, \
										A.DT_LAST_UPDATE as dtLastUpdateSecond,C.DT_LAST_UPDATE as dtLastUpdateThird,A.CD_RSN_SCROUT as cdReasonScreenOut, \
										A.IND_REC_CONS as indKinRecmd,A.TXT_KIN_CAREGIVER as nmKnCgvr,A.CD_RSN_AMTNE as cdRsnNotNeed, \
										A.AMT_NEEDED as amtNeeded,A.IND_SIBLING_VISIT as indSiblingVisit,A.CD_CHILD_SAFETY as cdChildSafety, \
										A.CD_PEND_LEGAL_ACTION as cdPendLegalAction,A.IND_PRINCIPAL_INTERVIEW as indPrinInterview, \
										A.CD_PROF_COLLATERAL as cdProfCollateral,A.CD_ADMINISTRATIVE as cdAdministrative,A.TXT_COMMENTS as Comments, \
										A.IND_ANNOUNCED as indAnnounced,A.IND_SAF_PLAN_COMP as indSafPlnCompleted,A.IND_FAM_PLAN_COMP as indFamPlnCompleted, \
										A.IND_SAF_CON_RESOLV as indSafConResolved,A.EST_CONTACT_HOURS as nbrHours,A.EST_CONTACT_MINS as nbrMins, \
                                        A.CD_FTF_EXCEPTION_RSN as cdFtfExceptionRsn FROM CONTACT A  LEFT JOIN PERSON B ON A.ID_CONTACT_WORKER = B.ID_PERSON  \
                                        LEFT JOIN EVENT C ON A.ID_EVENT = C.ID_EVENT WHERE \
										A.ID_EVENT = :idEvent	
	
	

StageCasePersonDaoImpl.getPrincipalsForStage =  SELECT B.ID_PERSON as ulIdPerson,RTRIM(B.NM_PERSON_FULL||' '||B.CD_PERSON_SUFFIX) as szNmPersonFull,C.CD_STAGE as szCdStage, \
												C.CD_STAGE_PROGRAM as szCdStageProgram FROM PERSON B,  STAGE C,  STAGE_PERSON_LINK A WHERE A.ID_STAGE = :idStage AND \
												A.CD_STAGE_PERS_ROLE = :cdStagePersRole AND B.ID_PERSON = A.ID_PERSON  AND C.ID_STAGE = A.ID_STAGE
					
										
StageSearchEventDaoImpl.getDateCaseOpenedForStage = SELECT DT_CASE_OPENED as dtCaseOpened FROM CAPS_CASE WHERE ID_CASE = ( SELECT ID_CASE FROM STAGE_LINK WHERE ID_STAGE = :idStage)										

#Cinv17dDao
Cinv17dDaoImpl.getFacilityInvestigationDetail = SELECT CD_FACIL_INVST_MHMR_CODE as szCdMhmrCompCode, \
                                              ADDR_FACIL_INVST_AFF_ATTN as szAddrFacilInvstAffAttn, \
                                              ADDR_FACIL_INVST_AFF_CITY as szAddrFacilInvstAffCity, \
                                              ADDR_FACIL_INVST_AFF_CNTY as szAddrFacilInvstAffCnty, \
                                              ADDR_FACIL_INVST_AFF_ST as addrFacilInvstAffSt, \
                                              ADDR_FACIL_INVST_AFF_STR1 as szAddrFacilInvstAffStr1, \
                                              ADDR_FACIL_INVST_AFF_STR2 as szAddrFacilInvstAffStr2, \
                                              ADDR_FACIL_INVST_STR1 as szAddrFacilInvstStr1, \
                                              ADDR_FACIL_INVST_STR2 as szAddrFacilInvstStr2, \
                                              ADDR_FACIL_INVST_AFF_ZIP as szAddrFacilInvstAffZip, \
                                              ADDR_FACIL_INVST_ATTN as szAddrFacilInvstAttn, \
                                              ADDR_FACIL_INVST_CITY as szAddrFacilInvstCity, \
                                              ADDR_FACIL_INVST_CNTY as szAddrFacilInvstCnty, \
                                              ADDR_FACIL_INVST_STATE as szAddrFacilInvstState, \
                                              ADDR_FACIL_INVST_ZIP as szAddrFacilInvstZip, \
                                              DT_FACIL_INVST_BEGUN as dtDtFacilInvstBegun, \
                                              DT_FACIL_INVST_COMPLT as dtDtFacilInvstComplt,  \
                                              DT_FACIL_INVST_INCIDENT as dtDtFacilInvstIncident, \
                                              DT_FACIL_INVST_INTAKE as dtDtFacilInvstIntake, \
                                              ID_AFFIL_RESOURCE as ulIdAffilResource, \
                                              ID_EVENT as ulIdEvent, \
                                              ID_FACIL_RESOURCE as ulIdFacilResource, \
                                              ID_FACIL_INVST_STAGE as ulIdStage, \
                                              NBR_FACIL_INVST_AFFIL_EXT as szNbrFacilInvstAffilExt, NBR_FACIL_INVST_AFFIL_PHN as lNbrFacilInvstAffilPhn, \
                                              NBR_FACIL_INVST_EXTENSION as szNbrFacilInvstExtension, \
                                              NBR_FACIL_INVST_PHONE as lNbrFacilInvstPhone, \
                                              NM_FACIL_INVST_AFF as szNmFacilInvstAff, \
                                              NM_FACIL_INVST_FACILITY as szNmFacilInvstFacility,  \
                                              TXT_FACIL_INVST_AFFIL_CMNT as szTxtFacilInvstAffilCmnt, \
                                              TXT_FACIL_INVST_COMMENTS as szTxtFacilInvstComments, \
                                              CD_FACIL_INVST_OVRALL_DIS as szCdFacilInvstOvrallDis, \
                                              DT_LAST_UPDATE as tsLastUpdate, \
                                              IND_FACIL_SUPERINT_NOTIF as cIndFacilSuperintNotif, \
                                              IND_STREAMLINED as cIndFacilStreamlined, \
                                              CD_INCIDENT_LOCATION as szCdLocationOfIncident, \
                                              CD_PRIOR_CASE_HISTORY as szCdPriorCaseHistRev, \
                                              ID_PRGRM_ADMIN_PERSON as idPrgrmAdminPerson \
                                         FROM FACILITY_INVST_DTL \
                                        WHERE ID_FACIL_INVST_STAGE = :ulIdStage


StagePersonRetrvDaoImpl.getPersonDetailsForStage = 	SELECT \
												    a.nm_person_full AS szNmPersonFull, \
												    a.cd_person_suffix AS szCdNameSuffix, \
												    a.nbr_person_age AS lNbrPersonAge, \
												    a.cd_person_sex AS cCdPersonSex, \
												    a.id_person AS ulIdPerson, \
												    a.ind_person_dob_approx AS bIndPersonDobApprox, \
												    a.dt_person_birth AS dtDtPersonBirth, \
												    a.cd_person_liv_arr AS szCdPersonLivArr, \
												    a.cd_person_char AS bCdPersonChar, \
												    a.cd_person_marital_status AS szCdPersonMaritalStatus, \
												    a.dt_person_death AS dtDtPersonDeath, \
												    a.nm_person_first AS szNmPersonFirst, \
												    a.nm_person_last AS szNmPersonLast, \
												    a.cd_person_ethnic_group AS szCdPersonEthnicGroup, \
												    b.cd_stage_pers_search_ind AS szCdStagePersSearchInd, \
												    b.cd_stage_pers_type AS szCdStagePersType, \
												    b.cd_stage_pers_rel_int AS szCdStagePersRelInt, \
												    b.cd_stage_pers_role AS szCdStagePersRole, \
												    b.ind_stage_pers_reporter AS bIndStagePersReporter, \
												    b.dt_last_update AS tsLastUpdate, \
												    b.id_stage_person_link AS ulIdStagePerson \
													FROM \
												    person a, \
												    stage_person_link b \
													WHERE \
												    a.id_person = b.id_person \
												    AND \
												    b.id_stage =:idsatege \
												    AND \
												    b.cd_stage_pers_type !=:cdstgpertype \
													ORDER BY \
												    b.cd_stage_pers_type DESC, \
												    a.nbr_person_age ASC
													
													
ContactNarrLogAppendDaoImpl.getContactInfoPerDate= SELECT DISTINCT         CASE             WHEN a.id_case IS NOT NULL THEN DECODE(                 a.id_case,                 NULL,                 'No',                 'Yes'             )             WHEN a.id_case IS NULL THEN DECODE(                 cgn.id_case,                 NULL,                 'No',                 'Yes'             )         END     AS indNarr,     c.id_event AS idEvent,     c.dt_last_update AS dtLastUpdate,     c.id_contact_worker AS idContactWorker,     c.id_contact_stage AS idContactStage,     c.dt_contact_occurred AS dtContactOccurred,     c.dt_cntct_next_summ_due AS dtNextSummaryDue,     DECODE(         c.ind_contact_attempted,         'Y',         'Yes',         'N',         'No'     ) indAtt,     c.cd_contact_type AS cdContactType,     c.cd_contact_purpose AS cdContactPurpose,     c.cd_contact_location AS cdContactLocation,     c.cd_contact_method AS cdContactMethod,     c.cd_contact_others AS cdContactOthers,     c.dt_cntct_mnthly_summ_beg AS dtMonthlySummBegin,     c.dt_cntct_mnthly_summ_end AS dtMonthlySummEnd,     c.dt_contact_apprv AS dtContactApprv,     c.cd_rsn_scrout AS cdRsnScrout,     c.ind_rec_cons AS indRecCons,     c.txt_kin_caregiver AS txtKinCaregiver,     c.cd_rsn_amtne AS cdRsnAmtNE,     c.amt_needed AS idAmtNeeded,     c.ind_sibling_visit AS indSiblingVisit,        p.nm_person_first AS nmNameFirst,     p.nm_person_middle AS nmNameMiddle,     p.nm_person_last AS nmNameLast,     p.cd_person_suffix AS cdNameSuffix,     e.dt_event_created AS dtEventCreated,     c.ind_announced AS indAnnounced,     c.ind_saf_plan_comp AS indSafPlanComp,     c.ind_fam_plan_comp AS indFamPlanComp,     c.est_contact_hours AS nbrHours,     c.est_contact_mins AS nbrMins,p.id_person AS idPerson,         CASE             WHEN dt_contact_occurred >= TO_DATE(                 (                     SELECT                         DECODE                     FROM                         creldate                     WHERE                         code = 'DEC_2014_IMPACT'                 ),                 'MM/DD/YYYY') THEN 'Y'             ELSE 'N'         END     AS indClientTime FROM     event e,     person p,     contact_narrative a,     contact c,     contact_guide_narr cgn WHERE         c.id_contact_worker = p.id_person    AND         c.id_event = a.id_event (+)     AND         cgn.id_event (+) = e.id_event     AND         c.id_event = e.id_event     AND         c.id_contact_stage =:idStage     AND         trunc(c.dt_contact_occurred) >= to_date(:dtFrom, 'MM/DD/YYYY')  AND trunc(c.dt_contact_occurred)<=to_date(:dtTo, 'MM/DD/YYYY')    AND         c.cd_contact_type NOT IN ('AEXR','LEXR') ORDER BY c.dt_contact_occurred ASC 

ContactNarrLogAppendDaoImpl.getNameContact =   SELECT C.ID_EVENT as idEvent,CO.DECODE  as nmNameFirst, 'A' FULLNAME FROM CONTACT C,COTHCNCT CO WHERE ID_CONTACT_STAGE = :idStage     AND C.CD_CONTACT_OTHERS = CO.CODE     AND  TRUNC(C.DT_CONTACT_OCCURRED) BETWEEN to_date(:dtFrom, 'MM/DD/YYYY')  AND to_date(:dtTo, 'MM/DD/YYYY') UNION SELECT EPL.ID_EVENT,P.NM_PERSON_FULL NAME ,SPL.CD_STAGE_PERS_TYPE FULLNAME FROM PERSON P , EVENT_PERSON_LINK EPL ,STAGE_PERSON_LINK SPL, CONTACT C WHERE SPL.ID_STAGE = :idStage     AND SPL.CD_STAGE_PERS_TYPE <> 'STF'     AND EPL.ID_PERSON = P.ID_PERSON     AND P.ID_PERSON = SPL.ID_PERSON     AND C.ID_EVENT = EPL.ID_EVENT     AND C.ID_EVENT IN (SELECT ID_EVENT FROM CONTACT WHERE ID_CONTACT_STAGE = :idStage)     AND  TRUNC(C.DT_CONTACT_OCCURRED) BETWEEN to_date(:dtFrom, 'MM/DD/YYYY')  AND to_date(:dtTo, 'MM/DD/YYYY') ORDER BY FULLNAME DESC
ContactNarrLogAppendDaoImpl.getContactGuide = SELECT CGN . ID_CONTACT_GUIDE_NARR as idContactGuideNarr, 	 CGN . DT_LAST_UPDATE as dtLastUpdate, 	 CGN . ID_EVENT as idEvent, 	 CGN . ID_PERSON as idPerson, 	 CGN . ID_CASE as idCase, 	 CGN . ID_STAGE as idStage, 	 CGN . CD_TYPE as cdType, 	 CGN . CD_GUIDE_ROLE as cdGuideRole, 	 P . NM_PERSON_FIRST as nmNameFirst, 	 P . NM_PERSON_MIDDLE as nmNameMiddle,   	P . NM_PERSON_LAST as nmNameLast, 	 P . CD_PERSON_SUFFIX  as cdNameSuffix 	FROM 	CONTACT_GUIDE_NARR  CGN , 	 CONTACT  C , 	 PERSON  P WHERE  CGN . ID_CASE =:idCase AND   C . ID_EVENT = CGN . ID_EVENT  AND   P. ID_PERSON (+) = CGN . ID_PERSON AND   TRUNC ( C . DT_CONTACT_OCCURRED ) >= to_date(:dtFrom, 'MM/DD/YYYY') AND  TRUNC ( C . DT_CONTACT_OCCURRED ) <= to_date(:dtTo, 'MM/DD/YYYY')
 
 #CLSCG5D
ContactCVSDaoImpl.getChildInfo= SELECT DISTINCT \
          SPL.ID_PERSON as idPerson, \
          P.NM_PERSON_FIRST as nmPersonFirst, \
          P.NM_PERSON_MIDDLE as nmPersonMiddle, \
          P.NM_PERSON_LAST as nmPersonLast, \
          P.CD_PERSON_SUFFIX as cdPersonSuffix, \
          P.DT_PERSON_BIRTH as dtPersonBirth \
             FROM STAGE S, \
                  PERSON P, \
                  STAGE_PERSON_LINK SPL \
             WHERE SPL.ID_CASE = :idCase \
             AND SPL.ID_STAGE = S.ID_STAGE \
             AND S.CD_STAGE IN( 'FSU', 'FRE', 'SUB') \
             AND SPL.CD_STAGE_PERS_TYPE = 'PRN' \
             AND (MONTHS_BETWEEN(:dtMonthlyBeginSumm,P.DT_PERSON_BIRTH)/12 <= 18.0 \
                   OR SPL.CD_STAGE_PERS_REL_INT = 'SL') \
             AND SPL.CD_STAGE_PERS_REL_INT NOT IN ('AB', 'AD', 'AP', 'PA', 'PB', 'PD', 'ST', 'AF', 'PG') \
             AND (S.DT_STAGE_CLOSE IS NULL OR S.DT_STAGE_CLOSE >= :dtMonthlyBeginSumm) \
             AND P.ID_PERSON = SPL.ID_PERSON \
             ORDER BY DT_PERSON_BIRTH
             
             
#CLSCG5D #1

ContactCVSDaoImpl.getToDoDate = SELECT MAX(TD.DT_TODO_TASK_DUE) as dtTodoTaskDue \
		                  FROM TODO TD, \
		                  LEGAL_ACTION LA \
		                  WHERE LA.ID_PERSON = :idPerson \
		                  AND LA.CD_LEGAL_ACT_ACTION = 'CCOR' \
                                  AND LA.ID_LEGAL_ACT_EVENT = TD.ID_TODO_EVENT
								  
#CLSCG5D #2

ContactCVSDaoImpl.getDtCSPCompleted = SELECT max(CP.DT_CSP_PLAN_COMPLETED) as dtCspPlanCompl \
             	     FROM CHILD_PLAN CP JOIN EVENT EV ON EV.ID_EVENT = CP.ID_CHILD_PLAN_EVENT \
                     WHERE CP.ID_CASE = :idCase \
                     AND EV.CD_EVENT_STATUS = 'APRV' AND CP.ID_PERSON = :idPerson
					 
					 
#CLSCG5D #3

ContactCVSDaoImpl.getDtMedAppt = SELECT MAX(PAM.DT_PROF_ASSMT_APPT) as dtProfAssmtApptM \
                     FROM PROFESSIONAL_ASSMT PAM \
                     WHERE PAM.ID_PERSON_PRINCIPAL = :idPerson \
                     AND PAM.CD_PROF_ASSMT_APPT_RSN = 'PYM'
					 
#CLSCG5D #4

ContactCVSDaoImpl.getDtDentAppt = SELECT MAX(PAD.DT_PROF_ASSMT_APPT) as dtProfAssmtApptD \
                     FROM PROFESSIONAL_ASSMT PAD \
                     WHERE PAD.ID_PERSON_PRINCIPAL = :idPerson \
                     AND PAD.CD_PROF_ASSMT_APPT_RSN = 'DAA'

#CLSCG5D #5

ContactCVSDaoImpl.getDtPersLoc = SELECT MAX(PL.DT_PLOC_START) as dtPlocStart \
		     FROM PERSON_LOC PL \
		     WHERE PL.ID_PERSON= :idPerson \
                     AND PL.CD_PLOC_TYPE = 'ALOC'
					 
#CLSCG5D #6

ContactCVSDaoImpl.getCdPlocChild = SELECT MAX(PL.CD_PLOC_CHILD) as cdPlocChild \
                     FROM PERSON_LOC PL \
		     WHERE PL.DT_PLOC_START= :dtPlocStart \
		     AND PL.ID_PERSON= :idPerson \
                     AND PL.CD_PLOC_TYPE = 'ALOC'
                     
#CLSCG5D #7
#Defect 13013 - Fixed SQL to get latest school name.
ContactCVSDaoImpl.getEduHistory =   SELECT E.ID_PERSON AS idPerson, E.CD_EDHIST_ENROLL_GRADE AS cdEdHistEnrollGrade, \
					 E.NM_EDHIST_SCHOOL AS nmEdHistSchool, \
					  E.DT_LAST_ARDIEP AS dtLastArdiep, E.TXT_SPECIAL_ACCMDTNS AS specialAccmdtns,  \
					  E.CD_EDHIST_NEEDS_1 as need1, E.CD_EDHIST_NEEDS_2 as need2,  \
					  E.CD_EDHIST_NEEDS_3 as need3, E.CD_EDHIST_NEEDS_4 as need4,  \
					  E.CD_EDHIST_NEEDS_5 as need5, E.CD_EDHIST_NEEDS_6 as need6, \
					  E.CD_EDHIST_NEEDS_7 as need7, E.CD_EDHIST_NEEDS_8 as need8  \
					 FROM EDUCATIONAL_HISTORY E WHERE E.ID_PERSON  = :idPerson \
					 AND E.DT_EDHIST_ENROLL_DATE <= :dtMonthlyBeginSumm \
					 ORDER BY E.DT_EDHIST_ENROLL_DATE DESC 
                     
                     

#CLSCG5D #8

ContactCVSDaoImpl.getCansAssessDate =   SELECT MAX(DT_CANS_ASMNT) AS dtCansAssessment FROM CP_EMTNL_THRPTC_DTL CPET \
					 JOIN CHILD_PLAN CP ON CP.ID_CHILD_PLAN_EVENT = CPET.ID_CHILD_PLAN_EVENT WHERE CP.ID_PERSON  = :idPerson 					                  
             
#CLSCG6D
ContactCVSDaoImpl.getParentInfo= SELECT DISTINCT \
			SPL.ID_PERSON as idPerson, \
			P.NM_PERSON_FIRST as nmPersonFirst, \
			P.NM_PERSON_MIDDLE as nmPersonMiddle, \
			P.NM_PERSON_LAST as nmPersonLast, \
			P.CD_PERSON_SUFFIX as cdPersonSuffix \
			FROM STAGE S, \
			PERSON P, \
			STAGE_PERSON_LINK SPL \
			WHERE SPL.ID_CASE = :idCase \
			AND SPL.ID_STAGE = S.ID_STAGE \
			AND (S.DT_STAGE_CLOSE IS NULL OR S.DT_STAGE_CLOSE >= :dtMonthlyBeginSumm) \
			AND P.ID_PERSON = SPL.ID_PERSON \
			ORDER BY P.NM_PERSON_LAST, P.NM_PERSON_FIRST
			
#CLSCG6D #1

ContactCVSDaoImpl.getLatestFamilyPlanEvalFsu = SELECT MAX(FPE.DT_COMPLETED) as dtFpeCompl \
		                  FROM EVENT_PERSON_LINK EPL, \
		                  EVENT E, \
		                  STAGE S, \
	                          FAMILY_PLAN_EVAL FPE \
		                  WHERE FPE.ID_CASE = :idCase \
	                          AND FPE.ID_EVENT = EPL.ID_EVENT \
	                          AND E.ID_EVENT = FPE.ID_EVENT \
	                          AND S.ID_STAGE = E.ID_EVENT_STAGE \
	                          AND S.CD_STAGE = 'FSU' \
	                          AND EPL.ID_PERSON = :idPerson \
				
							  
#CLSCG6D #2

ContactCVSDaoImpl.getLatestFamilyPlanFsu = SELECT MAX(FP.DT_COMPLETED) as dtFpCompl \
		                  FROM EVENT_PERSON_LINK EPL, \
		                  EVENT E, \
		                  STAGE S, \
	                          FAMILY_PLAN FP \
		                  WHERE FP.ID_CASE = :idCase \
	                          AND FP.ID_EVENT = EPL.ID_EVENT \
	                          AND E.ID_EVENT = FP.ID_EVENT \
	                          AND S.ID_STAGE = E.ID_EVENT_STAGE \
	                          AND S.CD_STAGE = 'FSU' \
	                          AND EPL.ID_PERSON = :idPerson	


#CLSCG6D #3

ContactCVSDaoImpl.getLatestFamilyPlanEvalFre = SELECT MAX(FPE.DT_COMPLETED) as dtFpeCompl \
		                  FROM EVENT_PERSON_LINK EPL, \
		                  EVENT E, \
		                  STAGE S, \
	                          FAMILY_PLAN_EVAL FPE \
		                  WHERE FPE.ID_CASE = :idCase \
	                          AND FPE.ID_EVENT = EPL.ID_EVENT \
	                          AND E.ID_EVENT = FPE.ID_EVENT \
	                          AND S.ID_STAGE = E.ID_EVENT_STAGE \
	                          AND S.CD_STAGE = 'FRE' \
	                          AND EPL.ID_PERSON = :idPerson \
				
							  
#CLSCG6D #4

ContactCVSDaoImpl.getLatestFamilyPlanFre = SELECT MAX(FP.DT_COMPLETED) as dtFpeCompl \
		                  FROM EVENT_PERSON_LINK EPL, \
		                  EVENT E, \
		                  STAGE S, \
	                          FAMILY_PLAN FP \
		                  WHERE FP.ID_CASE = :idCase \
	                          AND FP.ID_EVENT = EPL.ID_EVENT \
	                          AND E.ID_EVENT = FP.ID_EVENT \
	                          AND S.ID_STAGE = E.ID_EVENT_STAGE \
	                          AND S.CD_STAGE = 'FRE' \
	                          AND EPL.ID_PERSON = :idPerson	
	                          
#CLSCG6D #5

ContactCVSDaoImpl.getFsnaFsuFre = SELECT MAX(CP.DT_OF_ASGNMNT) as dtFsnaAssessment \
		                  FROM EVENT E, \
		                  STAGE S, \
	                          CPS_FSNA CP \
	                          WHERE E.ID_EVENT = CP.ID_EVENT \
	                          AND S.ID_STAGE = E.ID_EVENT_STAGE \
	                          AND S.CD_STAGE in ('FSU','FRE') \
	                          AND E.CD_EVENT_STATUS='APRV' \
	                          AND (CP.ID_PRMRY_CRGVR_PRNT = :idPerson	OR CP.ID_SECNDRY_CRGVR_PRNT = :idPerson )


#CLSCG6D #6

ContactCVSDaoImpl.getFsnaFre = SELECT MAX(CP.DT_OF_ASGNMNT) as dtFsnaAssessment \
		                  FROM EVENT E, \
		                  STAGE S, \
	                          CPS_FSNA CP \
	                          WHERE E.ID_EVENT = CP.ID_EVENT \
	                          AND S.ID_STAGE = E.ID_EVENT_STAGE \
	                          AND S.CD_STAGE = 'FRE' \
	                          AND E.CD_EVENT_STATUS='APRV' \
	                          AND (CP.ID_PRMRY_CRGVR_PRNT = :idPerson	OR CP.ID_SECNDRY_CRGVR_PRNT = :idPerson )                         
			
			
#CLSCGGD
ContactCVSDaoImpl.getEventInfo= SELECT \
						EPL.ID_EVENT as idEvent, \
							P.ID_PERSON as idPerson, \
							P.NM_PERSON_FIRST as nmPersonFirst, \
						P.NM_PERSON_MIDDLE as nmPersonMiddle, \
						P.NM_PERSON_LAST as nmPersonLast, \
						P.CD_PERSON_SUFFIX as cdPersonSuffix, \
						EPL.IND_KIN_NOTIF_CHILD as indKinNotifChild, \
						EPL.IND_PERS_RMVL_NOTIFIED as indPersRmvlNotified, \
						SPL.CD_STAGE_PERS_REL_INT as cdStagePersRelInt, \
						CPN.CD_RSN_NOT_NOTIFIED as cdRsnNotNotified, \
						CPN.ID_CONTACT_PERSON_NARR as idContactPersonNarr \
						FROM PERSON P, \
						EVENT_PERSON_LINK EPL, \
						STAGE_PERSON_LINK SPL, \
						CONTACT_PERSON_NARR CPN, \
					EVENT E \
						WHERE EPL.ID_CASE = :idCase \
							AND P.ID_PERSON = EPL.ID_PERSON \
							AND SPL.ID_PERSON = P.ID_PERSON \
							AND CPN.ID_PERSON(+) = EPL.ID_PERSON \
							AND E.ID_EVENT = EPL.ID_EVENT \
							AND SPL.ID_STAGE = E.ID_EVENT_STAGE \
								AND CPN.ID_EVENT(+) = EPL.ID_EVENT \
								AND (EPL.IND_KIN_NOTIF_CHILD IS NOT NULL OR  \
						EPL.IND_PERS_RMVL_NOTIFIED IS NOT NULL)	
						
#CLSCG8D
ContactCVSDaoImpl.getContactInfo=SELECT \
			CGT.ID_CONTACT_GUIDE_TOPIC as idContactGuideTopic, \
			CGT.ID_CONTACT_GUIDE_NARR as idContactGuideNarr, \
			CGT.DT_LAST_UPDATE as dtLastUpdate, \
			CGT.CD_GUIDE_TOPIC as cdGuideTopic, \
			CGN.ID_CASE as idCase, \
			CGN.ID_STAGE as idStage, \
			CGN.ID_EVENT as idEvent \
			FROM \
			CONTACT_GUIDE_NARR CGN, \
			CONTACT_GUIDE_TOPIC CGT \
			WHERE CGN.ID_CASE = :idCase \
			AND CGN.ID_CONTACT_GUIDE_NARR in (:idContactGuideNarrList) \
			AND CGN.ID_CONTACT_GUIDE_NARR=CGT.ID_CONTACT_GUIDE_NARR

#CLSCGFD			
KinshipNotificationDaoImpl.getPersonNamesDtls=	SELECT \
	P.ID_PERSON as idPerson,P.NM_PERSON_FIRST as nmPersonFirst, P.NM_PERSON_MIDDLE as nmPersonMiddle, \
	P.NM_PERSON_LAST as nmPersonLast, P.CD_PERSON_SUFFIX as cdPersonSuffix,EPL.IND_KIN_NOTIF_CHILD as indKinNotifChild ,EPL.IND_PERS_RMVL_NOTIFIED as indPersRmvlNotified, \
	P.DT_PERSON_BIRTH as dtPersonBirth, \
	SPL.CD_STAGE_PERS_TYPE as cdStagePersType, SPL.CD_STAGE_PERS_REL_INT as cdStagePersRelInt , E.DT_EVENT_OCCURRED AS dtEventOccurred \
	FROM PERSON P,EVENT E,EVENT_PERSON_LINK EPL, STAGE_PERSON_LINK SPL \
	WHERE E.ID_EVENT= :idEvent \
	AND EPL.ID_EVENT = E.ID_EVENT AND E.ID_EVENT_STAGE = SPL.ID_STAGE AND P.ID_PERSON = EPL.ID_PERSON AND P.ID_PERSON = SPL.ID_PERSON

#CLSCGHD
KinshipNotificationDaoImpl.getPersonAddress = SELECT EPL.ID_PERSON as idPersonAddr,PA.ADDR_PERS_ADDR_ST_LN_1 as addrPersAddrStLn1, \
	PA.ADDR_PERS_ADDR_ST_LN_2 as addrPersAddrStLn2,PA.ADDR_PERSON_ADDR_CITY as addrPersonAddrCity, \
	PA.CD_PERSON_ADDR_STATE as cdPersonAddrState,PA.ADDR_PERSON_ADDR_ZIP as addrPersonAddrZip FROM EVENT_PERSON_LINK EPL,ADDRESS_PERSON_LINK APL, \
    PERSON_ADDRESS PA WHERE EPL.ID_EVENT=:idEvent \
    AND APL.ID_PERSON = EPL.ID_PERSON \
    AND (APL.CD_PERS_ADDR_LINK_TYPE = 'RS' \
   	OR APL.CD_PERS_ADDR_LINK_TYPE = 'RM') \
    AND APL.DT_PERS_ADDR_LINK_END = TO_DATE('4712-12-31', 'YYYY/MM/DD') \
    AND PA.ID_PERSON_ADDR = APL.ID_PERSON_ADDR \
    AND PA.ADDR_PERS_ADDR_ST_LN_1 IS NOT NULL ORDER BY EPL.ID_PERSON,APL.CD_PERS_ADDR_LINK_TYPE  DESC, \
    APL.IND_PERS_ADDR_LINK_PRIMARY DESC, \
    APL.DT_PERS_ADDR_LINK_START DESC
    
    
    
 StageSearchEventDaoImpl.getAssessmentListByStageEvent = SELECT E.cd_task AS cdTask, \
														  S.id_stage AS idStage, \
														  E.cd_event_status AS cdEventStatus, \
														  T.txt_task_decode AS txtTaskDecode \
														FROM caps_case C \
														JOIN stage S \
														ON S.id_case = C.id_case \
														AND S.cd_stage IN ('FSU', 'FPR', 'FRE') \
														AND S.dt_stage_close IS NULL \
														JOIN Event E \
														ON E.id_event_stage = S.id_stage \
														AND E.cd_event_type = 'ASM' \
														JOIN task T \
														ON T.cd_task  = E.cd_task \
														WHERE C.id_case = :idCase
														
														
contactDetails.getAllPersonsRecords	= SELECT NAM.ID_PERSON as idPerson, \
									        NAM.NM_NAME_FIRST as nmPersonFirst, NAM.NM_NAME_MIDDLE as nmPersonMiddle, NAM.NM_NAME_LAST as nmPersonLast, NAM.CD_NAME_SUFFIX as cdPersonSuffix, \
									        PAD.ADDR_PERS_ADDR_ST_LN_1 as addrPersonStLn1, PAD.ADDR_PERS_ADDR_ST_LN_2 as addrPersonStLn2,PAD.ADDR_PERSON_ADDR_CITY as addrPersonCity, \
									        PAD.ADDR_PERSON_ADDR_ZIP as addrPersonZip,PAD.CD_PERSON_ADDR_COUNTY as cdPersonCounty, PAD.CD_PERSON_ADDR_STATE as cdPersonState, \
									        PPH.NBR_PERSON_PHONE as personPhone,PPH.NBR_PERSON_PHONE_EXTENSION as phoneExtnsn, SPL.CD_STAGE_PERS_REL_INT as cdStagePersRelInt, \
									        SPL.CD_STAGE_PERS_ROLE as cdStagePersRole, PER.CD_PERSON_DEATH as cdPersonDeath, PER.CD_PERSON_ETHNIC_GROUP as cdPersonEthnicGroup, \
									        PER.DT_PERSON_BIRTH as dob, CASE  WHEN PER.DT_PERSON_BIRTH IS NOT NULL THEN TRUNC(MONTHS_BETWEEN(SYSDATE,PER.DT_PERSON_BIRTH)/12) \
									   ELSE PER.NBR_PERSON_AGE END AS     NBR_PERSON_AGE, PER.CD_PERS_GUARD_CNSRV, PER.CD_PERSON_SEX as cdPersonSex, PER.CD_PERSON_MARITAL_STATUS, \
									            'class' AS     CD_EMPLOYEE_CLASS, 'email' AS     TXT_EMAIL_ADDRESS, SPL.CD_STAGE_PERS_TYPE, CASE WHEN(PER.DT_PERSON_DEATH IS NULL \
									     OR PER.CD_PERSON_DEATH IS NULL) THEN 'checked' END AS     SCR_TXT_PERSON_DECEASED_NO, CASE WHEN(PER.DT_PERSON_DEATH IS NOT NULL \
									     OR PER.CD_PERSON_DEATH IS NOT NULL) THEN 'checked' END AS SCR_TXT_PERSON_DECEASED_YES, PER.CD_PERSON_LANGUAGE, 'UT' AS cdEthniCity , \
									        PDL.CD_PERSON_CITIZENSHIP as cdPersonCitizenShip, CASE WHEN PER.CD_PERSON_ETHNIC_GROUP IS NOT NULL  THEN CONCAT(CTH.DECODE,'(') ELSE 'Unable to Determine(' \
									 END AS personEthnicGroup FROM STAGE_PERSON_LINK SPL,  ADDRESS_PERSON_LINK APL,  NAME NAM, PERSON PER, PERSON_ADDRESS PAD, \
									        PERSON_PHONE PPH, PERSON_DTL PDL,  CETHNIC CTH WHERE SPL.ID_STAGE = :idStage AND PER.ID_PERSON = SPL.ID_PERSON \
									    AND PER.ID_PERSON = PDL.ID_PERSON(+) AND PER.ID_PERSON = NAM.ID_PERSON AND PER.ID_PERSON = APL.ID_PERSON (+) \
									    AND APL.ID_PERSON_ADDR = PAD.ID_PERSON_ADDR (+) AND PER.ID_PERSON = PPH.ID_PERSON (+) AND NAM.IND_NAME_PRIMARY  = 'Y' \
									    AND NAM.DT_NAME_END_DATE  = TO_DATE('12/31/4712','MM/DD/YYYY') \
									    AND APL.IND_PERS_ADDR_LINK_PRIMARY (+) = 'Y' AND APL.DT_PERS_ADDR_LINK_END (+) = TO_DATE('12/31/4712','MM/DD/YYYY') \
									    AND PPH.IND_PERSON_PHONE_PRIMARY (+) = 'Y'  AND PPH.DT_PERSON_PHONE_END (+) = TO_DATE('12/31/4712','MM/DD/YYYY') \
									    AND PER.CD_PERSON_ETHNIC_GROUP = CTH.CODE(+)
									    
									    
contactDetails.getPersonsAddrDtls =  SELECT APL.ID_PERSON as idPerson, PAD.ID_PERSON_ADDR as addrPersonFull, PAD.ADDR_PERS_ADDR_ST_LN_1 as addrPersonStLn1, \
								        PAD.ADDR_PERS_ADDR_ST_LN_2 as addrPersonStLn2, PAD.ADDR_PERSON_ADDR_CITY as addrPersonCity, PAD.ADDR_PERSON_ADDR_ATTN as addrPersonAttn, \
								        PAD.ADDR_PERSON_ADDR_ZIP as addrPersonZip, PAD.CD_PERSON_ADDR_COUNTY as cdPersonCounty, PAD.CD_PERSON_ADDR_STATE as cdPersonState, \
								        APL.CD_PERS_ADDR_LINK_TYPE as addrPersonLink, PAD.ID_PERSON_ADDR + 1 AS ID_PERSON_ADDRESS FROM ADDRESS_PERSON_LINK APL, \
								        PERSON_ADDRESS PAD WHERE APL.ID_PERSON = :idPerson AND APL.IND_PERS_ADDR_LINK_INVALID = 'N' AND APL.DT_PERS_ADDR_LINK_END = TO_DATE('12/31/4712','MM/DD/YYYY') \
								   		 AND APL.ID_PERSON_ADDR = PAD.ID_PERSON_ADDR
								   		 
contactDetails.getRecentClosedIdStage =	SELECT   L.ID_PRIOR_STAGE as idPriorStage FROM  STAGE S, STAGE_LINK  L WHERE    S.ID_STAGE  = L.ID_PRIOR_STAGE \
							           AND      L.ID_STAGE  = :idStage  AND   S.DT_STAGE_CLOSE IS NOT NULL ORDER BY S.DT_STAGE_CLOSE DESC
							           
							           
							                      
          
contactDetails.getContactActiveAddr = SELECT * FROM ( SELECT   E.ID_PERSON as idPerson, E.NBR_EMP_ACTIVE_PCT as nbrEmpActivePct, E.DT_EMP_HIRE as dtEmpHire, E.ID_EMP_JOB_HISTORY as idEmpJobHistory, \
							                E.ID_EMPLOYEE_LOGON as idEmployeeLogon, E.CD_EMPLOYEE_CLASS as cdEmployeeClass, E.TXT_EMPLOYEE_CLASS as txtEmployeeClass, \
							                E.CD_EMP_SECURITY_CLASS_NM as cdEmpSecurityClassNm, E.ID_EMP_OFFICE as idEmpOffice, E.DT_EMP_LAST_ASSIGNED as dtEmpLastAssigned, \
							                E.CD_EMP_PROGRAM as cdEmpProgram,  E.IND_EMP_CONFIRMED_HRMIS as indEmpConfirmedHrmis, E.IND_EMP_PENDING_HRMIS as indEmpPendingHrmis, \
							                E.IND_EMP_ACTIVE_STATUS as indEmpActiveStatus, E.DT_EMP_TERMINATION as dtEmpTermination,  EJH.ID_JOB_PERS_SUPV as idJobPersSupv, \
							                EJH.CD_JOB_CLASS as cdJobClass, EJH.TXT_JOB_DESCR as txtJobDescr, EJH.IND_JOB_ASSIGNABLE as indJobAssignable, \
							                EJH.CD_JOB_FUNCTION as cdJobFunction, EJH.CD_JOB_BJN as cdJobBjn, EJH.DT_JOB_END as dtJobEnd, EJH.DT_JOB_START as dtJobStart, \
							                O.CD_OFFICE_MAIL as cdOfficeMail,  O.CD_OFFICE_PROGRAM as cdOfficeProgram, O.CD_OFFICE_REGION as cdOfficeRegion, \
							                O.NM_OFFICE_NAME as nmOfficeName, MC.NBR_MAIL_CODE_PHONE as nbrMailCodePhone, MC.NBR_MAIL_CODE_PHONE_EXT as nbrMailCodePhoneExt, \
							                MC.ADDR_MAIL_CODE_ST_LN_1 as addrMailCodeStLnOne, MC.ADDR_MAIL_CODE_ST_LN_2 as addrMailCodeStLnTwo, \
							                MC.ADDR_MAIL_CODE_CITY as addrMailCodeCity, MC.ADDR_MAIL_CODE_ZIP as addrMailCodeZip, MC.ADDR_MAIL_CODE_COUNTY as addrMailCodeCounty, \
							                MC.IND_MAIL_CODE_INVALID as indMailCodeInvalid, PP.ID_PERSON_PHONE as idPersonPhone, PP.TXT_PERSON_PHONE_COMMENTS as txtPersonPhoneComments, \
							                PP.NBR_PERSON_PHONE_EXTENSION as nbrPersonPhoneExtension, PP.NBR_PERSON_PHONE as nbrPersonPhone,  PP.DT_PERSON_PHONE_START as dtPersonPhoneStart, \
							                PP.DT_PERSON_PHONE_END as dtPersonPhoneEnd, PP.IND_PERSON_PHONE_INVALID as indPersonPhoneInvalid,  PP.IND_PERSON_PHONE_PRIMARY as indPersonPhonePrimary, \
							                PP.CD_PERSON_PHONE_TYPE as cdPersonPhoneType, N.ID_NAME as idName,  N.IND_NAME_INVALID as indNameInvalid, N.NM_NAME_FIRST as nmNameFirst, \
							                N.NM_NAME_MIDDLE as nmNameMiddle, N.NM_NAME_LAST as nmNameLast,    N.IND_NAME_PRIMARY as indNamePrimary, \
							                N.CD_NAME_SUFFIX as cdNameSuffix, N.DT_NAME_START_DATE as dtNameStartDate, N.DT_NAME_END_DATE as dtNameEndDate \
							           FROM NAME N,  (SELECT ID_PERSON,   ID_PERSON_PHONE,  TXT_PERSON_PHONE_COMMENTS, NBR_PERSON_PHONE_EXTENSION,  NBR_PERSON_PHONE, \
							                       DT_PERSON_PHONE_START, DT_PERSON_PHONE_END,IND_PERSON_PHONE_INVALID, IND_PERSON_PHONE_PRIMARY,  CD_PERSON_PHONE_TYPE \
							                  FROM PERSON_PHONE  WHERE ID_PERSON_PHONE = ( SELECT MAX(PP2.ID_PERSON_PHONE) FROM PERSON_PHONE PP2 \
							                 WHERE PP2.ID_PERSON = :idPerson AND PP2.IND_PERSON_PHONE_PRIMARY = 'Y' AND PP2.DT_PERSON_PHONE_END =  ( \
							                SELECT MAX(PP3.DT_PERSON_PHONE_END) FROM PERSON_PHONE PP3 WHERE PP3.IND_PERSON_PHONE_PRIMARY = 'Y' \
							                   AND PP3.ID_PERSON = :hI_ulIdPerson:hI_ulIdPerson_i))) PP, MAIL_CODE MC, OFFICE O, \
							               (SELECT IND_JOB_ASSIGNABLE, CD_JOB_FUNCTION, CD_JOB_BJN,  DT_JOB_END,  DT_JOB_START, CD_JOB_CLASS, ID_PERSON, \
							                       ID_JOB_PERS_SUPV, C.DECODE AS TXT_JOB_DESCR FROM EMP_JOB_HISTORY , CEMPJBCL C WHERE CD_JOB_CLASS = C.CODE \
							                   AND ID_EMP_JOB_HISTORY = ( SELECT MAX(EJH1.ID_EMP_JOB_HISTORY)   FROM EMP_JOB_HISTORY EJH1 WHERE EJH1.ID_PERSON = :idPerson \
							                   AND EJH1.DT_JOB_END = (   SELECT MAX(EJH2.DT_JOB_END) FROM EMP_JOB_HISTORY EJH2  WHERE EJH2.ID_PERSON = :idPerson))) EJH, \
							                EMPLOYEE E WHERE E.ID_PERSON = :idPerson AND E.ID_PERSON = N.ID_PERSON (+) AND N.IND_NAME_PRIMARY (+) = 'Y' \
							            AND N.DT_NAME_END_DATE (+) = TO_DATE('12/31/4712', 'MM/DD/YYYY')  AND E.ID_PERSON = PP.ID_PERSON (+) \
							            AND E.ID_PERSON = EJH.ID_PERSON (+) AND E.ID_EMP_OFFICE = O.ID_OFFICE (+) AND O.CD_OFFICE_MAIL = MC.CD_MAIL_CODE (+)) WHERE ROWNUM = 1
							            
							            
contactDetails.getDistinctAllgtnList =  SELECT DISTINCT 0 AS indSelfNeglect,  CASE  WHEN CD_ALLEG_TYPE = 'EMAB'  THEN 'Emotional Abuse' ELSE DECODE  END AS cdAllegType, \
								           CD_ALLEG_DISPOSITION as cdAllegDisposition FROM ALLEGATION, CABALTYP  WHERE ID_ALLEGATION_STAGE = :idStage  AND ID_ALLEGED_PERPETRATOR <> ID_VICTIM  AND CD_ALLEG_TYPE = CODE  UNION \
								           SELECT DISTINCT 1 AS indSelfNeglect,  CONCAT(DECODE,' - self')  AS cdAllegType,  CD_ALLEG_DISPOSITION as cdAllegDisposition  FROM ALLEGATION,  CABALTYP WHERE ID_ALLEGATION_STAGE = :idStage \
								           AND ID_ALLEGED_PERPETRATOR = ID_VICTIM AND CD_ALLEG_TYPE = CODE ORDER BY indSelfNeglect
								           
ContactCVSDaoImpl.getLatestFPOS=SELECT  CASE \
WHEN (SELECT MAX(FE.ID_EVENT) FROM FAMILY_PLAN_EVAL FE INNER JOIN EVENT E \
ON FE.ID_EVENT=E.ID_EVENT INNER JOIN EVENT_PERSON_LINK EP ON E.ID_EVENT=EP.ID_EVENT \
WHERE  E.CD_EVENT_STATUS='APRV' AND EP.ID_PERSON=:idPerson ) IS NOT NULL \
THEN  \
(SELECT (FE.DT_CURR_REVW ||',' || S1.CD_STAGE) AS dtFPOS FROM FAMILY_PLAN_EVAL FE INNER JOIN EVENT E \
ON FE.ID_EVENT=E.ID_EVENT INNER JOIN STAGE S1  \
ON E.ID_EVENT_STAGE=S1.ID_STAGE \
WHERE FE.ID_EVENT =(SELECT MAX(FE.ID_EVENT) FROM FAMILY_PLAN_EVAL FE  \
INNER JOIN EVENT E ON FE.ID_EVENT=E.ID_EVENT INNER JOIN EVENT_PERSON_LINK EP ON E.ID_EVENT=EP.ID_EVENT \
WHERE E.CD_EVENT_STATUS='APRV' AND EP.ID_PERSON=:idPerson)) \
ELSE \
(SELECT  (FP.DT_COMPLETED ||',' || S1.CD_STAGE) AS dtFPOS FROM FAMILY_PLAN FP \
INNER JOIN EVENT E ON FP.ID_EVENT=E.ID_EVENT \
 INNER JOIN STAGE S1  \
ON E.ID_EVENT_STAGE=S1.ID_STAGE WHERE FP.ID_EVENT = (SELECT MAX(FP.ID_EVENT) FROM FAMILY_PLAN FP \
 INNER JOIN EVENT E ON FP.ID_EVENT=E.ID_EVENT INNER JOIN EVENT_PERSON_LINK EP ON E.ID_EVENT=EP.ID_EVENT \
WHERE E.CD_EVENT_STATUS='APRV' AND EP.ID_PERSON=:idPerson)) \
END dtFPOS  FROM DUAL							           
								           